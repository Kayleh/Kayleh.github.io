<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Kayleh</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://kayleh.top/"/>
  <updated>2020-11-13T15:26:40.908Z</updated>
  <id>https://kayleh.top/</id>
  
  <author>
    <name>Kayleh</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ubuntu固定IP设置方法</title>
    <link href="https://kayleh.top/null/"/>
    <id>https://kayleh.top/null/</id>
    <published>2020-11-13T15:23:35.000Z</published>
    <updated>2020-11-13T15:26:40.908Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ubuntu固定IP设置方法"><a href="#ubuntu固定IP设置方法" class="headerlink" title="ubuntu固定IP设置方法"></a>ubuntu固定IP设置方法</h1><h2 id="确认你要修改的网卡号"><a href="#确认你要修改的网卡号" class="headerlink" title="确认你要修改的网卡号"></a>确认你要修改的网卡号</h2><p>先确认你要修改的网卡号，假设你的服务器有多张网卡：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#96;ubuntu1804:~$ ip addr&#96;</span><br></pre></td></tr></table></figure><p>我的服务器配置如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#96;1: lo:  mtu 65536 qdisc noqueue state UNKNOWN &#96;&#96;group&#96; &#96;default&#96; &#96;qlen 1000&#96;&#96;link&#x2F;loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00&#96;&#96;inet 127.0.0.1&#x2F;8 scope host lo&#96;&#96;valid_lft forever preferred_lft forever&#96;&#96;inet6 ::1&#x2F;128 scope host&#96;&#96;valid_lft forever preferred_lft forever&#96;&#96;2: ens33:  mtu 1500 qdisc fq_codel state UP &#96;&#96;group&#96; &#96;default&#96; &#96;qlen 1000&#96;&#96;link&#x2F;ether 00:0c:29:f1:b5:e1 brd ff:ff:ff:ff:ff:ff&#96;&#96;inet 172.16.87.140&#x2F;24 brd 172.16.87.255 scope global dynamic ens33&#96;&#96;valid_lft 1500sec preferred_lft 1500sec&#96;&#96;inet6 fe80::20c:29ff:fef1:b5e1&#x2F;64 scope link&#96;&#96;valid_lft forever preferred_lft forever&#96;</span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img" src="https://img2018.cnblogs.com/blog/1024482/201909/1024482-20190926195311926-778081344.png" alt="img"/></div><span class="image-caption">img</span></div><h2 id="3-默认的网卡配置文件"><a href="#3-默认的网卡配置文件" class="headerlink" title="3. 默认的网卡配置文件"></a>3. 默认的网卡配置文件</h2><p>默认情况下，网络使用DHCP</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#96;ubuntu1804:~$ cat &#x2F;etc&#x2F;netplan&#x2F;50-cloud-init.yaml&#96;&#96;配置文件内容如下&#96; &#96;network:&#96;&#96;  &#96;&#96;ethernets:&#96;&#96;    &#96;&#96;ens33:&#96;&#96;      &#96;&#96;dhcp4: yes&#96;&#96;      &#96;&#96;addresses: []&#96; &#96;  &#96;&#96;version: 2&#96;</span><br></pre></td></tr></table></figure><h2 id="4-设置静态IP"><a href="#4-设置静态IP" class="headerlink" title="4. 设置静态IP"></a>4. 设置静态IP</h2><p>需要把配置文件修改为以下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#96;ubuntu1804:~$ sudo vi &#x2F;etc&#x2F;netplan&#x2F;50-cloud-init.yaml&#96;</span><br></pre></td></tr></table></figure><p>假设IP地址修改为192.168.1.100，子网掩码24位即255.255.255.0，网关设置为192.168.1.1，DNS1：223.5.5.5，DNS2：223.6.6.6</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#96;network:&#96;&#96;  &#96;&#96;ethernets:&#96;&#96;    &#96;&#96;ens33:&#96;&#96;      &#96;&#96;dhcp4: no&#96;&#96;      &#96;&#96;addresses: [192.168.1.100&#x2F;24]&#96;&#96;      &#96;&#96;optional: &#96;&#96;true&#96;&#96;      &#96;&#96;gateway4: 192.168.1.1&#96;&#96;      &#96;&#96;nameservers:&#96;&#96;          &#96;&#96;addresses: [223.5.5.5,223.6.6.6]&#96; &#96;  &#96;&#96;version: 2&#96;</span><br></pre></td></tr></table></figure><p>　　</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://img2018.cnblogs.com/blog/1024482/201909/1024482-20190926195125025-1367860921.png" alt="img"/></div><span class="image-caption">img</span></div><h2 id="5-应用新配置"><a href="#5-应用新配置" class="headerlink" title="5. 应用新配置"></a>5. 应用新配置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#96;ubuntu1804:~$ sudo netplan apply&#96;</span><br></pre></td></tr></table></figure><p>使用<code>ip addr</code>检查新地址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#96;ubuntu1804:~$ ip addr&#96;</span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img" src="https://img2018.cnblogs.com/blog/1024482/201909/1024482-20190926195452363-191570303.png" alt="img"/></div><span class="image-caption">img</span></div><h2 id="6-测试网络连通性"><a href="#6-测试网络连通性" class="headerlink" title="6. 测试网络连通性"></a>6. 测试网络连通性</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ubuntu1804:~$ ping 192.168.1.100</span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img" src="https://img2018.cnblogs.com/blog/1024482/201909/1024482-20190926195509927-312010988.png" alt="img"/></div><span class="image-caption">img</span></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;ubuntu固定IP设置方法&quot;&gt;&lt;a href=&quot;#ubuntu固定IP设置方法&quot; class=&quot;headerlink&quot; title=&quot;ubuntu固定IP设置方法&quot;&gt;&lt;/a&gt;ubuntu固定IP设置方法&lt;/h1&gt;&lt;h2 id=&quot;确认你要修改的网卡号&quot;&gt;&lt;a hr
      
    
    </summary>
    
    
    
      <category term="linux" scheme="https://kayleh.top/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>file input and output</title>
    <link href="https://kayleh.top/file-input-and-output/"/>
    <id>https://kayleh.top/file-input-and-output/</id>
    <published>2020-11-03T18:24:07.000Z</published>
    <updated>2020-11-03T16:23:03.361Z</updated>
    
    <content type="html"><![CDATA[<h1 id="对文件的输入输出"><a href="#对文件的输入输出" class="headerlink" title="对文件的输入输出"></a>对文件的输入输出</h1><h2 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h2><ul><li><strong>程序文件</strong>。包括源程序文件，这种文件的内容是程序代码</li><li><strong>数据文件</strong>。供程序运行时读写的数据</li></ul><p>操作系统把各种设备都统一作为文件来处理。</p><p>文件一般指存储在外部介质上数据的集合。</p><h4 id="流-数据流"><a href="#流-数据流" class="headerlink" title="流(数据流)"></a>流(数据流)</h4><p>数据的输入输出.流表示了信息从源到目的地的流动.</p><h4 id="文件名"><a href="#文件名" class="headerlink" title="文件名"></a>文件名</h4><p>文件路径+文件名主干+文件后缀</p><h4 id="文件的分类"><a href="#文件的分类" class="headerlink" title="文件的分类"></a>文件的分类</h4><ul><li><strong>ASCII文件</strong>,在存储前需要转换,<strong>文本文件</strong></li><li><strong>二进制文件</strong>,存储在内存的数据的映象,不需要加以转换输出到外存,称为<strong>映像文件</strong>.</li></ul><h4 id="文件缓冲区"><a href="#文件缓冲区" class="headerlink" title="文件缓冲区"></a>文件缓冲区</h4><p><img src="https://cdn.jsdelivr.net/gh/kayleh/cdn2/1183448-20200229114252989-978233196.png" alt></p><p>ANSI C标准采用“缓冲文件系统”处理数据文件。</p><p>所谓缓冲文件系统是指系统自动地在内存区为程序中每一个正在使用的文件开辟一个文件缓冲区从内存向磁盘输出数据必须先送到内存中的缓冲区，装满缓冲区后才一起送到磁盘去。</p><p>如果从磁盘向计算机读入数据，则一次从磁盘文件将一批数据输入到内存缓冲区(充满缓冲区)，然后再从缓冲区逐个地将数据送到程序数据区(给程序变量) 。 </p><p>程序与磁盘之间交互，不是立即完成，系统或程序可根据需要设置缓冲区，以提高存取效率 </p><h4 id="文件类型指针"><a href="#文件类型指针" class="headerlink" title="文件类型指针"></a>文件类型指针</h4><p>对于操作系统而言,关键的概念是”<strong>文件指针</strong>”.每个被使用的文件都在内存中开辟一段存储单元,用来存放文件的有关信息.这些信息是保存在一个结构体变量中的.该结构体类型变量是由系统定义的,取名为FILE.有几个文件就建立几个这样的结构体变量,分别存放各文件的有关信息.同时返回对应的FILE结构指针.</p><p>FILE结构体类型在stdio.h文件中定义如下:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Typedef <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  short level;            <span class="comment">//缓冲区”满”或”空”的程度//</span></span><br><span class="line">  <span class="keyword">unsigned</span> flags;         <span class="comment">//文件状态标志//</span></span><br><span class="line">  <span class="keyword">char</span> fd;               <span class="comment">//文件描述符//</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">char</span> hold;     <span class="comment">//如无缓冲区不读取字符//</span></span><br><span class="line">  short bsize;            <span class="comment">//缓冲区大小//</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">char</span> *<span class="built_in">buffer</span>;   <span class="comment">//数据缓冲区的位置//</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">char</span> *curp;    <span class="comment">//指针,当前指向//</span></span><br><span class="line">  <span class="keyword">unsigned</span> istemp;       <span class="comment">//临时文件,指示器//</span></span><br><span class="line">  short token;           <span class="comment">//用于有效性检查//</span></span><br><span class="line">&#125;FILE;</span><br></pre></td></tr></table></figure><p>定义一个指向文件型数据的指针变量</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FILE *fp;</span><br></pre></td></tr></table></figure><p>可以使fp指向某一个文件的文件信息区(是一个结构体变量),通过该文件信息区中的信息就能够访问该文件.</p><p><strong>通过文件指针变量能够找到与它关联的文件</strong>,如果有n个文件,应设n个指针变量,分别指向n个FILE类型变量,以实现对n个文件的访问.</p><p>通常将这种指向文件信息区的指针变量简称为<strong>指向文件的指针变量</strong></p><blockquote><p>并不是指向外部介质上的数据文件的开头,而是指向内存中的文件信息区的开头.</p></blockquote><h2 id="打开与关闭文件"><a href="#打开与关闭文件" class="headerlink" title="打开与关闭文件"></a>打开与关闭文件</h2><p>“打开”指为文件建立相应的信息区(用来存放有关文件的信息)和文件缓存区(用来暂时存放输入输出的数据).</p><p>打开文件的同时,一般指定一个指针变量指向该文件,建立起指针变量与文件之间的联系.</p><h4 id="用fopen函数打开数据文件"><a href="#用fopen函数打开数据文件" class="headerlink" title="用fopen函数打开数据文件"></a>用fopen函数打开数据文件</h4><p>fopen(文件名,使用文件方式)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">FILE *fp;</span><br><span class="line">fp=fopen(<span class="string">"a1"</span>,<span class="string">"r"</span>);</span><br></pre></td></tr></table></figure><p>实现失败返回NULL.</p><h4 id="使用文件方式"><a href="#使用文件方式" class="headerlink" title="使用文件方式."></a>使用文件方式.</h4><div class="table-container"><table><thead><tr><th>打开方式</th><th>含义</th><th>指定文件不存在时</th><th>指定文件存在时</th></tr></thead><tbody><tr><td>r</td><td>只读方式打开文本文件</td><td>出错</td><td>正常打开</td></tr><tr><td>w</td><td>只写方式打开文本文件</td><td>建立新文件</td><td>文件原有内容丢失</td></tr><tr><td>a</td><td>追加方式打开文本文件</td><td>建立新文件</td><td>在原有内容末尾追加</td></tr><tr><td>r+</td><td>读/写方式打开文本文件</td><td>出错</td><td>正常打开</td></tr><tr><td>w+</td><td>读/写方式创建新的文本文件</td><td>建立新文件</td><td>文件原有内容丢失</td></tr><tr><td>a+</td><td>读/追加方式建立新的文本文件</td><td>建立新文件</td><td>在原有内容末尾追加</td></tr><tr><td>rb</td><td>只读方式打开二进制文件</td><td>出错</td><td>正常打开</td></tr><tr><td>wb</td><td>只写方式打开二进制文件</td><td>建立新文件</td><td>文件原有内容丢失</td></tr><tr><td>ab</td><td>追加方式打开二进制文件</td><td>建立新文件</td><td>在原有内容末尾添加</td></tr><tr><td>rb+</td><td>读/写方式打开二进制文件</td><td>出错</td><td>正常打开</td></tr><tr><td>wb+</td><td>读/写方式创建新的二进制文件</td><td>建立新文件</td><td>文件原有内容丢失</td></tr><tr><td>ab+</td><td>读/追加方式创建新的二进制文件</td><td>建立新文件</td><td>在原有内容末尾追加</td></tr></tbody></table></div><blockquote><p>带b区别在于换行的处理</p></blockquote><h4 id="用fclose函数关闭数据文件"><a href="#用fclose函数关闭数据文件" class="headerlink" title="用fclose函数关闭数据文件"></a>用fclose函数关闭数据文件</h4><p>fclose(文件指针);</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fclose(fp);</span><br></pre></td></tr></table></figure><p>先把缓冲区中的数据输出到磁盘文件,然后才撤销文件信息区.</p><h2 id="顺序读写数据文件"><a href="#顺序读写数据文件" class="headerlink" title="顺序读写数据文件"></a>顺序读写数据文件</h2><h4 id="怎样向文件读写字符"><a href="#怎样向文件读写字符" class="headerlink" title="怎样向文件读写字符"></a>怎样向文件读写字符</h4><p>读写一个字符的函数.</p><div class="table-container"><table><thead><tr><th>函数名</th><th>调用形式</th><th>功能</th><th>返回值</th></tr></thead><tbody><tr><td>fgetc</td><td>fgetc(fp)</td><td>从fp指向的文件读入一个字符</td><td>读成功,带回所读的字符,失败了则返回文件结束标志EOF(即-1)</td></tr><tr><td>fputc</td><td>fputc(ch,fp)</td><td>把字符ch写到文件指针变量fp所指向的文件中</td><td>输出成功,返回值就是输出的字符,输出失败,则返回文件结束标志EOF(即-1)</td></tr></tbody></table></div><h5 id="从键盘输入一些字符-并逐个把它们送到磁盘上去-直到用户输入一个”-”为止"><a href="#从键盘输入一些字符-并逐个把它们送到磁盘上去-直到用户输入一个”-”为止" class="headerlink" title="从键盘输入一些字符,并逐个把它们送到磁盘上去,直到用户输入一个”#”为止."></a>从键盘输入一些字符,并逐个把它们送到磁盘上去,直到用户输入一个”#”为止.</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    FILE *fp;</span><br><span class="line">    <span class="keyword">char</span> ch, filename[<span class="number">10</span>];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"请输入所用的文件名:"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>, filename);</span><br><span class="line">    getchar();<span class="comment">//用来消化最后输入的回车符</span></span><br><span class="line">    <span class="keyword">if</span> ((fp = fopen(filename, <span class="string">'w'</span>) == <span class="literal">NULL</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"cannot open file\n"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);<span class="comment">//终止程序</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"请输入一个准备存储到磁盘的字符串(以#结束):"</span>);</span><br><span class="line">    ch = getchar();</span><br><span class="line">    <span class="keyword">while</span> (ch != <span class="string">'#'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        fputc(ch, fp);</span><br><span class="line">        <span class="built_in">putchar</span>(ch);</span><br><span class="line">        ch = getchar(); <span class="comment">//再接收从键盘输入的一个字符</span></span><br><span class="line">    &#125;</span><br><span class="line">    fclose(fp);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="number">10</span>); <span class="comment">//向屏幕输出一个换行符s</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="将一个磁盘文件中的信息复制到另一个磁盘文件中"><a href="#将一个磁盘文件中的信息复制到另一个磁盘文件中" class="headerlink" title="将一个磁盘文件中的信息复制到另一个磁盘文件中"></a>将一个磁盘文件中的信息复制到另一个磁盘文件中</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    FILE *in, *out;</span><br><span class="line">    <span class="keyword">char</span> ch, infile[<span class="number">10</span>], outfile[<span class="number">10</span>];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"输入读入文件的名字:"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>, infile);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"输入输出文件的名字:"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>, outfile);</span><br><span class="line">    getchar(); <span class="comment">//用来消化最后输入的回车符</span></span><br><span class="line">    <span class="keyword">if</span> ((in = fopen(infile, <span class="string">'r'</span>) == <span class="literal">NULL</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"cannot open file\n"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ((out = fopen(outfile, <span class="string">'w'</span>) == <span class="literal">NULL</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"cannot open file\n"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ch = fgetc(in);</span><br><span class="line">    <span class="keyword">while</span> (!feof(in)) <span class="comment">//如未遇到输入文件的结束标志</span></span><br><span class="line">    &#123;</span><br><span class="line">        fputc(ch, out);</span><br><span class="line">        <span class="built_in">putchar</span>(ch); <span class="comment">//显示在屏幕上</span></span><br><span class="line">        ch = fgetc(in);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="number">10</span>); <span class="comment">//显示完全部字符后换行</span></span><br><span class="line">    fclose(in);</span><br><span class="line">    fclose(out);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在访问磁盘文件时,是逐个字符(字节)进行的,为了知道当前访问到第几个字节,系统用”文件读写位置标记”来表示当前所访问的位置.开始时指向第1个字节,每访问完一个字节,当前读写位置就指向下一个字节.为了知道对文件的读写是否完成,只需看文件读写位置是否移到文件的末尾.</p><blockquote><p>feof函数可以检测文件是否已被读取过.</p></blockquote><h4 id="怎样向文件读写一个字符串"><a href="#怎样向文件读写一个字符串" class="headerlink" title="怎样向文件读写一个字符串"></a>怎样向文件读写一个字符串</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fgets(str,n,fp);</span><br></pre></td></tr></table></figure><p>作用是从fp所指向的文件中读入一个长度为n-1的字符串,并在最后加一个’\0’字符,然后把这n个字符存放到字符数组str中.</p><p><strong>读写一个字符串的函数</strong></p><div class="table-container"><table><thead><tr><th>函数名</th><th>调用形式</th><th>功能</th><th>返回值</th></tr></thead><tbody><tr><td>fgets</td><td>fgets(str,n,fp)</td><td>从fp指向的文件读入一个长度为(n-1)的字符串,存放到字符数组str中.</td><td>读成功,返回地址str,失败则返回NULL</td></tr><tr><td>fputs</td><td>fputs(str,fp)</td><td>把str所指向的字符串写到文件指针变量fp所指向的文件中</td><td>输出成功,返回0;否则返回非0值</td></tr></tbody></table></div><p><strong>fgets函数的原型为：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">char</span> *<span class="title">fgets</span><span class="params">(<span class="keyword">char</span> * str,<span class="keyword">int</span> n,FILE *fp)</span></span>;</span><br></pre></td></tr></table></figure><p>作用是从文件读入一个字符串.调用时可以写成下面的形式:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fgets(str,n,fp)</span><br></pre></td></tr></table></figure><p>n是要求得到的字符个数,但实际上只从fp所指向的文件中读入n-1字符,然后在最后加一个’\0’字符,这样得到的字符串共有n个字符,把它们放到字符数组str中.</p><p>如果在读完n-1个字符之前遇到换行符’\n’或文件结束符EOF,读入即结束,但将所遇到的换行符”\n”也作为一个字符读入.执行成功返回值为str数组首元素的地址,如果一开始就遇到文件尾或读数据出错,则为NULL.</p><p><strong>fputs函数的原型为：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">char</span> *<span class="title">fputs</span><span class="params">(<span class="keyword">char</span> * str,FILE *fp)</span></span>;</span><br></pre></td></tr></table></figure><p>其作用是将str所指向的字符串输出到fp所指向的文件中.调用时可以写成下面的形式:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">fputs</span>(<span class="string">"China"</span>,fp);</span><br></pre></td></tr></table></figure><p>第一个参数可以是字符串常量,字符数组名或字符型指针.字符串末尾的’\0’不输出.输出成功,函数值为0,不成功则为EOF(-1).</p><h5 id="从键盘读入若干个字符串-对它们按字母大小的顺序排序-然后把排好序的字符串送到磁盘文件中保存"><a href="#从键盘读入若干个字符串-对它们按字母大小的顺序排序-然后把排好序的字符串送到磁盘文件中保存" class="headerlink" title="从键盘读入若干个字符串,对它们按字母大小的顺序排序,然后把排好序的字符串送到磁盘文件中保存."></a>从键盘读入若干个字符串,对它们按字母大小的顺序排序,然后把排好序的字符串送到磁盘文件中保存.</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    FILE *fp;</span><br><span class="line">    <span class="keyword">char</span> str[<span class="number">3</span>][<span class="number">10</span>], temp[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">int</span> i, j, k, n = <span class="number">3</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Enter strings:\n"</span>);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        gets(str[i]);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++) <span class="comment">//用选择法对字符串排序</span></span><br><span class="line">    &#123;</span><br><span class="line">        k = i;</span><br><span class="line">        <span class="keyword">for</span> (j = i + <span class="number">1</span>; j &lt; n; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">strcmp</span>(str[k], str[j]) &gt; <span class="number">0</span>)</span><br><span class="line">                k = j;</span><br><span class="line">            <span class="keyword">if</span> (k != i)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">strcpy</span>(temp, str[i]);</span><br><span class="line">                <span class="built_in">strcpy</span>(str[i], str[k]);</span><br><span class="line">                <span class="built_in">strcpy</span>(str[k], temp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((fp = fopen(<span class="string">"D:\\CC\\string.dat"</span>, <span class="string">"w"</span>)) == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"can't open file!\n"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\nThe new sequence:\n"</span>);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">fputs</span>(str[i], fp);</span><br><span class="line">        <span class="built_in">fputs</span>(<span class="string">"\n"</span>, fp);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%s"</span>, str[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    fclose(fp);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="用格式化的方式读写文本文件"><a href="#用格式化的方式读写文本文件" class="headerlink" title="用格式化的方式读写文本文件"></a>用格式化的方式读写文本文件</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">fprintf</span>(文件指针,格式化字符串,输出表列);</span><br><span class="line"><span class="built_in">fscanf</span>(文件指针,格式化字符串,输入表列);<span class="comment">//从磁盘文件上读入ASCII字符</span></span><br><span class="line">---</span><br><span class="line"><span class="built_in">fprintf</span>(fp,<span class="string">"%d,%6.2f"</span>,i,f);</span><br></pre></td></tr></table></figure><p>因为在输入时要将文件中的ASCII码<strong>转换为二进制形式</strong>再保存在内存变量中,在输出时又要将内存中的二进制形式转换成字符,要花费更多的时间,因此,在内存与磁盘交换数据的情况下,最好不用fprintf和fscanf函数,而用fread和fwrite函数.</p><h4 id="用二进制方式向文件读写一组数据"><a href="#用二进制方式向文件读写一组数据" class="headerlink" title="用二进制方式向文件读写一组数据"></a>用二进制方式向文件读写一组数据</h4><p>允许用fread函数从文件读一个数据块,用fwrite函数向文件写一个数据块.在读写时以二进制形式进行的.在向磁盘写数据时,直接将内存中的一组数据<strong>原封不动,不加转换</strong>地复制到磁盘文件上,读入时也是将磁盘文件中若干字节的内容一批读入内存.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fread(<span class="built_in">buffer</span>,<span class="built_in">size</span>,count,fp);</span><br><span class="line">fwrite(<span class="built_in">buffer</span>,<span class="built_in">size</span>,count,fp);</span><br></pre></td></tr></table></figure><blockquote><p>buffer:</p><ul><li>fread:用来存放从文件读入的数据的存储区的地址</li><li>fwrite:把此地址开始的存储区中的数据向文件输出(指起始地址)</li></ul><p>size：要读的每个数据块的字节数<br>count：要读的数据块的个数<br>fp：文件指针</p></blockquote><p>如:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fread(f,<span class="number">4</span>,<span class="number">10</span>,fp);</span><br><span class="line"><span class="comment">//f是一个float型数组名(代表数组首元素地址),从fp所指向的文件读入10个4个字节的数据,存储到数组f中</span></span><br></pre></td></tr></table></figure><p>fread或fwrite执行成功返回<strong>count</strong>(输入或输出数据项的个数).</p><h5 id="从键盘输入10个学生的有关数据-然后把它们转存到磁盘文件上"><a href="#从键盘输入10个学生的有关数据-然后把它们转存到磁盘文件上" class="headerlink" title="从键盘输入10个学生的有关数据,然后把它们转存到磁盘文件上."></a>从键盘输入10个学生的有关数据,然后把它们转存到磁盘文件上.</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SIZE 10</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student_type</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">int</span> num;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">char</span> addr[<span class="number">15</span>];</span><br><span class="line">&#125; stu[SIZE];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">save</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    FILE *fp;</span><br><span class="line">    <span class="keyword">if</span> ((fp = fopen(<span class="string">"D:\\CC\\string.dat"</span>, <span class="string">"wb"</span>)) == <span class="literal">NULL</span>)<span class="comment">//二进制文件</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"can't open file!\n"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; SIZE; i++)</span><br><span class="line">        <span class="keyword">if</span> ((fwrite(&amp;stu[i], <span class="keyword">sizeof</span>(struct Student_type), <span class="number">1</span>, fp) != <span class="number">1</span>))</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"file write error!\n"</span>);</span><br><span class="line"></span><br><span class="line">    fclose(fp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">save</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Enter datas of student:\n"</span>);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; SIZE; i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s %d %d %s"</span>, stu[i].name, &amp;stu[i].num, &amp;stu[i].age, stu[i].addr);</span><br><span class="line">    save();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="文本文件和二进制文件"><a href="#文本文件和二进制文件" class="headerlink" title="文本文件和二进制文件"></a>文本文件和二进制文件</h4><ul><li><p>数据的存储方式</p><p>​    文本方式: 数据以字符方式(ASCII代码)存储到文件中.如整数12,送到文件时占2个字节,而不是4个字节.以文本方式保存的数据便于阅读</p><p>​    二进制方式:数据按在内存的存储状态原封不动地复制到文件.如整数12,送到文件时和内存中一样占4个字节.</p></li><li><p>文件的分类</p><p>​    文本文件(ASCII文件):文件全部为ASCII字符</p><p>​    二进制文件:按二进制方式把在内存中的数据复制到文件的,称为二进制文件,即映像文件.</p></li><li><p>文件的打开方式</p><p>​    文本方式: 不带b的方式,读写文件时<strong>对换行符进行转换</strong></p><p>​    文本方式: 带b的方式,读写文件时<strong>对换行符不进行转换</strong></p></li><li><p>文件读写函数</p><p>​    文本读写函数:用来向文本文件读写字符数据的函数(如fgetc,fgets,fputc,fputs,fscanf,fprintf等)</p><p>​    二进制读写函数:用来向二进制文件读写二进制数据的函数(如getw,putw,fread,fwrite等)</p></li></ul><hr><h2 id="随机读写数据文件"><a href="#随机读写数据文件" class="headerlink" title="随机读写数据文件"></a>随机读写数据文件</h2><h3 id="文件位置标记及其定位"><a href="#文件位置标记及其定位" class="headerlink" title="文件位置标记及其定位"></a>文件位置标记及其定位</h3><h4 id="文件位置标记"><a href="#文件位置标记" class="headerlink" title="文件位置标记"></a>文件位置标记</h4><p>文件位置标记用来指示”接下来要读写的下一个字符的位置”</p><h4 id="文件位置标记的定位"><a href="#文件位置标记的定位" class="headerlink" title="文件位置标记的定位"></a>文件位置标记的定位</h4><p>:one: 用rewind函数使文件位置标记指向开头.同时feof函数的值会回复为0(假).</p><h5 id="有一个磁盘文件-内有一些信息-要求第1次将它的内容显示在屏幕上-第2次把它复制到另一文件上"><a href="#有一个磁盘文件-内有一些信息-要求第1次将它的内容显示在屏幕上-第2次把它复制到另一文件上" class="headerlink" title="有一个磁盘文件,内有一些信息.要求第1次将它的内容显示在屏幕上,第2次把它复制到另一文件上."></a>有一个磁盘文件,内有一些信息.要求第1次将它的内容显示在屏幕上,第2次把它复制到另一文件上.</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    FILE *fp1, *fp2;</span><br><span class="line">    <span class="keyword">char</span> ch;</span><br><span class="line">    fp1 = fopen(<span class="string">"file1.dat"</span>, <span class="string">"r"</span>); <span class="comment">//不含路径默认在源文件所在目录</span></span><br><span class="line">    fp2 = fopen(<span class="string">"file2.dat"</span>, <span class="string">"w"</span>);</span><br><span class="line">    ch = getc(fp1);</span><br><span class="line">    <span class="keyword">while</span> (!feof(fp1)) <span class="comment">//或者 while(ch!=EOF)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">putchar</span>(ch);</span><br><span class="line">        ch = getc(fp1);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="number">10</span>);</span><br><span class="line">    rewind(fp1);</span><br><span class="line">    ch = getc(fp1);</span><br><span class="line">    <span class="keyword">while</span> (!feof(fp1))</span><br><span class="line">    &#123;</span><br><span class="line">        fputc(ch, fp2);</span><br><span class="line">        ch = getc(fp1);</span><br><span class="line">    &#125;</span><br><span class="line">    fclose(fp1);</span><br><span class="line">    fclose(fp2);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>:two:用fseek函数改变文件位置标记</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fseek(文件类型指针,位移量,起始点);</span><br></pre></td></tr></table></figure><p><strong>起始点:</strong></p><div class="table-container"><table><thead><tr><th>起始点</th><th>名字</th><th>用数字代表</th></tr></thead><tbody><tr><td>文件开始位置</td><td>SEEK_SET</td><td>0</td></tr><tr><td>文件当前位置</td><td>SEEK_CUR</td><td>1</td></tr><tr><td>文件末尾位置</td><td>SEEK_END</td><td>2</td></tr></tbody></table></div><p>位移量:以”起始点”为基点,应是long型数据(在数字的末尾加一个字母L,就表示是long型);</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fseek(fp,<span class="number">100L</span>,<span class="number">0</span>);<span class="comment">//将文件位置标记先前移到离文件开头100个字节处.</span></span><br></pre></td></tr></table></figure><p>:three:用ftell函数测定文件位置标记的当前位置.</p><p>函数得到流式文件中文件位置标记的当前位置.调用函数时出错(如不存在fp指向的文件),返回值为-1L.</p><h4 id="随机读写"><a href="#随机读写" class="headerlink" title="随机读写"></a>随机读写</h4><h5 id="在磁盘文件上存有10个学生的数据-要求将第1-3-5-7-9个学生数据输入计算机-并在屏幕上显示出来"><a href="#在磁盘文件上存有10个学生的数据-要求将第1-3-5-7-9个学生数据输入计算机-并在屏幕上显示出来" class="headerlink" title="在磁盘文件上存有10个学生的数据.要求将第1,3,5,7,9个学生数据输入计算机,并在屏幕上显示出来."></a>在磁盘文件上存有10个学生的数据.要求将第1,3,5,7,9个学生数据输入计算机,并在屏幕上显示出来.</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student_type</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">int</span> num;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">char</span> addr[<span class="number">15</span>];</span><br><span class="line">&#125; stu[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    FILE *fp;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">if</span> ((fp = fopen(<span class="string">"D:\\CC\\string.dat"</span>, <span class="string">"wb"</span>)) == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"can't open file!\n"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i += <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        fseek(fp, i * <span class="keyword">sizeof</span>(struct Student_type), <span class="number">0</span>);</span><br><span class="line">        fread(&amp;stu[i], <span class="keyword">sizeof</span>(struct Student_type), <span class="number">1</span>, fp);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%-10s %4d %4d %-15s\n"</span>, stu[i].name, stu[i].num, stu[i].age, stu[i].addr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fclose(fp);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="文件读写的出错检测"><a href="#文件读写的出错检测" class="headerlink" title="文件读写的出错检测"></a>文件读写的出错检测</h2><p>检查输入输出函数调用时可能出现的错误.</p><p><strong>ferror函数</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ferror(fp);</span><br></pre></td></tr></table></figure><p>如果返回值为0,表示未出现错误.</p><p>如果返回一个非零值,表示出错.</p><blockquote><p>对同一个文件每一次调用输入输出函数,都会产生一个新的ferror函数值.因此在调用一个输入输出函数后立即检查ferror的值,否则信息会丢失.</p><p>在执行fopen函数时,ferror函数的初始值自动置为0.</p></blockquote><p><strong>clearerr函数</strong></p><p>使文件出错标记和文件结束标记置为0.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;对文件的输入输出&quot;&gt;&lt;a href=&quot;#对文件的输入输出&quot; class=&quot;headerlink&quot; title=&quot;对文件的输入输出&quot;&gt;&lt;/a&gt;对文件的输入输出&lt;/h1&gt;&lt;h2 id=&quot;文件&quot;&gt;&lt;a href=&quot;#文件&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
    
    
      <category term="C" scheme="https://kayleh.top/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>users create data types themselves</title>
    <link href="https://kayleh.top/users-create-data-types-themselves/"/>
    <id>https://kayleh.top/users-create-data-types-themselves/</id>
    <published>2020-10-25T17:18:07.000Z</published>
    <updated>2020-11-02T09:06:07.542Z</updated>
    
    <content type="html"><![CDATA[<h1 id="用户自己建立数据类型"><a href="#用户自己建立数据类型" class="headerlink" title="用户自己建立数据类型"></a>用户自己建立数据类型</h1><h3 id="定义和使用结构体变量"><a href="#定义和使用结构体变量" class="headerlink" title="定义和使用结构体变量"></a>定义和使用结构体变量</h3><p>由不同类型数据组成的组合型的数据结构，它称为<strong>结构体</strong>.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        <span class="keyword">int</span> num;</span><br><span class="line">        <span class="keyword">char</span> name[<span class="number">20</span>];</span><br><span class="line">        <span class="keyword">char</span> sex;</span><br><span class="line">        <span class="keyword">int</span> age;</span><br><span class="line">        <span class="keyword">float</span> score;</span><br><span class="line">        <span class="keyword">char</span> addr[<span class="number">30</span>];</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure><p>声明结构体类型的一般形式</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> 结构体名</span></span><br><span class="line"><span class="class">&#123;</span>成员表列&#125;;</span><br><span class="line"></span><br><span class="line">结构体成员:</span><br><span class="line">类型名 成员名;</span><br></pre></td></tr></table></figure><p>成员可以属于另一个结构体类型</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Date</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> month;</span><br><span class="line">    <span class="keyword">int</span> day;</span><br><span class="line">    <span class="keyword">int</span> year;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Date</span> <span class="title">birthday</span>;</span> <span class="comment">//成员birthday属于struct Date类型</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="定义结构体类型变量"><a href="#定义结构体类型变量" class="headerlink" title="定义结构体类型变量"></a>定义结构体类型变量</h3><h4 id="先声明结构体类型-再定义该类型的变量"><a href="#先声明结构体类型-再定义该类型的变量" class="headerlink" title="先声明结构体类型,再定义该类型的变量."></a>先声明结构体类型,再定义该类型的变量.</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span> <span class="title">student1</span>,<span class="title">student2</span>;</span></span><br></pre></td></tr></table></figure><h4 id="在声明类型的同时定义变量"><a href="#在声明类型的同时定义变量" class="headerlink" title="在声明类型的同时定义变量"></a>在声明类型的同时定义变量</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> num;</span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">20</span>];</span><br><span class="line">    <span class="keyword">char</span> sex;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">float</span> score;</span><br><span class="line">    <span class="keyword">char</span> addr[<span class="number">30</span>];</span><br><span class="line">&#125; student1, student2;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> 结构体名</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    成员表列</span><br><span class="line">&#125;变量名表列;</span><br></pre></td></tr></table></figure><h4 id="不指定类型名而直接定义结构体类型变量"><a href="#不指定类型名而直接定义结构体类型变量" class="headerlink" title="不指定类型名而直接定义结构体类型变量"></a>不指定类型名而直接定义结构体类型变量</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    成员表列</span><br><span class="line">&#125;变量名表列;</span><br></pre></td></tr></table></figure><p>没有名字.显然不能再以此结构类型去定义其他变量.</p><blockquote><ul><li>对类型是不分配空间的,只对变量分配空间</li><li>结构体类型中的成员名可以与程序中的变量名相同,但二者不代表同一对象</li></ul></blockquote><h3 id="结构体变量的初始化和引用"><a href="#结构体变量的初始化和引用" class="headerlink" title="结构体变量的初始化和引用"></a>结构体变量的初始化和引用</h3><h5 id="把一个学生的信息-包括学号-姓名等-放在一个结构体变量中-然后输出这个学生的信息"><a href="#把一个学生的信息-包括学号-姓名等-放在一个结构体变量中-然后输出这个学生的信息" class="headerlink" title="把一个学生的信息(包括学号,姓名等)放在一个结构体变量中,然后输出这个学生的信息."></a>把一个学生的信息(包括学号,姓名等)放在一个结构体变量中,然后输出这个学生的信息.</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> num;</span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">20</span>];</span><br><span class="line">    <span class="keyword">char</span> sex;</span><br><span class="line">    <span class="keyword">char</span> addr[<span class="number">30</span>];</span><br><span class="line">&#125; a = &#123;<span class="number">10101</span>, <span class="string">"Li Lin"</span>, <span class="string">'M'</span>, <span class="string">"123 Beijing Road"</span>&#125;;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"No.:%ld\nname:%s\nsex:%c\naddress:%s\n"</span>, a.num, a.name, a.sex, a.addr);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure><blockquote><p>C99标准允许对某一成员b.name.其他未被指定初始化的数值型成员被系统初始化为0.字符型成员被系统初始化为’\0’,指针型成员被系统初始化为NULL</p></blockquote><p>引用结构体变量中成员的值,引用方式为</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">结构体变量名.成员名</span><br></pre></td></tr></table></figure><p><code>.</code>是成员运算符,在所有的运算符中优先级最高.</p><ul><li><p>可以对变量的成员赋值.</p></li><li><p>同类的结构体变量可以互相赋值</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">student1=student2;</span><br></pre></td></tr></table></figure></li></ul><h5 id="输入两个学生的学号-姓名和成绩较高的学生的学号-姓名和成绩"><a href="#输入两个学生的学号-姓名和成绩较高的学生的学号-姓名和成绩" class="headerlink" title="输入两个学生的学号,姓名和成绩较高的学生的学号,姓名和成绩."></a>输入两个学生的学号,姓名和成绩较高的学生的学号,姓名和成绩.</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Student</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        <span class="keyword">int</span> num;</span><br><span class="line">        <span class="keyword">char</span> name[<span class="number">20</span>];</span><br><span class="line">        <span class="keyword">float</span> score;</span><br><span class="line">    &#125; student1, student2;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"please enter student1 num,name,score:\n"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%s%f"</span>, &amp;student1.num, student1.name, &amp;student1.score);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"please enter student2 num,name,score:\n"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%s%f"</span>, &amp;student2.num, student2.name, &amp;student2.score);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (student1.score &gt; student2.score)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"No.:%ld\nname:%s\nscore:%c\n"</span>, student1.num, student1.name, student1.score);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (student1.score &lt; student2.score)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"No.:%ld\nname:%s\nscore:%c\n"</span>, student2.num, student2.name, student2.score);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"No.:%ld\nname:%s\nscore:%c\n"</span>, student1.num, student1.name, student1.score);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"No.:%ld\nname:%s\nscore:%c\n"</span>, student2.num, student2.name, student2.score);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用结构体数组"><a href="#使用结构体数组" class="headerlink" title="使用结构体数组"></a>使用结构体数组</h2><h4 id="定义结构体数组"><a href="#定义结构体数组" class="headerlink" title="定义结构体数组"></a>定义结构体数组</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">20</span>];</span><br><span class="line">    <span class="keyword">int</span> count;</span><br><span class="line">&#125; leader[<span class="number">3</span>] = &#123;<span class="string">"Li"</span>, <span class="number">0</span>, <span class="string">"Zhang"</span>, <span class="number">0</span>, <span class="string">"Sun"</span>, <span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">char</span> leader_name[<span class="number">20</span>];</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>, leader_name);</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++)</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">strcmp</span>(leader_name, leader[j].name) == <span class="number">0</span>)</span><br><span class="line">                leader[j].count++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\nResult:\n"</span>);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%5s:%d\n"</span>, leader[i].name, leader[i].count);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="定义结构体数组一般形式"><a href="#定义结构体数组一般形式" class="headerlink" title="定义结构体数组一般形式"></a>定义结构体数组一般形式</h4><p>①</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> 结构体名</span></span><br><span class="line"><span class="class">&#123;</span>成员表列&#125; 数组名[数组长度];</span><br></pre></td></tr></table></figure><p>②先声明一个结构体类型(如struct Person),然后再用此类型定义结构体数组</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">结构体类型 数组名[数组长度]</span><br><span class="line">如:</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Person</span> <span class="title">leader</span>;</span></span><br></pre></td></tr></table></figure><p>对结构体数组初始化的形式是在定义数组的后面加上</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">=&#123;初值表列&#125;;</span><br></pre></td></tr></table></figure><p>如:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Person</span>  <span class="title">leader</span>[3] = &#123;</span><span class="string">"Li"</span>, <span class="number">0</span>, <span class="string">"Zhang"</span>, <span class="number">0</span>, <span class="string">"Sun"</span>, <span class="number">0</span>&#125;;</span><br></pre></td></tr></table></figure><h5 id="有n个学生的信息-包括学号-姓名-成绩-要求按照成绩的高低顺序输出各学生的信息"><a href="#有n个学生的信息-包括学号-姓名-成绩-要求按照成绩的高低顺序输出各学生的信息" class="headerlink" title="有n个学生的信息(包括学号,姓名,成绩),要求按照成绩的高低顺序输出各学生的信息."></a>有n个学生的信息(包括学号,姓名,成绩),要求按照成绩的高低顺序输出各学生的信息.</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> num;</span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">20</span>];</span><br><span class="line">    <span class="keyword">float</span> score;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 有n个学生的信息(包括学号,姓名,成绩),要求按照成绩的高低顺序输出各学生的信息.</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Student</span> <span class="title">stu</span>[5] = &#123;</span>&#123;<span class="number">10101</span>, <span class="string">"Zhang"</span>, <span class="number">78</span>&#125;, &#123;<span class="number">10103</span>, <span class="string">"Wang"</span>, <span class="number">98.5</span>&#125;, &#123;<span class="number">10106</span>, <span class="string">"Li"</span>, <span class="number">86</span>&#125;, &#123;<span class="number">10108</span>, <span class="string">"Ling"</span>, <span class="number">73.5</span>&#125;, &#123;<span class="number">10110</span>, <span class="string">"Sun"</span>, <span class="number">100</span>&#125;&#125;;</span><br><span class="line">    <span class="keyword">int</span> i, j, k;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Student</span> <span class="title">temp</span>;</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> n = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        k = i;</span><br><span class="line">        <span class="keyword">for</span> (j = i + <span class="number">1</span>; j &lt; n; j++)</span><br><span class="line">            <span class="keyword">if</span> (stu[j].score &gt; stu[k].score)</span><br><span class="line">                k = j;</span><br><span class="line">        temp = stu[k];</span><br><span class="line">        stu[k] = stu[i];</span><br><span class="line">        stu[i] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%6d%8s%6.2f\n"</span>, stu[i].num, stu[i].name, stu[i].score);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="结构体指针"><a href="#结构体指针" class="headerlink" title="结构体指针"></a>结构体指针</h2><h3 id="指向结构体变量的指针"><a href="#指向结构体变量的指针" class="headerlink" title="指向结构体变量的指针"></a>指向结构体变量的指针</h3><p>指向结构体对象的指针变量既可指向结构体变量,也可指向结构体数组中的元素.指针变量的基类型必须与结构体变量的类型相同.如:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span> *<span class="title">pt</span>;</span> <span class="comment">//pt可以指向struct Student类型的变量或数组元素.</span></span><br></pre></td></tr></table></figure><h5 id="通过指向结构体变量的指针变量输出结构体变量中成员的信息"><a href="#通过指向结构体变量的指针变量输出结构体变量中成员的信息" class="headerlink" title="通过指向结构体变量的指针变量输出结构体变量中成员的信息"></a>通过指向结构体变量的指针变量输出结构体变量中成员的信息</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Student</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        <span class="keyword">long</span> num;</span><br><span class="line">        <span class="keyword">char</span> name[<span class="number">20</span>];</span><br><span class="line">        <span class="keyword">char</span> sex;</span><br><span class="line">        <span class="keyword">float</span> score;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Student</span> <span class="title">stu_1</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Student</span> *<span class="title">p</span>;</span></span><br><span class="line">    p = &amp;stu_1;</span><br><span class="line">    stu_1.num = <span class="number">10101</span>;</span><br><span class="line">    <span class="built_in">strcpy</span>(stu_1.name, <span class="string">"Li Lin"</span>); </span><br><span class="line">    <span class="comment">//stu_1.name = "Li Lin"; 非法,表达式必须是可修改的左值,stu_1.name是临时的值</span></span><br><span class="line">    stu_1.sex = <span class="string">'M'</span>;</span><br><span class="line">    stu_1.score = <span class="number">89.5</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"No.:%ld\nname:%s\nsex:%c\nscore:%5.1f\n"</span>, stu_1.num, stu_1.name, stu_1.sex, stu_1.score);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"No.:%ld\nname:%s\nsex:%c\nscore:%5.1f\n"</span>, (*p).num, (*p).name, (*p).sex, (*p).score);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="如果p指向一个结构体变量stu-以下3种用法等价"><a href="#如果p指向一个结构体变量stu-以下3种用法等价" class="headerlink" title="如果p指向一个结构体变量stu,以下3种用法等价."></a>如果p指向一个结构体变量stu,以下3种用法等价.</h4><ul><li>stu.成员名( 如stu.num )</li><li><p>(<em>p).成员名( 如(\</em>p).num )</p></li><li><p>p-&gt;成员名( 如p-&gt;num )</p></li></ul><h3 id="指向结构体数组的指针"><a href="#指向结构体数组的指针" class="headerlink" title="指向结构体数组的指针"></a>指向结构体数组的指针</h3><blockquote><p>可以用指针变量指向结构体数组的元素</p></blockquote><h5 id="有3个同学的信息-放在结构体数组中-要求输出全部同学的信息"><a href="#有3个同学的信息-放在结构体数组中-要求输出全部同学的信息" class="headerlink" title="有3个同学的信息,放在结构体数组中,要求输出全部同学的信息."></a>有3个同学的信息,放在结构体数组中,要求输出全部同学的信息.</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">long</span> num;</span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">20</span>];</span><br><span class="line">    <span class="keyword">char</span> sex;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span> <span class="title">stu</span>[3] = &#123;</span>&#123;<span class="number">10101</span>, <span class="string">"Zhang"</span>, <span class="string">'F'</span>, <span class="number">1</span>&#125;, &#123;<span class="number">10103</span>, <span class="string">"Wang"</span>, <span class="string">'M'</span>, <span class="number">98</span>&#125;, &#123;<span class="number">10106</span>, <span class="string">"Li"</span>, <span class="string">'F'</span>, <span class="number">86</span>&#125;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Student</span> *<span class="title">p</span>;</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"No.    Name               sex   age\n"</span>);</span><br><span class="line">    <span class="keyword">for</span> (p = stu; p &lt; stu + <span class="number">3</span>; p++) <span class="comment">//执行p++后p的值等于stu+1,p指向stu[1]a</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%5d %-20s %2c %4d\n"</span>, p-&gt;num, p-&gt;name, p-&gt;sex, p-&gt;age);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="用结构体变量和结构体变量的指针作函数参数"><a href="#用结构体变量和结构体变量的指针作函数参数" class="headerlink" title="用结构体变量和结构体变量的指针作函数参数"></a>用结构体变量和结构体变量的指针作函数参数</h3><p>将一个结构体变量的值传递给另一个函数，有3种方法：</p><ul><li>用结构体变量的成员作参数.</li><li>用结构体变量作实参</li><li>用指向结构体变量(或数组元素)的指针作实参,将结构体变量(或数组元素)的地址传给形参</li></ul><h5 id="有n个结构体变量-内含学生学号-姓名和3门课程的成绩-要求输出平均成绩最高的学生的成绩-包括学号-姓名-3门课程绩和平均成绩"><a href="#有n个结构体变量-内含学生学号-姓名和3门课程的成绩-要求输出平均成绩最高的学生的成绩-包括学号-姓名-3门课程绩和平均成绩" class="headerlink" title="有n个结构体变量,内含学生学号,姓名和3门课程的成绩.要求输出平均成绩最高的学生的成绩(包括学号,姓名,3门课程绩和平均成绩)."></a>有n个结构体变量,内含学生学号,姓名和3门课程的成绩.要求输出平均成绩最高的学生的成绩(包括学号,姓名,3门课程绩和平均成绩).</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 3</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">long</span> num;</span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">20</span>];</span><br><span class="line">    <span class="keyword">float</span> score[<span class="number">3</span>];</span><br><span class="line">    <span class="keyword">int</span> aver;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 有n个结构体变量,内含学生学号,姓名和3门课程的成绩.要求输出平均成绩最高的学生的成绩(包括学号,姓名,3门课程成绩和平均成绩).</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">input</span><span class="params">(struct Student stu[])</span></span>;</span><br><span class="line">    <span class="function">struct Student <span class="title">max</span><span class="params">(struct Student stu[])</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(struct Student stud)</span></span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Student</span> <span class="title">stu</span>[<span class="title">N</span>], *<span class="title">p</span> = <span class="title">stu</span>;</span></span><br><span class="line">    input(p);</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">max</span>(p));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">input</span><span class="params">(struct Student stu[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"请输出各学生的信息:学号,姓名,3门课成绩:\n"</span>);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %s %f %f %f"</span>, &amp;stu[i].num, stu[i].name, &amp;stu[i].score[<span class="number">0</span>], &amp;stu[i].score[<span class="number">1</span>], &amp;stu[i].score[<span class="number">2</span>]);</span><br><span class="line">        stu[i].aver = (stu[i].score[<span class="number">0</span>], stu[i].score[<span class="number">1</span>], stu[i].score[<span class="number">2</span>]) / <span class="number">3.0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">struct Student <span class="title">max</span><span class="params">(struct Student stu[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, <span class="built_in">max</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (stu[i].aver &gt; stu[<span class="built_in">max</span>].aver)</span><br><span class="line">            <span class="built_in">max</span> = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> stu[<span class="built_in">max</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(struct Student stud)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n成绩最高的学生是:\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"学生:%d\n姓名:%s\n三门课成绩:%5.1f,%5.1f,%5.1f\n平均成绩:%6.2f\n"</span>, stud.num, stud.name, stud.score[<span class="number">0</span>], stud.score[<span class="number">1</span>], stud.score[<span class="number">2</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="用指针处理链表"><a href="#用指针处理链表" class="headerlink" title="用指针处理链表"></a>用指针处理链表</h2><blockquote><p>链表中各元素在内存中的地址可以是不连续的，要找到某一元素，必须先找到上一个元素，根据它提供的下一个元素地址才能找到一个元素.</p></blockquote><h4 id="建立简单的静态链表"><a href="#建立简单的静态链表" class="headerlink" title="建立简单的静态链表"></a>建立简单的静态链表</h4><h5 id="由3个学生数据组成的结点组成，要求输出各结点的数据"><a href="#由3个学生数据组成的结点组成，要求输出各结点的数据" class="headerlink" title="由3个学生数据组成的结点组成，要求输出各结点的数据."></a>由3个学生数据组成的结点组成，要求输出各结点的数据.</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">long</span> num;</span><br><span class="line">    <span class="keyword">float</span> score;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Student</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Student</span> <span class="title">a</span>, <span class="title">b</span>, <span class="title">c</span>, *<span class="title">head</span>, *<span class="title">p</span>;</span></span><br><span class="line">    a.num = <span class="number">10101</span>;</span><br><span class="line">    a.score = <span class="number">89.5</span>;</span><br><span class="line">    b.num = <span class="number">10103</span>;</span><br><span class="line">    b.score = <span class="number">90</span>;</span><br><span class="line">    c.num = <span class="number">10107</span>;</span><br><span class="line">    c.score = <span class="number">85</span>;</span><br><span class="line">    head = &amp;a;</span><br><span class="line">    a.next = &amp;b;</span><br><span class="line">    b.next = &amp;c;</span><br><span class="line">    c.next = <span class="literal">NULL</span>;</span><br><span class="line">    p = head;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%ld %5.1f\n"</span>, p-&gt;num, p-&gt;score);</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125; <span class="keyword">while</span> (p != <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="建立动态链表"><a href="#建立动态链表" class="headerlink" title="建立动态链表"></a>建立动态链表</h4><h5 id="写一个函数建立一个有3名学生数据的单向动态链表"><a href="#写一个函数建立一个有3名学生数据的单向动态链表" class="headerlink" title="写一个函数建立一个有3名学生数据的单向动态链表"></a>写一个函数建立一个有3名学生数据的单向动态链表</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LEN sizeof(struct Student)</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">long</span> num;</span><br><span class="line">    <span class="keyword">float</span> score;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Student</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="function">struct Student *<span class="title">create</span><span class="params">(<span class="keyword">void</span>)</span> <span class="comment">//此函数返回一个指向链表头的指针</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Student</span> *<span class="title">head</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Student</span> *<span class="title">p1</span>, *<span class="title">p2</span>;</span></span><br><span class="line">    n = <span class="number">0</span>; <span class="comment">//结点的个数</span></span><br><span class="line">    p1 = p2 = (struct Student *)<span class="built_in">malloc</span>(LEN);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%ld,%f"</span>, &amp;p1-&gt;num, &amp;p1-&gt;score);</span><br><span class="line">    head = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">while</span> (p1-&gt;num != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        n = n + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>)</span><br><span class="line">            head = p1;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            p2-&gt;next = p1;<span class="comment">//将新结点的地址赋给第1个结点的next成员</span></span><br><span class="line">        p2 = p1; <span class="comment">//使p2指向刚才建立的结点。</span></span><br><span class="line">        p1 = (struct Student *)<span class="built_in">malloc</span>(LEN);<span class="comment">//开辟结点并使p1指向它</span></span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%ld,%f"</span>, &amp;p1-&gt;num, &amp;p1-&gt;score);</span><br><span class="line">    &#125;</span><br><span class="line">    p2-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> (head);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Student</span> *<span class="title">pt</span>;</span></span><br><span class="line">    pt = create();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\nnum:%ld\nsocre:%5.1f\n"</span>, pt-&gt;num, pt-&gt;score); <span class="comment">//输入0,0表示结束</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="输出链表"><a href="#输出链表" class="headerlink" title="输出链表"></a>输出链表</h4><h5 id="将链表中各结点的数据依次输出print"><a href="#将链表中各结点的数据依次输出print" class="headerlink" title="将链表中各结点的数据依次输出print"></a>将链表中各结点的数据依次输出print</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(struct Student *head)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Student</span> *<span class="title">p</span>;</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\nNow,These %d records are:\n"</span>, n);</span><br><span class="line">    <span class="keyword">if</span> (head != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"\nnum:%ld\nsocre:%5.1f\n"</span>, p-&gt;num, p-&gt;score);</span><br><span class="line">            p = p-&gt;next;</span><br><span class="line">        &#125; <span class="keyword">while</span> (p != <span class="literal">NULL</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="共用体类型"><a href="#共用体类型" class="headerlink" title="共用体类型"></a>共用体类型</h2><p>定义:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">union</span> 共用体名</span><br><span class="line">&#123;</span><br><span class="line">    成员表列</span><br><span class="line">&#125;变量表列;</span><br></pre></td></tr></table></figure><p>如</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">union</span> Data</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">char</span> ch;</span><br><span class="line">    <span class="keyword">float</span> f;</span><br><span class="line">&#125; a, b, c;</span><br></pre></td></tr></table></figure><p>结构体和共用体的区别:</p><ul><li>结构体变量所占用内存长度是各成员占的内存长度之和.每个成员分别占有其自己的内存单元.</li><li>共用体变量所占的内存长度等于最长的成员的长度.</li></ul><h4 id="引用共用体变量的方式"><a href="#引用共用体变量的方式" class="headerlink" title="引用共用体变量的方式"></a>引用共用体变量的方式</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a.ch;</span><br><span class="line">a.i;</span><br></pre></td></tr></table></figure><h4 id="共用体类型数据的特点"><a href="#共用体类型数据的特点" class="headerlink" title="共用体类型数据的特点"></a>共用体类型数据的特点</h4><ul><li><p>同一内存段可以用来存放几种不同类型的成员,但在每一瞬间时只能存放其中一个成员,而不是同时存放几个.因为在每一瞬时,存储单元只能有唯一的内容,也就是说,在共用体变量中只能存放一个值.</p></li><li><p>可以对共用体变量初始化,但初始化表中只能有一个常量.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">union</span> Data</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> i;</span><br><span class="line">        <span class="keyword">char</span> ch;</span><br><span class="line">        <span class="keyword">float</span> f;</span><br><span class="line">    &#125; a = &#123;<span class="number">1</span>, <span class="string">'a'</span>, <span class="number">1.5</span>&#125;; <span class="comment">//非法，不能初始化3个成员，它们占用同一段存储单元.</span></span><br><span class="line">    <span class="keyword">union</span> Data a = &#123;<span class="number">16</span>&#125;;</span><br><span class="line">    <span class="keyword">union</span> Data a = &#123;.ch=<span class="string">'j'</span>&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>共用体变量中起作用的成员是最后一次被赋值的成员，在对共用体变量中的一个成员赋值，原有变量存储单元中的值就取代。</p></li><li><p>共用体变量的地址和它的各成员的地址都是同一地址。例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&amp;a.i,&amp;a.c,&amp;a.f都是同一值.</span><br></pre></td></tr></table></figure></li><li><p>不能对共用体变量赋值,也不能企图引用变量名来得到一个值.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="number">1</span>;<span class="comment">//非法</span></span><br><span class="line"><span class="keyword">int</span> m=a;<span class="comment">//非法</span></span><br><span class="line">C99允许同类型的共用体变量互相赋值.如:</span><br><span class="line">b=a;<span class="comment">//a和b是同一类型的共同体变量</span></span><br></pre></td></tr></table></figure></li><li><p>C99允许用共同体变量作函数参数.</p></li><li><p>共同体类型可以出现在结构体类型定义中,也可以定义共用体数组.</p><p>结构体也可以出现在共用体类型定义中,数组也可以作为共用体的成员</p></li></ul><h5 id="有若干个人员的数据-其中有学生和教师-学生的数据中包括-姓名-号码-性别-职业-班级-教师的数据包括-姓名-号码-性别-职业-职务-要求用同一个表格来处理"><a href="#有若干个人员的数据-其中有学生和教师-学生的数据中包括-姓名-号码-性别-职业-班级-教师的数据包括-姓名-号码-性别-职业-职务-要求用同一个表格来处理" class="headerlink" title="有若干个人员的数据,其中有学生和教师.学生的数据中包括:姓名,号码,性别,职业,班级.教师的数据包括:姓名,号码,性别,职业,职务.要求用同一个表格来处理."></a>有若干个人员的数据,其中有学生和教师.学生的数据中包括:姓名,号码,性别,职业,班级.教师的数据包括:姓名,号码,性别,职业,职务.要求用同一个表格来处理.</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> num;</span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">char</span> sex;</span><br><span class="line">    <span class="keyword">char</span> job;</span><br><span class="line">    <span class="keyword">union</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> clas;          <span class="comment">//班级</span></span><br><span class="line">        <span class="keyword">char</span> <span class="built_in">position</span>[<span class="number">10</span>]; <span class="comment">//职务</span></span><br><span class="line">    &#125; category;            <span class="comment">//共用体变量</span></span><br><span class="line">&#125; person[<span class="number">2</span>];               <span class="comment">//结构体数组</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"please enter the data of person:\n"</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %s %c %c"</span>, &amp;person[i].num, &amp;person[i].name, &amp;person[i].sex, &amp;person[i].job);</span><br><span class="line">        <span class="keyword">if</span> (person[i].job == <span class="string">'s'</span>)</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;person[i].category.clas); <span class="comment">//如是学生输入班级</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (person[i].job == <span class="string">'t'</span>)</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;person[i].category.<span class="built_in">position</span>); <span class="comment">//如是老师输入职务</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"Input error!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"No.     name        sex     job class/position\n"</span>);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (person[i].job == <span class="string">'s'</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%-6d%-10s%-4c%-4c%-10d\n"</span>, person[i].num, person[i].name, person[i].sex, person[i].job, person[i].category.clas);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%-6d%-10s%-4c%-4c%-10d\n"</span>, person[i].num, person[i].name, person[i].sex, person[i].job, person[i].category.<span class="built_in">position</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="使用枚举类型"><a href="#使用枚举类型" class="headerlink" title="使用枚举类型"></a>使用枚举类型</h2><p>如果一个变量只有几种可能的值,则可以定义为<strong>枚举(enumeration)类型</strong>,所谓”枚举”就是把可能的值一一列举出来,变量的值只限于列举出来的值的范围内.</p><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>如:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> Weekday</span><br><span class="line">&#123;</span><br><span class="line">    sun,</span><br><span class="line">    mon,</span><br><span class="line">    tue,</span><br><span class="line">    wed,</span><br><span class="line">    thu,</span><br><span class="line">    fri,</span><br><span class="line">    sat</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>用此类型来定义变量</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> Weekday workday, weekend;</span><br></pre></td></tr></table></figure><p>workday, weekend被定义为<strong>枚举变量</strong>，花括号中的 sun,mon,tue,wed,thu,fri,sat称为<strong>枚举元素</strong>或<strong>枚举常量</strong>。</p><p>声明枚举类型的一般形式为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> [枚举名]&#123;枚举元素列表&#125;;</span><br></pre></td></tr></table></figure><h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><ul><li><p>C编译器对枚举类型的枚举元素按常量处理</p></li><li><p>每个枚举元素都代表一个整数,按定义时的顺序,默认为0,1,2,3….</p><p>也可以人为地指定枚举元素的数值</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> Weekday</span><br><span class="line">    &#123;</span><br><span class="line">        sun=<span class="number">7</span>,</span><br><span class="line">        mon=<span class="number">1</span>,</span><br><span class="line">        tue,</span><br><span class="line">        wed,</span><br><span class="line">        thu,</span><br><span class="line">        fri,</span><br><span class="line">        sat</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure><p>以后的顺序加1,sat为6.</p></li><li><p>枚举元素可以用来作判断比较.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(workday==mon)...</span><br></pre></td></tr></table></figure></li></ul><h5 id="口袋中有红-黄-蓝-白-黑5种颜色的球若干个-每次从口袋中先后取出3个球-问得到3种不同颜色的球的可能取法-输出每种排列的情况"><a href="#口袋中有红-黄-蓝-白-黑5种颜色的球若干个-每次从口袋中先后取出3个球-问得到3种不同颜色的球的可能取法-输出每种排列的情况" class="headerlink" title="口袋中有红,黄,蓝,白,黑5种颜色的球若干个.每次从口袋中先后取出3个球,问得到3种不同颜色的球的可能取法,输出每种排列的情况."></a>口袋中有红,黄,蓝,白,黑5种颜色的球若干个.每次从口袋中先后取出3个球,问得到3种不同颜色的球的可能取法,输出每种排列的情况.</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 口袋中有红,黄,蓝,白,黑5种颜色的球若干个.每次从口袋中先后取出3个球,问得到3种不同颜色的球的可能取法,输出每种排列的情况.</span></span><br><span class="line">    <span class="keyword">enum</span> Color</span><br><span class="line">    &#123;</span><br><span class="line">        red,</span><br><span class="line">        yellow,</span><br><span class="line">        blue,</span><br><span class="line">        white,</span><br><span class="line">        black</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">enum</span> Color i, j, k, pri;</span><br><span class="line">    <span class="keyword">int</span> n, loop;</span><br><span class="line">    n = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = red; i &lt;= black; i++)     <span class="comment">//第一个球</span></span><br><span class="line">        <span class="keyword">for</span> (j = red; j &lt;= black; j++) <span class="comment">//第二个球</span></span><br><span class="line">            <span class="keyword">if</span> (i != j)</span><br><span class="line">                <span class="keyword">for</span> (k = red; k &lt;= black; k++) <span class="comment">//第三个球</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> ((k != j) &amp;&amp; (k != i))</span><br><span class="line">                    &#123;</span><br><span class="line">                        n++;</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">"%-4d"</span>, n);             <span class="comment">//输出当前是第几个符合条件的组合</span></span><br><span class="line">                        <span class="keyword">for</span> (loop = <span class="number">1</span>; loop &lt;= <span class="number">3</span>; i++) <span class="comment">//先后对3个球分别处理</span></span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="keyword">switch</span> (loop)</span><br><span class="line">                            &#123;</span><br><span class="line">                            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                                pri = i;</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                                pri = j;</span><br><span class="line">                            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                                pri = k;</span><br><span class="line">                            <span class="keyword">default</span>:</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">switch</span> (pri)</span><br><span class="line">                            &#123;</span><br><span class="line">                            <span class="keyword">case</span> red:</span><br><span class="line">                                <span class="built_in">printf</span>(<span class="string">"%-10s"</span>, <span class="string">"red"</span>);</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            <span class="keyword">case</span> yellow:</span><br><span class="line">                                <span class="built_in">printf</span>(<span class="string">"%-10s"</span>, <span class="string">"yellow"</span>);</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            <span class="keyword">case</span> blue:</span><br><span class="line">                                <span class="built_in">printf</span>(<span class="string">"%-10s"</span>, <span class="string">"blue"</span>);</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            <span class="keyword">case</span> white:</span><br><span class="line">                                <span class="built_in">printf</span>(<span class="string">"%-10s"</span>, <span class="string">"white"</span>);</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            <span class="keyword">case</span> black:</span><br><span class="line">                                <span class="built_in">printf</span>(<span class="string">"%-10s"</span>, <span class="string">"black"</span>);</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            <span class="keyword">default</span>:</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\nTotal:%5d\n"</span>, n);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="用typedef声明新类型名"><a href="#用typedef声明新类型名" class="headerlink" title="用typedef声明新类型名"></a>用typedef声明新类型名</h2><p>简单地用一个新的类型名代替原有的类型名。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Integer;</span><br><span class="line">Integer i, j; <span class="comment">//作用与int相同</span></span><br></pre></td></tr></table></figure><p>命名一个简单的类型名代替复杂的类型表示方法</p><ul><li><p>命名一个新的类型名代表结构体类型</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> month;</span><br><span class="line">    <span class="keyword">int</span> day;</span><br><span class="line">    <span class="keyword">int</span> year;</span><br><span class="line">&#125; Date;</span><br><span class="line">  </span><br><span class="line">Date birthday;</span><br><span class="line">Date *p;</span><br></pre></td></tr></table></figure></li><li><p>代表数组类型</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Num[<span class="number">10</span>];</span><br><span class="line">Num a;</span><br></pre></td></tr></table></figure></li><li><p>代表指针类型</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> *<span class="keyword">String</span>;</span><br><span class="line"><span class="keyword">String</span> p, s[<span class="number">10</span>];<span class="comment">//p为字符指针变量,s为字符指针数组</span></span><br></pre></td></tr></table></figure></li><li><p>代表指向函数的指针类型</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">int</span> <span class="params">(*Pointer)</span><span class="params">()</span></span>;</span><br><span class="line">Pointer p1, p2;</span><br></pre></td></tr></table></figure></li></ul><h4 id="typedef和-define表面上有相似之处"><a href="#typedef和-define表面上有相似之处" class="headerlink" title="typedef和#define表面上有相似之处"></a>typedef和#define表面上有相似之处</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Count;</span><br><span class="line">和</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Count int;</span></span><br></pre></td></tr></table></figure><h1 id="define是在预编译时处理的-它只能做简单的字符串替换"><a href="#define是在预编译时处理的-它只能做简单的字符串替换" class="headerlink" title="define是在预编译时处理的.它只能做简单的字符串替换"></a>define是在预编译时处理的.它只能做简单的字符串替换</h1><p>而typedef是在编译阶段处理的,采用如同定义变量的方法那样先生成一个类型名,然后用它去定义变量.</p><blockquote><p>当不同源文件中用到同一类型数据,常用typedef声明一些数据类型.</p></blockquote><p>使用typedef名称有利于程序的通用和移植.有的计算机系统int型数据占用不一样,需要修改:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Integer;</span><br><span class="line">修改为:</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> Integer;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;用户自己建立数据类型&quot;&gt;&lt;a href=&quot;#用户自己建立数据类型&quot; class=&quot;headerlink&quot; title=&quot;用户自己建立数据类型&quot;&gt;&lt;/a&gt;用户自己建立数据类型&lt;/h1&gt;&lt;h3 id=&quot;定义和使用结构体变量&quot;&gt;&lt;a href=&quot;#定义和使用结构体变量&quot;
      
    
    </summary>
    
    
    
      <category term="C" scheme="https://kayleh.top/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Good use of pointers</title>
    <link href="https://kayleh.top/Good-use-of-pointers/"/>
    <id>https://kayleh.top/Good-use-of-pointers/</id>
    <published>2020-10-25T17:18:07.000Z</published>
    <updated>2020-11-02T09:06:47.715Z</updated>
    
    <content type="html"><![CDATA[<h1 id="善于利用指针"><a href="#善于利用指针" class="headerlink" title="善于利用指针"></a>善于利用指针</h1><blockquote><p>Good use of pointers</p></blockquote><h2 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h2><p>如果在程序中定义了一个变量，在对程序进行编译时，系统就会给这个变量分配内存单元。编译系统根据程序中定义的变量类型，分配一定长度的空间。</p><p>每一个字节都有一个编号，就是“地址”。</p><blockquote><p>地址指向该变量单元.地址形象化地称为”指针”,它能找到以它为地址的内存单元.</p></blockquote><p>c语言中的地址包括位置信息(内存编号,或称为纯地址)和它指向的数据的类型信息,或者说它是”带类型的地址”.</p><p>在程序中一般通过变量名来引用变量的值,</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,i);</span><br></pre></td></tr></table></figure><blockquote><p>对变量的访问都是通过地址进行的.</p></blockquote><p>假如有输入语句:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;i);</span><br></pre></td></tr></table></figure><p>在执行时,把键盘输入的值送到地址为2000开始的整型存储单元中.</p><p>如果有语句:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">k=i+j;</span><br></pre></td></tr></table></figure><p>则从2000~2003字节取出i的值(3),再从2004~2007字节取出j的值(6),将它们相加后再将其和(9)送到k所占用的2008~2011字节单元中.这种直接按变量名进行的访问称为”直接访问”</p><p>还可以采用另一种称为“间接访问”的方式，即将变量i的地址存放在另一变量中，然后通过该变量来找到变量i的地址。从而访问i变量。</p><blockquote><p>为了表示将数值3送到变量中，可以有两种表达方式：</p><p>1) 将3直接送到变量i所标识的单元中,例如”i=3;”</p><p>2) 将3送到变量<em>i_pointer</em>所指向的单元(即变量i的存储单元)，例如“<em>i_pointer=3;</em>”,其中<em>*i_pointer</em>表示<em>i_pointer</em>所指向的对象，</p></blockquote><h3 id="指向"><a href="#指向" class="headerlink" title="指向"></a><strong>指向</strong></h3><p>通过<em>i_pointer</em>能知道i的地址，从而找到变量<em>i</em>的内存单元。</p><p><em>i_pointer</em>指向<em>i</em></p><hr><h2 id="指针变量"><a href="#指针变量" class="headerlink" title="指针变量"></a>指针变量</h2><h5 id="通过指针变量访问整型变量"><a href="#通过指针变量访问整型变量" class="headerlink" title="通过指针变量访问整型变量."></a>通过指针变量访问整型变量.</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">100</span>, b = <span class="number">10</span>;    <span class="comment">//定义整型变量a,b,并初始</span></span><br><span class="line">    <span class="keyword">int</span> *point_1, *point_2; <span class="comment">//定义指向整型数据的指针变量point_1,point_2</span></span><br><span class="line">    point_1 = &amp;a;           <span class="comment">//把变量a的地址赋给指针变量point_1</span></span><br><span class="line">    point_2 = &amp;b;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"a=%d,b=%d\n"</span>, a, b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"*point_1=%d,*point_2=%d\n"</span>, *point_1, *point_2);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">-----</span><br><span class="line">a=<span class="number">100</span>,b=<span class="number">10</span></span><br><span class="line">*point_1=<span class="number">100</span>,*point_2=<span class="number">10</span></span><br></pre></td></tr></table></figure><h3 id="怎么定义指针变量"><a href="#怎么定义指针变量" class="headerlink" title="怎么定义指针变量"></a>怎么定义指针变量</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">类型名* 指针变量名</span><br></pre></td></tr></table></figure><p>指针变量是基本数据类型派生出来的类型,它不能离开基本类型而独立存在.</p><hr><h3 id="怎样引用指针变量"><a href="#怎样引用指针变量" class="headerlink" title="怎样引用指针变量"></a>怎样引用指针变量</h3><p>1)给指针变量赋值</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p=&amp;a;</span><br></pre></td></tr></table></figure><blockquote><p>指针变量p的值是变量a的地址,p指向a.</p></blockquote><p>2)引用指针变量指向的变量.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,*p);</span><br></pre></td></tr></table></figure><blockquote><p>以整数形式输出指针变量p所指向的变量的值,即变量a的值.</p></blockquote><p>3)引用指针变量的值</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,p);</span><br></pre></td></tr></table></figure><p>以八进制数形式输出指针变量p的值，如果p指向了a，就是输出了a的地址，&amp;a.</p><h5 id="输入a和b两个整数，按先大后小的顺序输出。"><a href="#输入a和b两个整数，按先大后小的顺序输出。" class="headerlink" title="输入a和b两个整数，按先大后小的顺序输出。"></a>输入a和b两个整数，按先大后小的顺序输出。</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a, b, *point_a, *point_b, *temp;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"please enter two integer number:"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d,%d"</span>, &amp;a, &amp;b);</span><br><span class="line">    point_a = &amp;a;</span><br><span class="line">    point_b = &amp;b;</span><br><span class="line">    <span class="keyword">if</span> (a &lt; b)</span><br><span class="line">    &#123;</span><br><span class="line">        temp = point_b;</span><br><span class="line">        point_b = point_a;</span><br><span class="line">        point_a = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"a=%d,b=%d\n"</span>, a, b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"max=%d,min=%d\n"</span>, *point_a, *point_b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="指针变量作为函数参数"><a href="#指针变量作为函数参数" class="headerlink" title="指针变量作为函数参数"></a>指针变量作为函数参数</h2><h5 id="heavy-check-mark-输入a和b两个整数，按先大后小的顺序输出。"><a href="#heavy-check-mark-输入a和b两个整数，按先大后小的顺序输出。" class="headerlink" title=":heavy_check_mark: 输入a和b两个整数，按先大后小的顺序输出。"></a>:heavy_check_mark: 输入a和b两个整数，按先大后小的顺序输出。</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a, b, *point_a, *point_b;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> *point_a, <span class="keyword">int</span> *point_b)</span></span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"please enter two integer number:"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d,%d"</span>, &amp;a, &amp;b);</span><br><span class="line">    point_a = &amp;a;</span><br><span class="line">    point_b = &amp;b;</span><br><span class="line">    <span class="keyword">if</span> (a &lt; b)</span><br><span class="line">        swap(point_a, point_b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"max=%d,min=%d\n"</span>, *point_a, *point_b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> *point_a, <span class="keyword">int</span> *point_b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp;</span><br><span class="line">    temp = *point_a;</span><br><span class="line">    *point_a = *point_b;</span><br><span class="line">    *point_b = temp;</span><br><span class="line">&#125;</span><br><span class="line">----------------</span><br><span class="line"><span class="comment">//如果写成:</span></span><br><span class="line"> <span class="keyword">int</span> *temp;</span><br><span class="line">    *temp = *point_a;<span class="comment">//此语句有错误,不能向一个未知的存储单元赋值.</span></span><br><span class="line">    point_a = *point_b;</span><br><span class="line">    point_b = *temp;</span><br></pre></td></tr></table></figure><blockquote><p>由于”<strong>单向传递</strong>“的值传递方式，形参值的改变不能使实参的值随之改变.</p><p>为了<strong>使在函数中改变了的变量值能被主调函数main所用</strong>,不能采取把改变值的变量作为参数的办法,</p><p>而应该用<code>指针变量</code>作为函数的参数,<strong>使指针变量所指向的变量值发生变化</strong>,在函数调用结束后,这些变量值的变化<strong>依然保留</strong>了下来.</p><p>——————有关值传递请看：<a href="https://kayleh.top/pass-by-value/">值传递</a>——————————————————————————</p></blockquote><h5 id="x-不可以通过执行调用函数来改变实参指针变量的值-但是可以改变实参指针变量所指变量的值"><a href="#x-不可以通过执行调用函数来改变实参指针变量的值-但是可以改变实参指针变量所指变量的值" class="headerlink" title=":x:不可以通过执行调用函数来改变实参指针变量的值,但是可以改变实参指针变量所指变量的值:"></a>:x:不可以通过执行调用函数来改变实参指针变量的值,但是可以改变实参指针变量所指变量的值:</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> *point_a, <span class="keyword">int</span> *point_b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> *temp;</span><br><span class="line">    temp = point_a;</span><br><span class="line">    point_a = point_b;</span><br><span class="line">    point_b = temp;</span><br><span class="line">&#125;</span><br><span class="line">------</span><br><span class="line">×无法改变</span><br></pre></td></tr></table></figure><hr><h2 id="通过指针引用数组"><a href="#通过指针引用数组" class="headerlink" title="通过指针引用数组"></a>通过指针引用数组</h2><blockquote><p>数组元素的指针就是数组元素的地址</p></blockquote><p>可以用一个指针变量指向一个数组元素.如:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a[<span class="number">10</span>]=&#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">11</span>,<span class="number">13</span>,<span class="number">15</span>,<span class="number">17</span>,<span class="number">19</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> *p;</span><br><span class="line">p=&amp;a[<span class="number">0</span>];</span><br><span class="line"><span class="comment">//也可以写成p=a;</span></span><br><span class="line">指针变量p的值是数组a首元素即a[<span class="number">0</span>]的地址.而不是数组a各元素的值.</span><br></pre></td></tr></table></figure><h4 id="在引用数组元素时指针的运算"><a href="#在引用数组元素时指针的运算" class="headerlink" title="在引用数组元素时指针的运算."></a>在引用数组元素时指针的运算.</h4><blockquote><p>指针变量p指向数组元素a[0],希望用p+1表示指向下一个元素a[1];</p></blockquote><ul><li><p>系统会根据指针变量的基类型来确定增加的字节数.</p><p>如:</p><p>整型类型的指针变量int *p,</p><p>p+1就是位移一个数组元素(int)所占用的字节数也就是4.</p></li><li><p>如果p的初值为&amp;a[0],则p+i和a+i就是数组元素a[i]的地址.</p></li><li><p>*(p+i)或*(a+i)是p+i或a+i就是数组元素,即a[i].</p><p>实际上编译系统在编译时,对数组元素a[i]就是按*(a+i)处理的.即按数组首字母的地址加上相对位移量得到要找的元素的地址,然后找出该单元中的内容.</p></li></ul><blockquote><p>[ ]实际上是变址运算符,即将a[i]按a+i计算地址,然后找出此地址单元中的值.</p></blockquote><p>如果指针变量p1和p2都是指向同一数组元素的长度,如<strong>执行p2-p1,结果是p2-p1的值(两个地址之差)除以数组元素的长度.</strong></p><p>通过用p2-p1就可知道它们所指向元素的相对距离.</p><blockquote><p>两个地址不能相加,如p1+p2是无实际意义的.</p></blockquote><h2 id="通过指针引用数组元素"><a href="#通过指针引用数组元素" class="headerlink" title="通过指针引用数组元素"></a>通过指针引用数组元素</h2><h4 id="引用数组元素有两种方法"><a href="#引用数组元素有两种方法" class="headerlink" title="引用数组元素有两种方法"></a>引用数组元素有两种方法</h4><ul><li><p>下标法(     a[i]     )</p></li><li><p>指针法(     *(a+i)或*(p+i),其中a是数组名,p是指向数组元素的指针变量.其初值为p=a;     )</p></li></ul><h5 id="有一个整型数组a-有10个元素-要求输出数组中的全部元素"><a href="#有一个整型数组a-有10个元素-要求输出数组中的全部元素" class="headerlink" title="有一个整型数组a,有10个元素,要求输出数组中的全部元素."></a>有一个整型数组a,有10个元素,要求输出数组中的全部元素.</h5><p>1)下标法:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, a[<span class="number">10</span>];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"please enter 10 integer numbers:"</span>);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d"</span>, a[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2)通过数组名计算数组元素地址,找出元素的值</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, a[<span class="number">10</span>];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"please enter 10 integer numbers:"</span>);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\t"</span>, *(a + i));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3)用指针变量指向数组元素</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">10</span>], *p;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"please enter 10 integer numbers:"</span>);</span><br><span class="line">    <span class="keyword">for</span> (p = a; p &lt; (a + <span class="number">10</span>); p++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, p);</span><br><span class="line">    <span class="keyword">for</span> (p = a; p &lt; (a + <span class="number">10</span>); p++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\t"</span>, *p);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h6><ul><li><p>第1和2种方法执行效率是相同的.     <code>在编译时,对数组元素a[i]就是按*(a+i)处理的</code></p></li><li><p>第3种方法比第1和2种方法,用指针变量直接指向元素,不必每次都重新计算地址,像p++这样的自加操作是比较快的.这种有规律地改变地址值(p++)能大大提高效率.</p></li></ul><blockquote><p>多次使用指针变量时,应注意指针变量的位置,每次执行后可使指针变量重新指向数组a.</p></blockquote><h3 id="用数组名作函数参数"><a href="#用数组名作函数参数" class="headerlink" title="用数组名作函数参数"></a>用数组名作函数参数</h3><blockquote><p>可以用数组名作函数的参数.</p></blockquote><p>如:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> n)</span></span>;</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">array</span>[<span class="number">10</span>];</span><br><span class="line">    fun(<span class="built_in">array</span>, <span class="number">10</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>C编译时是将形参数组名作为指针变量来处理的.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> n)</span></span></span><br><span class="line">等同于</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> *arr, <span class="keyword">int</span> n)</span></span></span><br></pre></td></tr></table></figure><p>:eight_pointed_black_star:由于形参数组名arr接收了实参数组首元素a[0]的地址.所以用数组名参数时,<strong>形参数组中各元素的值发生变化,实参数组元素的值也会发生变化.</strong></p><h5 id="将数组a中n个整数按相反顺序存放"><a href="#将数组a中n个整数按相反顺序存放" class="headerlink" title="将数组a中n个整数按相反顺序存放."></a>将数组a中n个整数按相反顺序存放.</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">inv</span><span class="params">(<span class="keyword">int</span> [], <span class="keyword">int</span>)</span></span>;</span><br><span class="line">    <span class="keyword">int</span> i, a[<span class="number">10</span>];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"please enter original array:\n"</span>);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]);</span><br><span class="line">    inv(a, <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"The array has been inverted:\n"</span>);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\t"</span>, a[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">inv</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j,temp,m=(n<span class="number">-1</span>)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; m; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">         j = n - <span class="number">1</span> - i;</span><br><span class="line">        temp = arr[j];</span><br><span class="line">        arr[j] = arr[i];</span><br><span class="line">        arr[i] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>指针变量作形参：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">inv</span><span class="params">(<span class="keyword">int</span> [], <span class="keyword">int</span>)</span></span>;</span><br><span class="line">    <span class="keyword">int</span> i, a[<span class="number">10</span>];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"please enter original array:\n"</span>);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]);</span><br><span class="line">    inv(a, <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"The array has been inverted:\n"</span>);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\t"</span>, a[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">inv</span><span class="params">(<span class="keyword">int</span> *arr, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> *p, *i, *j, temp, m = (n - <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">    i = arr;        <span class="comment">//头部的指针位置</span></span><br><span class="line">    j = arr + n - <span class="number">1</span>;<span class="comment">//末尾的指针位置</span></span><br><span class="line">    p = arr + m;    <span class="comment">//中值的指针位置</span></span><br><span class="line">    <span class="keyword">for</span> (; i &lt;= p; ++i, j--)</span><br><span class="line">    &#123;</span><br><span class="line">        temp = *j;</span><br><span class="line">        *j = *i;</span><br><span class="line">        *i = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="归纳分析"><a href="#归纳分析" class="headerlink" title="归纳分析"></a>归纳分析</h4><p>如果有一个实参数组,要想在函数中改变此数组中的元素的值,实参与形参的对应关系有:</p><ul><li><p>形参和实参都用数组名.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">10</span>];</span><br><span class="line">    ...</span><br><span class="line">    f(a, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> x[], <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>实参用数组名,形参用指针变量</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">10</span>];</span><br><span class="line">    ...</span><br><span class="line">    f(a, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> *x, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>实参形参都是用指针变量</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">10</span>],*p=a;</span><br><span class="line">    ...</span><br><span class="line">    f(p, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> *x, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>实参用指针变量,形参用数组名.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">10</span>],*p=a;</span><br><span class="line">    ...</span><br><span class="line">    f(p, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> x[], <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="用指针方法对10个整数按由大到小顺序排序"><a href="#用指针方法对10个整数按由大到小顺序排序" class="headerlink" title="用指针方法对10个整数按由大到小顺序排序"></a>用指针方法对10个整数按由大到小顺序排序</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span> [], <span class="keyword">int</span>)</span></span>;</span><br><span class="line">    <span class="keyword">int</span> i, a[<span class="number">10</span>];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"please enter original array:\n"</span>);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]);</span><br><span class="line">    sort(a, <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"The array has been sorted:\n"</span>);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\t"</span>, a[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j, temp, <span class="built_in">max</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len - <span class="number">1</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">max</span> = i;</span><br><span class="line">        <span class="keyword">for</span> (j = i + <span class="number">1</span>; j &lt; len; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[j] &gt; arr[<span class="built_in">max</span>])</span><br><span class="line">                <span class="built_in">max</span> = j;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">max</span> != i)</span><br><span class="line">            &#123;</span><br><span class="line">                temp = arr[i];</span><br><span class="line">                arr[i] = arr[<span class="built_in">max</span>];</span><br><span class="line">                arr[<span class="built_in">max</span>] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="通过指针指向多维数组"><a href="#通过指针指向多维数组" class="headerlink" title="通过指针指向多维数组"></a>通过指针指向多维数组</h2><h4 id="多维数组的地址"><a href="#多维数组的地址" class="headerlink" title="多维数组的地址"></a>多维数组的地址</h4><p>a[0]表示一维数组a[0]第0列元素的地址，即&amp;a[0][0].</p><p>a[0]+1表示a数组0行1列. </p><p>a[0]与<em>(a+0)等价，a[1]和\</em>(a+1)等价，</p><blockquote><p>a[i]和*(a+i)等价</p></blockquote><ul><li>如果a是一维数组名，则a[i]表示a数组序号为i的元素的存储单元。</li><li>但如果a是二维数组，则a[i]是一维数组名，它只是一个地址，并不代表一个存储单元，也不代表存储单元的值(如同一维数组名只是一个指针变量一样)</li></ul><blockquote><ul><li>二维数组(如a)是指向行(一维数组)的。因此a+1的“1”代表一行中全部元素所占的字节数。a[0]+1中的1代表一个a元素所占的字节数。</li></ul><p><strong>在指向行的指针前面加一个*，就转换为列的指针。</strong></p><p><strong>反之，在列指针前面加一个&amp;，就转换为行的指针</strong></p><ul><li>一维数组名(如a[0],a[1])是指向列元素的。</li></ul></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">3</span>][<span class="number">4</span>] = &#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">15</span>, <span class="number">17</span>, <span class="number">19</span>, <span class="number">21</span>, <span class="number">23</span>&#125;;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d,%d\n"</span>, a, *a);           <span class="comment">//0行的初始地址,0行0列的元素地址</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d,%d\n"</span>, a[<span class="number">0</span>], *(a + <span class="number">0</span>));  <span class="comment">//0行0列的元素地址</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d,%d\n"</span>, &amp;a[<span class="number">0</span>], &amp;a[<span class="number">0</span>][<span class="number">0</span>]); <span class="comment">//0行起始地址,0行0列的元素地址</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d,%d\n"</span>, a[<span class="number">1</span>], a + <span class="number">1</span>);     <span class="comment">//1行0列的元素地址,1行起始地址</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d,%d\n"</span>, &amp;a[<span class="number">1</span>][<span class="number">0</span>], *(a + <span class="number">1</span>) + <span class="number">0</span>);<span class="comment">//1行0列的元素地址</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d,%d\n"</span>, a[<span class="number">2</span>], *(a + <span class="number">2</span>));  <span class="comment">//2行0列的元素地址</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d,%d\n"</span>, &amp;a[<span class="number">2</span>], a + <span class="number">2</span>);    <span class="comment">//2行的起始地址</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d,%d\n"</span>, a[<span class="number">1</span>][<span class="number">0</span>], *(*(a + <span class="number">1</span>) + <span class="number">0</span>));<span class="comment">//1行0列的元素的值</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d,%d\n"</span>, *a[<span class="number">2</span>], *(*(a + <span class="number">2</span>) + <span class="number">0</span>));<span class="comment">//2行0列的元素的值</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="指向多维数组的指针变量"><a href="#指向多维数组的指针变量" class="headerlink" title="指向多维数组的指针变量"></a>指向多维数组的指针变量</h3><h4 id="指向数组元素的指针变量"><a href="#指向数组元素的指针变量" class="headerlink" title="指向数组元素的指针变量"></a>指向数组元素的指针变量</h4><h5 id="有一个3×4的二维数组，要求用指向元素的指针变量输出二维数组各元素的值"><a href="#有一个3×4的二维数组，要求用指向元素的指针变量输出二维数组各元素的值" class="headerlink" title="有一个3×4的二维数组，要求用指向元素的指针变量输出二维数组各元素的值"></a>有一个3×4的二维数组，要求用指向元素的指针变量输出二维数组各元素的值</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">3</span>][<span class="number">4</span>] = &#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">15</span>, <span class="number">17</span>, <span class="number">19</span>, <span class="number">21</span>, <span class="number">23</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> *p;</span><br><span class="line">    <span class="keyword">for</span> (p = a[<span class="number">0</span>]; p &lt; a[<span class="number">0</span>] + <span class="number">12</span>; ++p)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> ((p - a[<span class="number">0</span>]) % <span class="number">4</span> == <span class="number">0</span>)<span class="comment">//p移动四次后换行</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\t"</span>, *p);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>计算a[i][j]在数组中的相对位置：</p><p>i*m+j(m为二维数组的列数，二维数组大小为n×m)</p><p>如：</p><p>在一个3×4的二维数组中，a[2][3]对a[0][0]的相对位移量为2*4+3=11元素；</p><p>如果一个元素占4个字节，则a[2][3]对a[0][0]的地址差为11*4=44字节。</p><p>若开始时指针变量p指向a[0][0],a[i][j]的地址为”<code>&amp;a[0]\[0]+(i*m+j)</code>或<code>p+(i*m+j)</code>“.</p></li></ul><h4 id="指向由m个元素组成的一维数组的指针变量"><a href="#指向由m个元素组成的一维数组的指针变量" class="headerlink" title="指向由m个元素组成的一维数组的指针变量"></a>指向由m个元素组成的一维数组的指针变量</h4><h5 id="输出二维数组任一行任一列元素的值"><a href="#输出二维数组任一行任一列元素的值" class="headerlink" title="输出二维数组任一行任一列元素的值"></a>输出二维数组任一行任一列元素的值</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">3</span>][<span class="number">4</span>] = &#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>,</span><br><span class="line">                   <span class="number">9</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">15</span>,</span><br><span class="line">                   <span class="number">17</span>, <span class="number">19</span>, <span class="number">21</span>, <span class="number">23</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> (*p)[<span class="number">4</span>], i, j;</span><br><span class="line">    p = a;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"please enter row and colum:"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d,%d"</span>, &amp;i, &amp;j);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"a[%d,%d]=%d\n"</span>, i, j, *(*(p + i) + j));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>int (*p)[4]</code>表示定义p为一个指针变量，它指向包含4个整型元素的一维数组.</p><p>p的值是该一维数组的起始地址.虽然这个地址(指纯地址)与该一维数组首元素的地址相同,但它们的基类型不同.</p><h5 id="分析下列程序"><a href="#分析下列程序" class="headerlink" title="分析下列程序"></a>分析下列程序</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">4</span>] = &#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> (*p)[<span class="number">4</span>];</span><br><span class="line">    p = &amp;a;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, (*p)[<span class="number">3</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意,<code>p = &amp;a;</code>不应写成<code>p = a;</code></p><p>因为这样写表示p的值是&amp;a[0],指向首元素a[0].</p><p><code>p = &amp;a;</code>表示p指向一维数组(行)，(*p)[3]是p指向的行中序号为3的元素.</p><blockquote><p>要注意指针变量的类型,从<code>int (*p)[4];</code>可以看到,p的类型不是<code>int *</code>型,而是<code>int(*)[4]</code>.</p><p>p被定义为指向一维整型数组的指针变量,一维数组有4个元素,因此p的基类型是一维数组,其长度是16字节.</p></blockquote><h3 id="用指向数组的指针作函数参数"><a href="#用指向数组的指针作函数参数" class="headerlink" title="用指向数组的指针作函数参数"></a>用指向数组的指针作函数参数</h3><p>可以有两种方法:</p><ul><li>用指向变量的指针变量</li><li>用指向一维数组的指针变量</li></ul><h5 id="有一个班-3个学生-各学4门课-计算总平均分数以及第n个学生的成绩"><a href="#有一个班-3个学生-各学4门课-计算总平均分数以及第n个学生的成绩" class="headerlink" title="有一个班,3个学生,各学4门课,计算总平均分数以及第n个学生的成绩."></a>有一个班,3个学生,各学4门课,计算总平均分数以及第n个学生的成绩.</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">average</span><span class="params">(<span class="keyword">float</span> *, <span class="keyword">int</span>)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">search</span><span class="params">(<span class="keyword">float</span> (*p)[<span class="number">4</span>], <span class="keyword">int</span>)</span></span>;</span><br><span class="line">    <span class="keyword">float</span> score[<span class="number">3</span>][<span class="number">4</span>] = &#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>,</span><br><span class="line">                         <span class="number">9</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">15</span>,</span><br><span class="line">                         <span class="number">17</span>, <span class="number">19</span>, <span class="number">21</span>, <span class="number">23</span>&#125;;</span><br><span class="line">    average(*score, <span class="number">12</span>);<span class="comment">//*转换为列指针变量</span></span><br><span class="line">    search(score, <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">average</span><span class="params">(<span class="keyword">float</span> *p, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">float</span> *p_end;</span><br><span class="line">    <span class="keyword">float</span> sum = <span class="number">0</span>, aver;</span><br><span class="line">    p_end = p + n - <span class="number">1</span>;<span class="comment">//指向最后一个元素</span></span><br><span class="line">    <span class="keyword">for</span> (; p &lt;= p_end; p++)</span><br><span class="line">        sum += (*p);</span><br><span class="line">    aver = sum / n;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%5.2f\n"</span>, aver);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">search</span><span class="params">(<span class="keyword">float</span> (*p)[<span class="number">4</span>], <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"the score of No.%d are:\n"</span>, n);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%5.2f\n"</span>, *(*(p + n) + i));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="eight-pointed-black-star-实参和形参如果是指针类型，应当注意它们的基类型必须一致"><a href="#eight-pointed-black-star-实参和形参如果是指针类型，应当注意它们的基类型必须一致" class="headerlink" title=":eight_pointed_black_star:实参和形参如果是指针类型，应当注意它们的基类型必须一致."></a>:eight_pointed_black_star:实参和形参如果是指针类型，应当注意它们的基类型必须一致.</h5><p>不应把<em>int型的指针(即数组元素的地址)传给int(\</em>)[4]型(指向一维数组)的指针变量,反之亦然.</p><h5 id="查找有一门以上课程不及格的学生-输出他们全部课程的成绩"><a href="#查找有一门以上课程不及格的学生-输出他们全部课程的成绩" class="headerlink" title="查找有一门以上课程不及格的学生,输出他们全部课程的成绩"></a>查找有一门以上课程不及格的学生,输出他们全部课程的成绩</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//    查找有一门以上课程不及格的学生,输出他们全部课程的成绩</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">search</span><span class="params">(<span class="keyword">float</span> (*p)[<span class="number">4</span>], <span class="keyword">int</span>)</span></span>;</span><br><span class="line">    <span class="keyword">float</span> score[<span class="number">3</span>][<span class="number">4</span>] = &#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>,</span><br><span class="line">                         <span class="number">9</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">15</span>,</span><br><span class="line">                         <span class="number">17</span>, <span class="number">19</span>, <span class="number">21</span>, <span class="number">23</span>&#125;;</span><br><span class="line">    search(score, <span class="number">3</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">search</span><span class="params">(<span class="keyword">float</span> (*p)[<span class="number">4</span>], <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j, flag;</span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; n; ++j)</span><br><span class="line">    &#123;</span><br><span class="line">        flag = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i)</span><br><span class="line">            <span class="keyword">if</span> (*(*(p + j) + i) &lt; <span class="number">60</span>) flag = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (flag == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"No.%d fails,his scores are:\n"</span>, j + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i)</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%5.2f\t"</span>, *(*(p + j) + i));<span class="comment">// score[j][i]</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="通过指针引用字符串"><a href="#通过指针引用字符串" class="headerlink" title="通过指针引用字符串"></a>通过指针引用字符串</h2><h4 id="字符串的引用方法"><a href="#字符串的引用方法" class="headerlink" title="字符串的引用方法"></a>字符串的引用方法</h4><ul><li><p>用字符数组存放一个字符串，可以通过数组名和下标引用字符串中一个字符，也可以通过数组名和格式声明“%s”输出该字符串.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> <span class="built_in">string</span>[] = <span class="string">"I Love China"</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, <span class="built_in">string</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%c\n"</span>, <span class="built_in">string</span>[<span class="number">7</span>]); <span class="comment">// string[7]=*(string+7)</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>用字符指针变量输出一个字符串常量,通过字符指针变量引用字符串常量.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> *<span class="built_in">string</span> = <span class="string">"I Love China!"</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, <span class="built_in">string</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>对字符指针变量string初始化,实际上是把字符串第1个元素的地址(即存放字符串的字符数组的首元素地址)赋给指针变量string,使string指向字符串的第1个字符,由于字符串常量”I Love China!”已由系统分配在内存中连续的14个字节中,因此,string就指向了该字符串的第一个字符.</p></blockquote><p>可以对指针变量再赋值;</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> *<span class="built_in">string</span> = <span class="string">"I Love China!"</span>;</span><br><span class="line"><span class="built_in">string</span> = <span class="string">"I'm a student."</span></span><br></pre></td></tr></table></figure><p>可以通过字符指针变量输出它所指向的字符串</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">"%s\n"</span>, <span class="built_in">string</span>);</span><br></pre></td></tr></table></figure></li></ul><h4 id="用-s能对一个字符串进行整体的输入输出"><a href="#用-s能对一个字符串进行整体的输入输出" class="headerlink" title="用%s能对一个字符串进行整体的输入输出."></a>用<code>%s</code>能对一个字符串进行整体的输入输出.</h4><blockquote><p>字符数组,区别于数值型数组(int[ ] a)</p></blockquote><p><code>%s</code>是输出字符串时所用的格式符.在输出项中给出字符指针变量名string,则系统会输出string所指向的字符串第1个字符,然后自动使string加1,使之指向下一个字符,在输出字符…直到遇到字符串结束标志<code>&#39;\0&#39;</code>为止.</p><p>注意:在内存中,字符串的最后被自动加了一个<code>&#39;\0&#39;</code>.因此在输出时能确定输出的字符到何时结束.</p><h5 id="将字符串a复制为字符串b-然后输出字符串b"><a href="#将字符串a复制为字符串b-然后输出字符串b" class="headerlink" title="将字符串a复制为字符串b,然后输出字符串b"></a>将字符串a复制为字符串b,然后输出字符串b</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> a[] = <span class="string">"I am a student"</span>, b[<span class="number">20</span>];</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; *(a + i) != <span class="string">'\0'</span>; ++i)</span><br><span class="line">        *(b + i) = *(a + i);</span><br><span class="line">    *(b + i) = <span class="string">'\0'</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"string a is:%s\n"</span>, a);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"string b is:\n"</span>);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; *(b + i) != <span class="string">'\0'</span>; ++i)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%c"</span>, b[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用指针变量:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> a[] = <span class="string">"I am a boy"</span>, b[<span class="number">20</span>], *p1, *p2;</span><br><span class="line">    p1 = a;</span><br><span class="line">    p2 = b;</span><br><span class="line">    <span class="keyword">for</span> (; *p1 != <span class="string">'\0'</span>; ++p1, ++p2)</span><br><span class="line">        *p2 = *p1;</span><br><span class="line">    *p2 = <span class="string">'\0'</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"string a is:%s\n"</span>,a);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"string b is:%s\n"</span>,b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="字符指针作函数参数"><a href="#字符指针作函数参数" class="headerlink" title="字符指针作函数参数"></a>字符指针作函数参数</h3><blockquote><p>如果想把一个字符串从一个函数“传递”到另一函数，可以用地址传递的办法，即用字符数组名作参数，也可以用字符指针变量作参数。在被调用的函数中可以改变字符串的内容，在主调函数中可以引用改变后的字符串。</p></blockquote><h5 id="用函数调用实现字符串的复制"><a href="#用函数调用实现字符串的复制" class="headerlink" title="用函数调用实现字符串的复制"></a>用函数调用实现字符串的复制</h5><p>1)用字符数组名作函数参数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">copy_string</span><span class="params">(<span class="keyword">char</span> from[], <span class="keyword">char</span> to[])</span></span>;</span><br><span class="line">    <span class="keyword">char</span> a[] = <span class="string">"I am a teacher."</span>;</span><br><span class="line">    <span class="keyword">char</span> b[] = <span class="string">"You are a student."</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"string a:%s\nstring b:%s\n"</span>, a, b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"copy string a to string b:\n"</span>);</span><br><span class="line">    copy_string(a, b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"string a:%s\nstring b:%s\n"</span>, a, b);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">copy_string</span><span class="params">(<span class="keyword">char</span> from[], <span class="keyword">char</span> to[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">while</span> (from[i] != <span class="string">'\0'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        to[i] = from[i];</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    to[i] = <span class="string">'\0'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>复制后的数组仍存在没有被覆盖的值(<code>t</code>, <code>.</code>,<code>\0</code>);</p><p>用%s格式输出时,遇到第一个<code>\0</code>后面的字符就不会输出了.</p><p>如果用%c逐个字符输出是可以输出后面这些字符的.</p></blockquote><p>2)用字符型指针变量作实参</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">copy_string</span><span class="params">(<span class="keyword">char</span> from[], <span class="keyword">char</span> to[])</span></span>;</span><br><span class="line">    <span class="keyword">char</span> a[] = <span class="string">"I am a teacher."</span>;</span><br><span class="line">    <span class="keyword">char</span> b[] = <span class="string">"You are a student."</span>;</span><br><span class="line">    <span class="keyword">char</span> *from = a;</span><br><span class="line">    <span class="keyword">char</span> *to = b;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"string a:%s\nstring b:%s\n"</span>, a, b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"copy string a to string b:\n"</span>);</span><br><span class="line">    copy_string(from, to);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"string a:%s\nstring b:%s\n"</span>, a, b);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">copy_string</span><span class="params">(<span class="keyword">char</span> from[], <span class="keyword">char</span> to[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">while</span> (from[i] != <span class="string">'\0'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        to[i] = from[i];</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    to[i] = <span class="string">'\0'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3)用字符指针变量作形参和实参</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">copy_string</span><span class="params">(<span class="keyword">char</span> from[], <span class="keyword">char</span> to[])</span></span>;</span><br><span class="line">    <span class="keyword">char</span> *a = <span class="string">"I am a teacher."</span>;</span><br><span class="line">    <span class="keyword">char</span> b[] = <span class="string">"You are a student."</span>;</span><br><span class="line">    <span class="keyword">char</span> *p = b;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"string a:%s\nstring b:%s\n"</span>, a, b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"copy string a to string b:\n"</span>);</span><br><span class="line">    copy_string(a, p);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"string a:%s\nstring b:%s\n"</span>, a, b);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">copy_string</span><span class="params">(<span class="keyword">char</span> *from, <span class="keyword">char</span> *to)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (; *from != <span class="string">'\0'</span>; ++from,++to)</span><br><span class="line">    &#123;</span><br><span class="line">        *to = *from;</span><br><span class="line">    &#125;</span><br><span class="line">    *to = <span class="string">'\0'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//精简</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">copy_string</span><span class="params">(<span class="keyword">char</span> *from, <span class="keyword">char</span> *to)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> ((*to = *from) != <span class="string">'\0'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ++from, ++to;</span><br><span class="line">    &#125;</span><br><span class="line">    *to = <span class="string">'\0'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//再精简</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">copy_string</span><span class="params">(<span class="keyword">char</span> *from, <span class="keyword">char</span> *to)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> ((*to++ = *from++) != <span class="string">'\0'</span>);</span><br><span class="line">    *to = <span class="string">'\0'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">copy_string</span><span class="params">(<span class="keyword">char</span> *from, <span class="keyword">char</span> *to)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (*from != <span class="string">'\0'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        *to++ = *from++;</span><br><span class="line">    &#125;</span><br><span class="line">    *to = <span class="string">'\0'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ASCII码</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">copy_string</span><span class="params">(<span class="keyword">char</span> *from, <span class="keyword">char</span> *to)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (*from)</span><br><span class="line">    &#123;</span><br><span class="line">        *to++ = *from++;</span><br><span class="line">    &#125;</span><br><span class="line">    *to = <span class="string">'\0'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//还可以简化为</span></span><br><span class="line"><span class="keyword">while</span> (*to++ = *from++);</span><br><span class="line">等价于</span><br><span class="line"><span class="keyword">while</span> ((*to++ = *from++) != <span class="string">'\0'</span>);</span><br><span class="line"><span class="comment">//for</span></span><br><span class="line"><span class="keyword">for</span> (; *to++ = *from++;);</span><br><span class="line">或者</span><br><span class="line">    <span class="keyword">for</span> (; (*to++ = *from++)!=<span class="string">'\0'</span>;);</span><br></pre></td></tr></table></figure><p>也可以使用字符数组名作函数形参，在函数中另定义两个指针变量p1，p2.函数copy_string可写为</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">copy_string</span><span class="params">(<span class="keyword">char</span> from[], <span class="keyword">char</span> to[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> *p1, *p2;</span><br><span class="line">    p1 = from;</span><br><span class="line">    p2 = to;</span><br><span class="line">    <span class="keyword">while</span> ((*p2++ = *p1++) != <span class="string">'\0'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用字符指针变量和字符数组的比较"><a href="#使用字符指针变量和字符数组的比较" class="headerlink" title="使用字符指针变量和字符数组的比较"></a>使用字符指针变量和字符数组的比较</h3><ul><li><p>字符数组由若干个元素组成，每个元素中放一个字符，而字符指针变量中存放的是地址(字符串第1个字符的地址),绝不是将字符串放到字符指针变量中.</p></li><li><p>赋值方式. 可以对字符指针变量赋值,但不能对数组名赋值</p></li><li><p>初始化的含义.</p><p>数组可以在定义时对各元素赋初值,但不能用赋值语句对字符数组中的全部元素整体赋值</p></li><li><p>存储单元的内容. 编译时为字符数组分配若干存储单元,以存放各元素的值,而对字符指针变量,只分配一个存储单元.</p><p>如果定义了字符数组,但未对它赋值,这时数组中的元素的值是不可预料的.</p><p>如果定义了字符指针变量,应当及时把一个字符变量(或字符数组元素)的地址赋给它，使它指向一个字符型数据，如果未对它赋予一个地址值，它并未具体指向一个确定的对象，此时如果向该指针变量所指向的对象输入数据，可能会出现严重的后果：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> *a;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>, a);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//危险的!</span></span><br></pre></td></tr></table></figure></li><li><p>指针变量的值是可以改变的,而字符数组名代表一个固定的值(数组首元素的地址)不能改变.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> *a = <span class="string">"I love China!"</span>;</span><br><span class="line">    a = a + <span class="number">7</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, a);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>引用数组元素</p><p>对字符数组可以使用下标法引用一个数组元素,也可以用地址法(<code>*(a+5)</code>).</p><p>对字符指针变量p使它指向数组a的首元素,可以使用指针变量带下标法(p[5])引用一个数组元素,也可以用地址法.</p></li><li><p>用指针变量指向一个格式字符串,可以用它代替printf函数中的格式字符串</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> *format;</span><br><span class="line">format = <span class="string">"a=%d,b=%f\n"</span>;</span><br><span class="line"><span class="built_in">printf</span>(format, a, b);</span><br></pre></td></tr></table></figure><p>这种printf函数称为<strong>可变格式输出函数</strong>.</p></li></ul><h2 id="指向函数的指针"><a href="#指向函数的指针" class="headerlink" title="指向函数的指针"></a>指向函数的指针</h2><p>每次调用函数时都会从函数分配的内存空间的起始地址开始执行此段函数代码。</p><p><strong>函数名代表函数的起始地址.</strong></p><p>可以定义一个指向函数的指针变量,用来存放某一函数的起始地址.这就意味着此指针变量指向该函数.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> (*p)(<span class="keyword">int</span>,<span class="keyword">int</span>);</span><br></pre></td></tr></table></figure><h3 id="用函数指针变量调用函数"><a href="#用函数指针变量调用函数" class="headerlink" title="用函数指针变量调用函数."></a>用函数指针变量调用函数.</h3><h5 id="用函数求a和b中的大者"><a href="#用函数求a和b中的大者" class="headerlink" title="用函数求a和b中的大者."></a>用函数求a和b中的大者.</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>)</span></span>;</span><br><span class="line">    <span class="keyword">int</span> (*p)(<span class="keyword">int</span>, <span class="keyword">int</span>);</span><br><span class="line">    <span class="keyword">int</span> a, b, c;</span><br><span class="line">    p = <span class="built_in">max</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"please enter a and b:"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d,%d"</span>, &amp;a, &amp;b);</span><br><span class="line">    c = (*p)(a, b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"max is:%d"</span>, c);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x &gt; y ? x : y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="怎么定义和使用指向函数的指针变量"><a href="#怎么定义和使用指向函数的指针变量" class="headerlink" title="怎么定义和使用指向函数的指针变量"></a>怎么定义和使用指向函数的指针变量</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">类型名 (*指针变量名)(函数参数表列)</span><br></pre></td></tr></table></figure><blockquote><p>类型名是函数返回值类型</p></blockquote><p>对指向函数的指针变量不能进行算术运算.如p+n,p++,p—等运算都是无意义的.</p><h5 id="输入两个整数-让用户选择1或2-选1时调用max函数-输出二者中的大数-选2时调用min函数-输出二者中的小数"><a href="#输入两个整数-让用户选择1或2-选1时调用max函数-输出二者中的大数-选2时调用min函数-输出二者中的小数" class="headerlink" title="输入两个整数,让用户选择1或2,选1时调用max函数,输出二者中的大数,选2时调用min函数,输出二者中的小数."></a>输入两个整数,让用户选择1或2,选1时调用max函数,输出二者中的大数,选2时调用min函数,输出二者中的小数.</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">min</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>)</span></span>;</span><br><span class="line">    <span class="keyword">int</span> (*p)(<span class="keyword">int</span>, <span class="keyword">int</span>);</span><br><span class="line">    <span class="keyword">int</span> a, b, c, d;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"please enter two integer:\n"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d,%d"</span>, &amp;a, &amp;b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"please choose 1 or 2:\n"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;c);</span><br><span class="line">    <span class="keyword">if</span> (c == <span class="number">1</span>)</span><br><span class="line">        p = <span class="built_in">max</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="number">2</span>)</span><br><span class="line">        p = <span class="built_in">min</span>;</span><br><span class="line">    d = (*p)(a, b);</span><br><span class="line">    <span class="keyword">if</span> (c == <span class="number">1</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"max is:%d"</span>, d);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"min is:%d"</span>, d);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x &gt; y ? x : y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">min</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x &lt; y ? x : y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="用指向函数的指针作函数参数"><a href="#用指向函数的指针作函数参数" class="headerlink" title="用指向函数的指针作函数参数"></a>用指向函数的指针作函数参数</h3><blockquote><p>指向函数的指针变量的一个重要用途是把函数的入口地址作为参数传递到其他函数.</p></blockquote><h5 id="有两个整数a和b-由用户输入1-2和3-如输入1-程序就给出a和b中的大者-输入2-程序就给出a和b中的小者-输入3-则求a与b之和"><a href="#有两个整数a和b-由用户输入1-2和3-如输入1-程序就给出a和b中的大者-输入2-程序就给出a和b中的小者-输入3-则求a与b之和" class="headerlink" title="有两个整数a和b,由用户输入1,2和3.如输入1,程序就给出a和b中的大者.输入2,程序就给出a和b中的小者.输入3,则求a与b之和."></a>有两个整数a和b,由用户输入1,2和3.如输入1,程序就给出a和b中的大者.输入2,程序就给出a和b中的小者.输入3,则求a与b之和.</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">min</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>, <span class="keyword">int</span> (*p)(<span class="keyword">int</span>, <span class="keyword">int</span>))</span></span>;</span><br><span class="line">    <span class="keyword">int</span> a, b, c, d;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"please enter two integer:\n"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d,%d"</span>, &amp;a, &amp;b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"please choose 1 , 2 or 3:\n"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;c);</span><br><span class="line">    <span class="keyword">if</span> (c == <span class="number">1</span>)</span><br><span class="line">        fun(a, b, <span class="built_in">max</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="number">2</span>)</span><br><span class="line">        fun(a, b, <span class="built_in">min</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="number">3</span>)</span><br><span class="line">        fun(a, b, sum);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> (*p)(<span class="keyword">int</span>, <span class="keyword">int</span>))</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> result;</span><br><span class="line">    result = (*p)(x, y);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"max="</span>);</span><br><span class="line">    <span class="keyword">return</span> x &gt; y ? x : y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">min</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"min="</span>);</span><br><span class="line">    <span class="keyword">return</span> x &lt; y ? x : y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"sum="</span>);</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="返回指针值的函数"><a href="#返回指针值的函数" class="headerlink" title="返回指针值的函数"></a>返回指针值的函数</h3><p>定义返回指针值函数的原型的一般形式为:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">类型名 *函数名 (函数参数表列)</span><br></pre></td></tr></table></figure><h5 id="有a个学生-每个学生有b门课程的成绩-要求在用户输入学生序号以后-能输出该学生的全部成绩-用指针函数实现"><a href="#有a个学生-每个学生有b门课程的成绩-要求在用户输入学生序号以后-能输出该学生的全部成绩-用指针函数实现" class="headerlink" title="有a个学生,每个学生有b门课程的成绩,要求在用户输入学生序号以后,能输出该学生的全部成绩.用指针函数实现"></a>有a个学生,每个学生有b门课程的成绩,要求在用户输入学生序号以后,能输出该学生的全部成绩.用指针函数实现</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">float</span> score[][<span class="number">4</span>] = &#123;&#123;<span class="number">60</span>, <span class="number">70</span>, <span class="number">80</span>, <span class="number">90</span>&#125;,</span><br><span class="line">                        &#123;<span class="number">56</span>, <span class="number">74</span>, <span class="number">45</span>, <span class="number">86</span>&#125;,</span><br><span class="line">                        &#123;<span class="number">65</span>, <span class="number">88</span>, <span class="number">67</span>, <span class="number">99</span>&#125;&#125;;</span><br><span class="line">    <span class="function"><span class="keyword">float</span> *<span class="title">search</span><span class="params">(<span class="keyword">float</span> (*pointer)[<span class="number">4</span>], <span class="keyword">int</span> n)</span></span>;</span><br><span class="line">    <span class="keyword">float</span> *p;</span><br><span class="line">    <span class="keyword">int</span> i, k;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"enter number of student:\n"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;k);</span><br><span class="line">    p = search(score, k);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%5.2f\t"</span>, *(p + i));<span class="comment">//输出  score[k][0]~score[k][3];</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">float</span> *<span class="title">search</span><span class="params">(<span class="keyword">float</span> (*pointer)[<span class="number">4</span>], <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">float</span> *pt;</span><br><span class="line">    pt = *(pointer + n); <span class="comment">//pt的值是&amp;score[k][0]</span></span><br><span class="line">    <span class="keyword">return</span> pt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="找出其中有不及格的课程的学生及其学生号"><a href="#找出其中有不及格的课程的学生及其学生号" class="headerlink" title="找出其中有不及格的课程的学生及其学生号."></a>找出其中有不及格的课程的学生及其学生号.</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">float</span> score[][<span class="number">4</span>] = &#123;&#123;<span class="number">60</span>, <span class="number">70</span>, <span class="number">80</span>, <span class="number">90</span>&#125;,</span><br><span class="line">                        &#123;<span class="number">56</span>, <span class="number">74</span>, <span class="number">45</span>, <span class="number">86</span>&#125;,</span><br><span class="line">                        &#123;<span class="number">65</span>, <span class="number">88</span>, <span class="number">67</span>, <span class="number">99</span>&#125;&#125;;</span><br><span class="line">    <span class="function"><span class="keyword">float</span> *<span class="title">search</span><span class="params">(<span class="keyword">float</span> (*pointer)[<span class="number">4</span>])</span></span>;</span><br><span class="line">    <span class="keyword">float</span> *p;</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">3</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        p = search(score + i);</span><br><span class="line">        <span class="keyword">if</span> (p == *(score + i))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"No.%d score:"</span>, i);</span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">4</span>; ++j)</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%5.2f"</span>, *(p + j));</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">float</span> *<span class="title">search</span><span class="params">(<span class="keyword">float</span> (*pointer)[<span class="number">4</span>])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">float</span> *pt;</span><br><span class="line">    pt = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">for</span> (; i &lt; <span class="number">4</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (*(*(pointer + i)) &lt; <span class="number">60</span>)</span><br><span class="line">            pt = *pointer;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> pt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="指针数组和多维指针"><a href="#指针数组和多维指针" class="headerlink" title="指针数组和多维指针"></a>指针数组和多维指针</h2><blockquote><p>一个数组，若其元素均为指针类型数据，称为指针数组.</p></blockquote><p>定义一个指针数组</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">类型名 *数组名[数组长度];</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> *p[<span class="number">4</span>];</span><br></pre></td></tr></table></figure><h5 id="将若干字符串按字母顺序-由小到大-输出"><a href="#将若干字符串按字母顺序-由小到大-输出" class="headerlink" title="将若干字符串按字母顺序(由小到大)输出."></a>将若干字符串按字母顺序(由小到大)输出.</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">char</span> *name[], <span class="keyword">int</span> n)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">char</span> *name[], <span class="keyword">int</span> n)</span></span>;</span><br><span class="line">    <span class="keyword">char</span> *name[] = &#123;<span class="string">"Follow me"</span>, <span class="string">"BASIC"</span>, <span class="string">"Great Wall"</span>, <span class="string">"FORTRAN"</span>, <span class="string">"Computer design"</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">5</span>;</span><br><span class="line">    sort(name, n);</span><br><span class="line">    <span class="built_in">print</span>(name, n);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">char</span> *name[], <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> *temp;</span><br><span class="line">    <span class="keyword">int</span> i, j, k;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        k = i;</span><br><span class="line">        <span class="keyword">for</span> (j = i + <span class="number">1</span>; j &lt; n; j++)</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">strcmp</span>(name[k], name[i]) &gt; <span class="number">0</span>)</span><br><span class="line">                k = j;</span><br><span class="line">        <span class="keyword">if</span> (k != i)</span><br><span class="line">        &#123;</span><br><span class="line">            temp = name[i];</span><br><span class="line">            name[i] = name[k];</span><br><span class="line">            name[k] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print1</span><span class="params">(<span class="keyword">char</span> *name[], <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, name[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//也可以改写成</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">char</span> *name[], <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> *p;</span><br><span class="line">    p = name[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">while</span> (i &lt; n)</span><br><span class="line">    &#123;</span><br><span class="line">        p = *(name + i++); <span class="comment">//   name[i];    i++;</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, p);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="指向指针数据的指针变量"><a href="#指向指针数据的指针变量" class="headerlink" title="指向指针数据的指针变量"></a>指向指针数据的指针变量</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> **p;</span><br></pre></td></tr></table></figure><p><em>运算符的结合性是从右到左的.    \</em>(*p).</p><p>也就是说p指向一个字符指针变量(这个字符指针变量指向一个字符型数据),如果引用*p,就得到p所指向的字符指针变量的值.</p><h5 id="使用指向指针数据的指针变量"><a href="#使用指向指针数据的指针变量" class="headerlink" title="使用指向指针数据的指针变量"></a>使用指向指针数据的指针变量</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> *name[] = &#123;<span class="string">"Follow me"</span>, <span class="string">"BASIC"</span>, <span class="string">"Great Wall"</span>, <span class="string">"FORTRAN"</span>, <span class="string">"Computer design"</span>&#125;;</span><br><span class="line">    <span class="keyword">char</span> **p;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        p = name + i;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, *p);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="有一个指针数组-其元素分别指向一个整型数组的元素-用指向指针数据的指针变量-输出整型数组各元素的值"><a href="#有一个指针数组-其元素分别指向一个整型数组的元素-用指向指针数据的指针变量-输出整型数组各元素的值" class="headerlink" title="有一个指针数组,其元素分别指向一个整型数组的元素,用指向指针数据的指针变量,输出整型数组各元素的值."></a>有一个指针数组,其元素分别指向一个<strong>整型数组</strong>的元素,用指向指针数据的指针变量,输出整型数组各元素的值.</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">5</span>] = &#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> *num[<span class="number">5</span>] = &#123;&amp;a[<span class="number">0</span>], &amp;a[<span class="number">1</span>], &amp;a[<span class="number">2</span>], &amp;a[<span class="number">3</span>], &amp;a[<span class="number">4</span>]&#125;;</span><br><span class="line">    <span class="keyword">int</span> **p, i;</span><br><span class="line">    p = num;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, **p);</span><br><span class="line">        p++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="间接访问"><a href="#间接访问" class="headerlink" title="间接访问"></a>间接访问</h4><p>在一个指针变量中存放一个目标变量的地址，这就是“<strong>单机间址</strong>”.</p><p>指向指针数据的指针用的是“<strong>二级间址</strong>”.</p><p>间址方法可以延伸到更多的级,即<strong>多重指针</strong>.</p><h3 id="指针数组作main函数的形参"><a href="#指针数组作main函数的形参" class="headerlink" title="指针数组作main函数的形参"></a>指针数组作main函数的形参</h3><p>main可以用参数:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span> *argv[])</span></span></span><br></pre></td></tr></table></figure><blockquote><p>其中，argc和argv就是main函数的形参，它们就是程序的”命令行参数”.</p><p>argc是参数的个数,argv是参数向量,它是一个* char指针数组,数组中每一个元素(其值为指针)指向命令行中的一个字符串的首字符.</p></blockquote><p>用带参数的main函数,其第一个形参必须是int型,用来接收形参个数,第二个参数必须是字符指针数组,用来接收从操作系统命令行传来的字符串中首字母的地址.</p><p>在操作命令下,实参是和执行文件的命令一起给出的.例如在DOS,UNIX或Linux等系统的操作命令状态下,在命令行中包括了命令名和需要传给main函数的参数.</p><p><strong>命令行的一般形式为</strong></p><blockquote><p>命令名    参数1 参数2···参数n</p><p>命令名和各参数之间用空格分隔.命令行是可执行文件名(此文件含main函数)</p><p>如:</p><p>file1 China Beijing</p><p>file1为可执行文件名(实际上,文件名应包含盘符,路径),China和Beijing是调用main函数时的实参.</p></blockquote><ul><li><p>文件名也作为一个参数.argc的值等于3(有3个命令行参数:file1,China,Beijing)</p></li><li><p>命令行参数必须都是字符串(“file1”,”China”,”Beijing”都是字符串),这些字符串的首地址构成一个指针数组.</p><p>指针数组argv中的元素argv[0]指向字符串”file1”的首字符(argv[0]的值是字符串”file1”的首地址).</p></li></ul><p>名:file1的文件,它包含以下的main函数:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (argc &gt; <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ++argv;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, *argv);</span><br><span class="line">        --argc;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>选择“工程”-“设置”-“调试”-“程序变量”命令，输入 China Beijing，再运行程序。</p><p>输出</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">China</span><br><span class="line">Beijing</span><br></pre></td></tr></table></figure><p>改写:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (argc-- &gt; <span class="number">1</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, *++argv);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>许多操作系统提供了echo命令,它的作用是实现”参数回送”,即将echo后面的各参数(各字符串)在同一行上输出.实现”参数回送”的C程序(文件名为echo.c)如下:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (--argc &gt; <span class="number">0</span>)   <span class="comment">//当命令行的参数多于1</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%s%c\n"</span>, *++argv, (argc &gt; <span class="number">1</span>) ? <span class="string">' '</span> : <span class="string">'\n'</span>);<span class="comment">//从第2个参数开始输出各字参数(字符串)</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果用UNIX系统的命令行输入:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ .&#x2F;echo Computer and C Language↙   &#x2F;&#x2F;echo是可执行文件名.</span><br></pre></td></tr></table></figure><p>会在显示屏上输出:</p><p>Computer and C Language</p><p>或者</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; argc; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%s%c\n"</span>, argv[i], (argc &gt; <span class="number">1</span>) ? <span class="string">' '</span> : <span class="string">'\n'</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="动态内存分配与指向它的指针变量"><a href="#动态内存分配与指向它的指针变量" class="headerlink" title="动态内存分配与指向它的指针变量"></a>动态内存分配与指向它的指针变量</h1><h4 id="内存的动态分配"><a href="#内存的动态分配" class="headerlink" title="内存的动态分配"></a>内存的动态分配</h4><p>全局变量是分配在内存中的静态存储区的，非静态的局部变量(包括形参)是分配在内存中的动态存储区的,这个存储区是一个称为<code>栈</code>(stack)的区域.</p><p>C语言还允许建立内存动态分配区域,以存放一些临时用的数据,这些数据不必在程序的声明部分定义,也不必等到函数结束时才释放.而是需要时随时开辟,不需要时随时释放.这些数据是临时存放在一个特别的自由存储区.称为<code>堆</code>(heap)区.可以根据需要,向系统申请所需大小的空间.由于未在声明部分定义它们为变量或数组,因此不能通过变量名或数组名去引用这些数据,只能通过指针来引用.</p><h3 id="怎么建立内存的动态分配"><a href="#怎么建立内存的动态分配" class="headerlink" title="怎么建立内存的动态分配"></a>怎么建立内存的动态分配</h3><blockquote><h1 id="include"><a href="#include" class="headerlink" title="include "></a>include <stdlib.h></stdlib.h></h1></blockquote><ul><li><p>用malloc函数开辟动态存储区</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">malloc</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="built_in">size</span>)</span></span>;</span><br></pre></td></tr></table></figure><p>作用是在内存的动态存储区中分配一个长度为size的连续空间.形参size的类型为无符号整型(不允许为负数).此函数的值(返回值)是所分配区域的第一个字节的地址.或者说是一个指针型函数.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">malloc</span>(<span class="number">100</span>); <span class="comment">//开辟100字节的临时分配域,函数值为其第1个字节的地址</span></span><br></pre></td></tr></table></figure><p>注意指针的基类型为void,即指针不指向任何类型的数据,只提供一个纯地址.如果此函数未能成功地执行(例如内存空间不足),则返回空指针(NULL).</p></li><li><p>用calloc函数开辟动态存储区</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">calloc</span><span class="params">(<span class="keyword">unsigned</span> n,<span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="built_in">size</span>)</span></span>;</span><br></pre></td></tr></table></figure><p>在内存中动态地分配 num 个长度为 size 的连续空间，并将每一个字节都初始化为 0。所以它的结果是分配了 num*size 个字节长度的内存空间，并且每个字节的值都是0.</p><p>这就是<strong>动态数组</strong>.函数返回值指向所分配域的第一个字节的指针;如果分配不成功,则返回NULL.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p = <span class="built_in">calloc</span>(<span class="number">50</span>, <span class="number">4</span>);<span class="comment">//开辟50×4个字节的临时分配域,把首地址赋给指针变量p</span></span><br></pre></td></tr></table></figure></li><li><p>用realloc重新分配动态存储区.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">realloc</span><span class="params">(<span class="keyword">void</span> *p, <span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="built_in">size</span>)</span></span>;</span><br></pre></td></tr></table></figure><p>如果已经通过malloc函数或calloc函数获得乐动态空间,想改变大小,可以用realloc函数重新分配.</p><p>用realloc函数将p所指向的动态空间的大小改变为size.p的值不变.p的值不变.如果重分配不成功,返回NULL.如:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">realloc</span>(p,<span class="number">50</span>);</span><br></pre></td></tr></table></figure></li><li><p>用free函数释放动态存储区</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">free</span><span class="params">(*p)</span></span>;</span><br></pre></td></tr></table></figure><p>其作用是释放指针变量p所指向的动态空间,使这部分空间能重新被其他变量使用.</p><p>p应是最近一次调用calloc或malloc函数时得到的函数返回值.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">free</span>(p);<span class="comment">//释放指针变量p所指向的已分配的额动态空间</span></span><br></pre></td></tr></table></figure><blockquote><p>free函数无返回值.</p></blockquote></li></ul><h3 id="void指针类型"><a href="#void指针类型" class="headerlink" title="void指针类型"></a>void指针类型</h3><p>可以定义一个基类型为void的指针变量(即void*型变量).</p><p>“指向void类型”理解为 指向空类型或”不指向确定的类型”的数据.</p><blockquote><p>在将它的值赋给另一指针变量时由系统对它进行类型转换.使之适合于被赋值的变量的类别</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">3</span>;         <span class="comment">//定义a为整型变量.</span></span><br><span class="line">   <span class="keyword">int</span> *p1 = &amp;a;      <span class="comment">//p1指向int型变量</span></span><br><span class="line">   <span class="keyword">char</span> *p2;          <span class="comment">//p2指向char型变量</span></span><br><span class="line">   <span class="keyword">void</span> *p3;          <span class="comment">//p3为无类型指针变量(基类型为void型)</span></span><br><span class="line">   p3 = (<span class="keyword">void</span> *)p1;   <span class="comment">//将p1的值转换为void *类型,然后赋值给p3</span></span><br><span class="line">   p2 = (<span class="keyword">char</span> *)p3;   <span class="comment">//将p3的值转换为char *类型,然后赋值给p2</span></span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">"%d"</span>, *p1); <span class="comment">// 3</span></span><br><span class="line">   p3 = &amp;a;</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">"%d"</span>, *p3); <span class="comment">//非法,p3是无指向的,不能指向a</span></span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure><blockquote><p>在这种无指向的地址所标志的存储单元中不能存储任何数据的,无法通过这种地址对内存存取数据.</p></blockquote><p><strong>什么情况用到这种地址?</strong></p><p>这种情况是在调用动态存储分配函数(如maloc,caloc,realoc函数)时出现的.</p><p>用户用这些函数开辟动态存储区,显然希望获得此动态存储区的起始地址,以便利用该动态存储区.</p><p>在以前的C版本(包括C89)中,函数的返回地址一律指向字符型数据,即得到char*型指针.</p><p>malloc函数的原型为:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">char</span> *<span class="title">malloc</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> sise)</span></span>;</span><br></pre></td></tr></table></figure><p>人们开辟的动态存储区并不是一定用来存放字符型数据的,例如想用来存放一批整型数据.为此,在向该存储区存放数据前就需要进行地址的类型转换:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> *pt;</span><br><span class="line">pt = (<span class="keyword">int</span> *)<span class="built_in">malloc</span>(<span class="number">100</span>);</span><br></pre></td></tr></table></figure><p>系统会将指向字符数据的指针转换为指向整型数据的指针,然后赋给pt.这样pt就指向存储区的首字节,可以通过pt对该动态存储区进行存取操作.</p><blockquote><p>上面的类型转换只是产生一个临时的中间值赋给了pt,但没有改变malloc函数本身的类型.</p></blockquote><p>C99修改为:返回void*指针,这种指针不指向任何类型的数据,只提供一个纯地址.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> *pt;</span><br><span class="line">pt = (<span class="keyword">int</span> *)<span class="built_in">malloc</span>(<span class="number">100</span>); <span class="comment">//malloc(100)是void类型,把它转换为int*型</span></span><br><span class="line"><span class="comment">//等价于</span></span><br><span class="line">pt = <span class="built_in">malloc</span>(<span class="number">100</span>); <span class="comment">//自动进行类型转换</span></span><br></pre></td></tr></table></figure><h5 id="建立动态数组-输入5个学生的成绩-另外用一个函数检查其中有无低于60分的-输出不合格的成绩"><a href="#建立动态数组-输入5个学生的成绩-另外用一个函数检查其中有无低于60分的-输出不合格的成绩" class="headerlink" title="建立动态数组,输入5个学生的成绩,另外用一个函数检查其中有无低于60分的,输出不合格的成绩."></a>建立动态数组,输入5个学生的成绩,另外用一个函数检查其中有无低于60分的,输出不合格的成绩.</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> *p)</span></span>;</span><br><span class="line">    <span class="keyword">int</span> *p1, i;</span><br><span class="line">    p1 = (<span class="keyword">int</span> *)<span class="built_in">malloc</span>(<span class="number">5</span> * <span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, p1 + i);</span><br><span class="line">    check(p1);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> *p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"They are fail:"</span>);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">        <span class="keyword">if</span> (p[i] &lt; <span class="number">60</span>)</span><br><span class="line">            prtinf(<span class="string">"%d"</span>, p[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;善于利用指针&quot;&gt;&lt;a href=&quot;#善于利用指针&quot; class=&quot;headerlink&quot; title=&quot;善于利用指针&quot;&gt;&lt;/a&gt;善于利用指针&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;Good use of pointers&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h
      
    
    </summary>
    
    
    
      <category term="C" scheme="https://kayleh.top/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>realize modular programming with functions</title>
    <link href="https://kayleh.top/realize-modular-programming-with-functions/"/>
    <id>https://kayleh.top/realize-modular-programming-with-functions/</id>
    <published>2020-10-25T17:17:42.000Z</published>
    <updated>2020-10-25T17:24:18.443Z</updated>
    
    <content type="html"><![CDATA[<h1 id="用函数实现模块化程序设计"><a href="#用函数实现模块化程序设计" class="headerlink" title="用函数实现模块化程序设计"></a>用函数实现模块化程序设计</h1><blockquote><p>Realize modular programming with functions</p></blockquote><p>用函数输出以下结果：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">*****************</span><br><span class="line">How <span class="keyword">do</span> you <span class="keyword">do</span>!</span><br><span class="line">*****************</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print_star</span><span class="params">()</span></span>;<span class="comment">//函数的声明</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print_message</span><span class="params">()</span></span>;<span class="comment">//函数的声明</span></span><br><span class="line">    print_star();</span><br><span class="line">    print_message();</span><br><span class="line">    print_star();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_star</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"*****************\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_message</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"How do you do!\n"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>函数声明的作用是把有关函数的信息(函数名,函数类型,函数参数的个数与类型)通知编译系统,以便在编译系统对程序进行编译时,在进行到main函数调用print_star()和print_message()时知道它们是函数而不是变量或其他对象,还对调用函数的正确性进行检查.</p><p>函数间可以互相调用,但不能调用main函数,main函数是被操作系统调用的.</p><p>函数从用户使用的角度看分为:</p><ul><li>库函数</li><li>用户自己定义的函数</li></ul><p>从函数形式分为:</p><ul><li>无参函数</li><li>有参函数</li></ul></blockquote><h2 id="怎么定义函数"><a href="#怎么定义函数" class="headerlink" title="怎么定义函数"></a>怎么定义函数</h2><p>定义函数应包括哪些内容:</p><ul><li>函数的名字,方便按名调用</li><li>函数的类型,即函数返回值的类型</li><li>函数的参数的名字和类型,调用函数时需要传递的数据</li><li>函数的功能,函数体</li></ul><h4 id="定义无参函数"><a href="#定义无参函数" class="headerlink" title="定义无参函数"></a>定义无参函数</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">类型名函数名()</span><br><span class="line">&#123;</span><br><span class="line">    函数体</span><br><span class="line">&#125;</span><br><span class="line">或</span><br><span class="line">类型名函数名(<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">    函数体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数体包括声明部分(变量)和语句部分.</p><h4 id="定义有参函数"><a href="#定义有参函数" class="headerlink" title="定义有参函数"></a>定义有参函数</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">类型名函数名(形式参数表列)</span><br><span class="line">&#123;</span><br><span class="line">    函数体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="定义空函数"><a href="#定义空函数" class="headerlink" title="定义空函数"></a>定义空函数</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">类型名函数名()</span><br><span class="line">&#123;&#125;</span><br></pre></td></tr></table></figure><h2 id="调用函数"><a href="#调用函数" class="headerlink" title="调用函数"></a>调用函数</h2><h4 id="函数调用的形式"><a href="#函数调用的形式" class="headerlink" title="函数调用的形式"></a>函数调用的形式</h4><blockquote><p>函数名(实参表列)</p></blockquote><h4 id="函数调用方式"><a href="#函数调用方式" class="headerlink" title="函数调用方式"></a>函数调用方式</h4><ul><li><p>调用语句</p></li><li><p>函数表达式</p><p>要求函数带回一个确定的值以参加表达式的运算</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c=<span class="number">2</span>*<span class="built_in">max</span>(a,b);</span><br></pre></td></tr></table></figure></li><li><p>函数参数</p><p>函数调用作为另一个函数调用时的实参,如:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">m=<span class="built_in">max</span>(a,<span class="built_in">max</span>(b,c));</span><br></pre></td></tr></table></figure></li></ul><h3 id="函数调用时的数据传递"><a href="#函数调用时的数据传递" class="headerlink" title="函数调用时的数据传递"></a>函数调用时的数据传递</h3><h4 id="形式参数和实际参数"><a href="#形式参数和实际参数" class="headerlink" title="形式参数和实际参数"></a>形式参数和实际参数</h4><blockquote><p><code>形式参数</code></p><p>在定义函数时函数名后面括号中的变量名称为<code>形式参数</code></p><p><code>实际参数</code></p><p>在主调函数调用一个函数时,函数名后面括号中的变量名称为<code>实际参数</code></p></blockquote><h4 id="实参和形参间的数据传递"><a href="#实参和形参间的数据传递" class="headerlink" title="实参和形参间的数据传递"></a>实参和形参间的数据传递</h4><blockquote><p>在调用函数过程中,系统会把实参中的值传递给被调函数的形参.</p></blockquote><h5 id="输入两个整数-要求输出其中值较大者-要求用函数来找到最大值"><a href="#输入两个整数-要求输出其中值较大者-要求用函数来找到最大值" class="headerlink" title="输入两个整数,要求输出其中值较大者,要求用函数来找到最大值."></a>输入两个整数,要求输出其中值较大者,要求用函数来找到最大值.</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>;</span><br><span class="line">    <span class="keyword">int</span> a, b, c;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"please enter 2 integer numbers:"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d,%d"</span>, &amp;a, &amp;b);</span><br><span class="line">    c = <span class="built_in">max</span>(a, b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"max is %d"</span>, c);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;c</span><br><span class="line">    <span class="keyword">int</span> z;</span><br><span class="line">    z = x &gt; y ? x : y;</span><br><span class="line">    <span class="keyword">return</span> z;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="函数调用的执行过程"><a href="#函数调用的执行过程" class="headerlink" title="函数调用的执行过程"></a>函数调用的执行过程</h3><p>1)在定义函数中指定的形参,在未出现函数调用的时,它们并不占内存中的存储单元,在发生函数调用时,函数max的形参才被临时分配内存单元.</p><p>2)将实参的值传递给对应形参</p><p>3)在执行max函数期间,由于形参已经有值,就可以利用形参进行有关的运算</p><p>4)通过return语句将函数值带回到主调函数.</p><p>5)调用结束,形参单元被释放. 注意:实参单元仍保留并维持原值.没有改变.如果在执行一个被调函数时,形参的值发生改变,不会改变主调函数的实参的值.如:在执行max函数时,x和y的值变为10和15,但a和b仍为2和3,这是因为形参和实参是两个不同的存储单元.</p><h3 id="函数的返回值"><a href="#函数的返回值" class="headerlink" title="函数的返回值"></a>函数的返回值</h3><ul><li><p>函数的返回值是通过return语句中获得的.</p></li><li><p>函数返回值的类型是函数的类型.</p></li><li><p>在定义函数时指定的函数类型一般应该和return语句中的表达式类型一致.</p></li></ul><p>将在max函数中定义的变量z改为float型,函数返回值与指定的函数类型不同</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">float</span> x, <span class="keyword">float</span> y)</span></span>;</span><br><span class="line">    <span class="keyword">float</span> a, b;</span><br><span class="line">    <span class="keyword">int</span> c;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%f,%f"</span>, &amp;a, &amp;b);</span><br><span class="line">    c = <span class="built_in">max</span>(a, b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"max is %d"</span>, c);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">float</span> x, <span class="keyword">float</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">float</span> z;</span><br><span class="line">    z = x &gt; y ? x : y;</span><br><span class="line">    <span class="keyword">return</span> (z);</span><br><span class="line">&#125;</span><br><span class="line">---------</span><br><span class="line"><span class="number">1.5</span>,<span class="number">2.6</span></span><br><span class="line"><span class="built_in">max</span> is <span class="number">2</span></span><br></pre></td></tr></table></figure><h3 id="对被调用函数的声明和函数原型"><a href="#对被调用函数的声明和函数原型" class="headerlink" title="对被调用函数的声明和函数原型"></a>对被调用函数的声明和函数原型</h3><p>输入两个实数,用一个函数求它们之和.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">float</span> <span class="title">add</span><span class="params">(<span class="keyword">float</span> x, <span class="keyword">float</span> y)</span></span>;</span><br><span class="line">    <span class="keyword">float</span> a, b, c;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%f,%f"</span>, &amp;a, &amp;b);</span><br><span class="line">    c = add(a, b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"sum is %d"</span>, c);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">float</span> <span class="title">add</span><span class="params">(<span class="keyword">float</span> x, <span class="keyword">float</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">float</span> z;</span><br><span class="line">    z = x + y;</span><br><span class="line">    <span class="keyword">return</span> (z);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="函数声明的两种形式"><a href="#函数声明的两种形式" class="headerlink" title="函数声明的两种形式"></a>函数声明的两种形式</h4><p>1)函数类型    函数名(参数类型1    参数名1,参数类型2    参数名2,…参数类型n    参数名n)</p><p>2)函数类型    函数名(参数类型1,参数类型2,…,参数类型n)</p><p>编译系统只关心和检查参数个数和参数类型,而不检查参数名,因为在调用函数时只要求保证实参类型与形参类型一致,而不必考虑形参名是什么.因此在函数声明中</p><blockquote><p><code>函数原型</code>函数的首部称为函数原型</p></blockquote><h3 id="函数的嵌套调用"><a href="#函数的嵌套调用" class="headerlink" title="函数的嵌套调用"></a>函数的嵌套调用</h3><h5 id="输入4个整数-找出其中最大的数"><a href="#输入4个整数-找出其中最大的数" class="headerlink" title="输入4个整数,找出其中最大的数"></a>输入4个整数,找出其中最大的数</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">max4</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c, <span class="keyword">int</span> d)</span></span>;</span><br><span class="line">    <span class="keyword">int</span> a, b, c, d, <span class="built_in">max</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"please enter 4 integer numbers:"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d %d %d"</span>, &amp;a, &amp;b, &amp;c, &amp;d);</span><br><span class="line">    <span class="built_in">max</span> = max4(a, b, c, d);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"max:%d"</span>, <span class="built_in">max</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max2</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a &gt;= b)</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max4</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c, <span class="keyword">int</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">max2</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>)</span></span>;<span class="comment">//函数声明</span></span><br><span class="line">    <span class="keyword">int</span> m;</span><br><span class="line">    m = max2(a, b);</span><br><span class="line">    m = max2(m, c);</span><br><span class="line">    m = max2(m, d);</span><br><span class="line">    <span class="keyword">return</span> m;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>改进:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">max4</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c, <span class="keyword">int</span> d)</span></span>;</span><br><span class="line">    <span class="keyword">int</span> a, b, c, d, <span class="built_in">max</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"please enter 4 integer numbers:"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d %d %d"</span>, &amp;a, &amp;b, &amp;c, &amp;d);</span><br><span class="line">    <span class="built_in">max</span> = max4(a, b, c, d);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"max:%d"</span>, <span class="built_in">max</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max2</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a &gt;= b ? a : b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max4</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c, <span class="keyword">int</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">max2</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>)</span></span>;<span class="comment">//函数声明</span></span><br><span class="line">    <span class="keyword">return</span> max2(max2(max2(a, b), c), d);;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="函数的递归调用"><a href="#函数的递归调用" class="headerlink" title="函数的递归调用"></a>函数的递归调用</h2><blockquote><p>一个递归的问题可以分为”回溯”和”递推”两个阶段.</p></blockquote><h5 id="用递归的方法求n"><a href="#用递归的方法求n" class="headerlink" title="用递归的方法求n! ."></a>用递归的方法求n! .</h5><blockquote><p>n!=1                (n=0,1)</p><p>n!=n×(n-1)     (n&gt;1)</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">fac</span><span class="params">(<span class="keyword">int</span> n)</span></span>;</span><br><span class="line">    <span class="keyword">int</span> n, y;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"please enter an integer number:"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    y = fac(n);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d!=%d"</span>, n,y);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fac</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> f;</span><br><span class="line">    <span class="keyword">if</span> (n &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"n&lt;0.data error!"</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (n == <span class="number">0</span> || n == <span class="number">1</span>)</span><br><span class="line">        f = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> f = fac(n - <span class="number">1</span>) * n;</span><br><span class="line">    <span class="keyword">return</span> f;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="汉诺塔问题"><a href="#汉诺塔问题" class="headerlink" title="汉诺塔问题"></a>汉诺塔问题</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">hanoi</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">char</span> one, <span class="keyword">char</span> two, <span class="keyword">char</span> three)</span></span>;</span><br><span class="line">    <span class="keyword">int</span> m;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"input the number of diskes:"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;m);</span><br><span class="line">    hanoi(m, <span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">hanoi</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">char</span> one, <span class="keyword">char</span> two, <span class="keyword">char</span> three)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//将n个盘从one座借助two座移动到three座</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">move</span><span class="params">(<span class="keyword">char</span> x, <span class="keyword">char</span> y)</span></span>;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>)</span><br><span class="line">        <span class="built_in">move</span>(one, three);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        hanoi(n - <span class="number">1</span>, one, three, two);</span><br><span class="line">        <span class="built_in">move</span>(one, three);</span><br><span class="line">        hanoi(n - <span class="number">1</span>, two, one, three);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">move</span><span class="params">(<span class="keyword">char</span> x, <span class="keyword">char</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%c --&gt; %c\n"</span>, x, y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数组作为函数参数"><a href="#数组作为函数参数" class="headerlink" title="数组作为函数参数"></a>数组作为函数参数</h2><blockquote><p>在用数组元素作函数实参时,把实参的值传给形参,是<strong>“值传递”</strong>方式,数据的传递是由<strong>形参传到实参,单向传递.</strong></p></blockquote><h5 id="输入10个数-要求输出其中值最大的元素和该数是第几个数"><a href="#输入10个数-要求输出其中值最大的元素和该数是第几个数" class="headerlink" title="输入10个数,要求输出其中值最大的元素和该数是第几个数."></a>输入10个数,要求输出其中值最大的元素和该数是第几个数.</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">10</span>], i, m, n;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"please enter 10 integer numbers:"</span>);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>, n = <span class="number">0</span>, m = a[<span class="number">0</span>]; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">max</span>(m, a[i]) &gt; m)</span><br><span class="line">        &#123;</span><br><span class="line">            m = <span class="built_in">max</span>(m, a[i]);</span><br><span class="line">            n = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"the large number is %d\nit is the %dth number."</span>, m, n + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x &gt; y ? x : y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="一维数组名作函数参数"><a href="#一维数组名作函数参数" class="headerlink" title="一维数组名作函数参数"></a>一维数组名作函数参数</h3><h5 id="有一个一维数组score-内放10个学生成绩-求平均成绩"><a href="#有一个一维数组score-内放10个学生成绩-求平均成绩" class="headerlink" title="有一个一维数组score,内放10个学生成绩,求平均成绩."></a>有一个一维数组score,内放10个学生成绩,求平均成绩.</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">float</span> <span class="title">average</span><span class="params">(<span class="keyword">float</span> <span class="built_in">array</span>[<span class="number">10</span>])</span></span>;</span><br><span class="line">    <span class="keyword">float</span> score[<span class="number">10</span>], aver;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"input 10 scores:\n"</span>);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%f"</span>, &amp;score[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    aver = average(score);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"average score is %5.2f\n"</span>, aver);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">float</span> <span class="title">average</span><span class="params">(<span class="keyword">float</span> <span class="built_in">array</span>[<span class="number">10</span>])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">float</span> aver, sum = <span class="built_in">array</span>[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">        sum = sum + <span class="built_in">array</span>[i];</span><br><span class="line">    aver = sum / <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">return</span> aver;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>形参数组可以不指定大小,在定义数组时在数组名后加上空括号,如</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">float</span> <span class="title">average</span><span class="params">(<span class="keyword">float</span> <span class="built_in">array</span>[])</span></span></span><br></pre></td></tr></table></figure><h5 id="有两个班级-分别有35名和39名学生-调用一个average函数-分别求两个班的学生的平均成绩"><a href="#有两个班级-分别有35名和39名学生-调用一个average函数-分别求两个班的学生的平均成绩" class="headerlink" title="有两个班级,分别有35名和39名学生,调用一个average函数,分别求两个班的学生的平均成绩."></a>有两个班级,分别有35名和39名学生,调用一个average函数,分别求两个班的学生的平均成绩.</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">float</span> <span class="title">average</span><span class="params">(<span class="keyword">float</span> <span class="built_in">array</span>[], <span class="keyword">int</span> n)</span></span>;</span><br><span class="line">    <span class="keyword">float</span> score1[<span class="number">5</span>] = &#123;<span class="number">89</span>, <span class="number">99.5</span>, <span class="number">99</span>, <span class="number">45</span>, <span class="number">78</span>&#125;;</span><br><span class="line">    <span class="keyword">float</span> score2[<span class="number">10</span>] = &#123;<span class="number">85.5</span>, <span class="number">10.5</span>, <span class="number">87.5</span>, <span class="number">78.5</span>, <span class="number">67.5</span>, <span class="number">90.5</span>, <span class="number">99.5</span>, <span class="number">87.5</span>, <span class="number">88</span>, <span class="number">78.5</span>&#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//用数组名作实参</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"The average of class A is %6.2f\n"</span>, average(score1, <span class="number">5</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"The average of class B is %6.2f\n"</span>, average(score2, <span class="number">10</span>));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">float</span> <span class="title">average</span><span class="params">(<span class="keyword">float</span> <span class="built_in">array</span>[], <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">float</span> aver, sum = <span class="built_in">array</span>[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">        sum = sum + <span class="built_in">array</span>[i];</span><br><span class="line">    aver = sum / n;</span><br><span class="line">    <span class="keyword">return</span> (aver);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="使用选择法对10个整数从小到大排序"><a href="#使用选择法对10个整数从小到大排序" class="headerlink" title="使用选择法对10个整数从小到大排序"></a>使用选择法对10个整数从小到大排序</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span> <span class="built_in">array</span>[], <span class="keyword">int</span> n)</span></span>;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">10</span>], i;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"please enter array:"</span>);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    sort(a, <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"the sorted array:"</span>);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d"</span>, a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"/n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span> <span class="built_in">array</span>[], <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j, k, t;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        k = i;</span><br><span class="line">        <span class="keyword">for</span> (j = i + <span class="number">1</span>; j &lt; n; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">array</span>[j] &lt; <span class="built_in">array</span>[k])</span><br><span class="line">                k = j;</span><br><span class="line">            t = <span class="built_in">array</span>[k];</span><br><span class="line">            <span class="built_in">array</span>[k] = <span class="built_in">array</span>[i];</span><br><span class="line">            <span class="built_in">array</span>[i] = t;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="多维数组名作函数参数"><a href="#多维数组名作函数参数" class="headerlink" title="多维数组名作函数参数"></a>多维数组名作函数参数</h3><p>可以使用多维函数数组名作为函数的实参和形参.</p><blockquote><p>形参数组和实参数组都是由相同类型和大小的一维数组组成的.C语言编译系统<strong>不检查第一维</strong>的大小.</p></blockquote><h5 id="有一个3×4的矩阵-求所有元素的最大值"><a href="#有一个3×4的矩阵-求所有元素的最大值" class="headerlink" title="有一个3×4的矩阵,求所有元素的最大值."></a>有一个3×4的矩阵,求所有元素的最大值.</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">max_value</span><span class="params">(<span class="keyword">int</span> <span class="built_in">array</span>[][<span class="number">4</span>])</span></span>;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">3</span>][<span class="number">4</span>] = &#123;&#123;<span class="number">1</span>,  <span class="number">3</span>,  <span class="number">5</span>,  <span class="number">7</span>&#125;,</span><br><span class="line">                   &#123;<span class="number">2</span>,  <span class="number">4</span>,  <span class="number">6</span>,  <span class="number">8</span>&#125;,</span><br><span class="line">                   &#123;<span class="number">15</span>, <span class="number">17</span>, <span class="number">34</span>, <span class="number">12</span>&#125;&#125;;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"max value is %d"</span>, max_value(a));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max_value</span><span class="params">(<span class="keyword">int</span> <span class="built_in">array</span>[][<span class="number">4</span>])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">max</span>, i, j;</span><br><span class="line">    <span class="built_in">max</span> = <span class="built_in">array</span>[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">3</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">4</span>; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">array</span>[i][j] &gt; <span class="built_in">max</span>)</span><br><span class="line">                <span class="built_in">max</span> = <span class="built_in">array</span>[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">max</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意:</p><p>1.形参数组array第一维的大小省略,第2维大小不能省略,而且要和实参数组a的第2维大小相同.</p><p>2.在主函数调用max_value函数时,把实参二维数组a的第1行的起始地址传递给形参数组array.因此array数组第一行的起始地址与a数组的第一行起始地址相同.</p></blockquote><h1 id="局部变量和全局变量"><a href="#局部变量和全局变量" class="headerlink" title="局部变量和全局变量"></a>局部变量和全局变量</h1><p><strong>作用域</strong></p><p>每个变量都有作用域问题,即它们在什么范围内有效.</p><h3 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h3><p>定义变量有3种情况:</p><p>(1)在函数的开头定义</p><p>(2)在函数内的复合语句内定义</p><p>(3)在函数的外部定义</p><h4 id="说明"><a href="#说明" class="headerlink" title="说明:"></a>说明:</h4><p>1.主函数中定义的变量也只在主函数中有效</p><p>2.不同函数中可以使用同名的变量</p><p>3.形式参数也是局部变量</p><p>4.在一个函数内部,可以在复合语句中定义变量,这些变量只在本复合语句中有效,这种复合语句也称为”分程序”或”程序块”.离开复合语句,变量就无效,系统会把占用的内存资源释放.</p><h3 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h3><blockquote><p>程序的编译单位是源程序文件.</p></blockquote><p>在函数之内定义的变量是局部变量,</p><p>在函数之外定义的变量是外部变量,是<strong>全局变量</strong>.它的有效范围为从定义变量的位置开始到本源程序文件结束.</p><h5 id="非必要不建议使用全局变量"><a href="#非必要不建议使用全局变量" class="headerlink" title="非必要不建议使用全局变量:"></a>非必要不建议使用全局变量:</h5><p>1.在全部执行过程中都占用存储单元,而不是仅在需要时才开辟单元.</p><p>2.减低程序的清晰性,不易维护</p><h1 id="变量的存储方式和生存期"><a href="#变量的存储方式和生存期" class="headerlink" title="变量的存储方式和生存期"></a>变量的存储方式和生存期</h1><h4 id="动态存储方式和静态存储方式"><a href="#动态存储方式和静态存储方式" class="headerlink" title="动态存储方式和静态存储方式"></a>动态存储方式和静态存储方式</h4><p>从变量值的存在时间(即生存期)来分:</p><blockquote><p>静态存储方式:程序在运行期间由系统分配固定的存储空间的方式</p><p>动态存储方式:程序运行期间根据需要进行动态的分配存储空间的方式.</p></blockquote><p>数据分别存放在静态存储区和动态存储区,全局变量全部存放在静态存储区中.</p><blockquote><p>在<strong>动态存储区</strong>中存放以下数据:</p><p>①函数形式参数。在调用函数时给形参分配存储空间。</p><p>②函数中定义的没有用关键字static声明的变量,即自动变量.</p><p>③函数调用时的现场保护和返回地址.</p></blockquote><p>如果在一个程序中两次调用同一函数,而在此函数中定义了局部变量,在两次调用时分配给这些局部变量的存储空间的地址可能不一样.  </p><p>每个变量和函数都有两个属性,<strong>数据类型</strong>(如整型,浮点型)和<strong>数据的存储类型</strong>(静态存储,动态存储).</p><blockquote><p>在定义和声明变量和函数时,一般应同时指定其数据数据类型和存储类型,也可以以默认的方式指定(即如果用户不指定,系统会隐含地指定为某一种存储类型).</p></blockquote><p>C的存储类别:</p><ul><li>自动的(auto)</li><li>静态的(static)</li><li>寄存器的(register)</li><li>外部的(extern)</li></ul><h2 id="局部变量的存储类别"><a href="#局部变量的存储类别" class="headerlink" title="局部变量的存储类别"></a>局部变量的存储类别</h2><h4 id="自动变量-auto变量"><a href="#自动变量-auto变量" class="headerlink" title="自动变量(auto变量)"></a>自动变量(auto变量)</h4><p>函数中的局部变量,如果不专门声明为static(静态)存储类型,都是动态地分配存储空间的,数据存储在动态存储区中.程序运行期间根据需要进行动态的分配存储空间的方式.因此这类局部变量称为自动变量.</p><p>自动变量用关键字auto作存储类别的声明.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> a)</span> <span class="comment">//定义f函数，a为形参</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> <span class="keyword">int</span> b, c = <span class="number">3</span>; <span class="comment">//定义b，c为自动变量</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行完后自动释放a,b,c所占的存储单元.</p><blockquote><p>auto关键字可以省略,不写auto则隐含指定为”自动存储类别”,属于动态存储方式.</p></blockquote><h4 id="静态局部变量-static局部变量"><a href="#静态局部变量-static局部变量" class="headerlink" title="静态局部变量(static局部变量)"></a>静态局部变量(static局部变量)</h4><p>有时希望函数中的局部变量的值在函数调用结束后不消失而继续保留原值,即其占用的存储空间不释放,在下一次再调用该函数时,该变量已有值(就是上一次函数调用结束的值)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span>)</span></span>;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">2</span>, i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, f(a));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> <span class="keyword">int</span> b = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">static</span> c = <span class="number">3</span>;</span><br><span class="line">    b = b + <span class="number">1</span>;</span><br><span class="line">    c = c + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> (a + b + c);</span><br><span class="line">&#125;</span><br><span class="line">--------</span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="number">9</span></span><br></pre></td></tr></table></figure><blockquote><p>对静态局部变量是在编译时赋初值的,即只赋值一次,在程序运行时它已有初值.</p><p>而对自动变量是在函数调用时进行的,每调用一次函数重新给一次初值.</p><p>在定义局部变量时不赋初值的话,则对静态变量来说,编译时自动赋初值0(对数值型变量)或空字符’\0’(对字符变量).</p><p>而对自动变量来说,它的值是一个不确定的值.由于每次函数调用结束后存储单元已释放,下次调用时又重新另分配存储单元,而所分配的单元内容是不可知的.</p></blockquote><h5 id="输出1到5的阶乘值-局部静态变量"><a href="#输出1到5的阶乘值-局部静态变量" class="headerlink" title="输出1到5的阶乘值.(局部静态变量)"></a>输出1到5的阶乘值.(局部静态变量)</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">fac</span><span class="params">(<span class="keyword">int</span>)</span></span>;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d!=%d\n"</span>, i, fac(i));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fac</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> f = <span class="number">1</span>;<span class="comment">//f保留了上次函数调用结束的值</span></span><br><span class="line">    f = f * n;</span><br><span class="line">    <span class="keyword">return</span> (f);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>不建议使用静态存储,长期占用不释放.</p></blockquote><h4 id="寄存器变量-register变量"><a href="#寄存器变量-register变量" class="headerlink" title="寄存器变量(register变量)"></a>寄存器变量(register变量)</h4><blockquote><p>为提高执行效率，允许将局部变量的值放在CPU中的寄存器中，需要用时直接从寄存器取出参加运算，不必再到内存中取存取。</p></blockquote><p>优化的编译系统能够识别使用频繁的变量，从而自动地将这些变量放在寄存器中。因此实际上用register声明变量的必要性不大。</p><blockquote><p>三种局部变量的存储位置是不同的：</p><p>自动变量是存储在动态存储区；</p><p>静态局部变量是存储在静态存储区；</p><p>寄存器存储在CPU中的寄存器中。</p></blockquote><h2 id="全局变量的存储类型"><a href="#全局变量的存储类型" class="headerlink" title="全局变量的存储类型"></a>全局变量的存储类型</h2><h4 id="在一个文件内扩展外部变量的作用域"><a href="#在一个文件内扩展外部变量的作用域" class="headerlink" title="在一个文件内扩展外部变量的作用域"></a>在一个文件内扩展外部变量的作用域</h4><blockquote><p>如果由于某种考虑，在定义点之前的函数需要引用该外部变量，则在引用之前用关键字<code>extern</code>对该变量作<strong>“外部变量声明”</strong>，表示把该外部变量的作用域扩展到此位置。</p></blockquote><h5 id="调用函数，求3个整数中的大者。"><a href="#调用函数，求3个整数中的大者。" class="headerlink" title="调用函数，求3个整数中的大者。"></a><strong>调用函数，求3个整数中的大者。</strong></h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">extern</span> <span class="keyword">int</span> A, B, C;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"please enter three integer numbers:"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;A, &amp;B, &amp;C);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"max is %d\n"</span>, <span class="built_in">max</span>());</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> A, B, C;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m;</span><br><span class="line">    m = A &gt; B ? A : B;</span><br><span class="line">    <span class="keyword">if</span> (C &gt; m)m = C;</span><br><span class="line">    <span class="keyword">return</span> m;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="将外部变量的作用域扩展到其他文件"><a href="#将外部变量的作用域扩展到其他文件" class="headerlink" title="将外部变量的作用域扩展到其他文件"></a>将外部变量的作用域扩展到其他文件</h4><h5 id="给定b的值，输入a和m，求a-b和-a-m-的值"><a href="#给定b的值，输入a和m，求a-b和-a-m-的值" class="headerlink" title="给定b的值，输入a和m，求a*b和$a^m$的值"></a>给定b的值，输入a和m，求a*b和$a^m$的值</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//file1.c</span></span><br><span class="line"><span class="keyword">int</span> A;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">power</span><span class="params">(<span class="keyword">int</span>)</span></span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">3</span>, c, d, m;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"please enter the number a and its power m:\n"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d,%d"</span>, &amp;A, &amp;m);</span><br><span class="line">    c = A * b;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d*%d=%d\n"</span>, A, b, c);</span><br><span class="line">    d = power(m);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d**%d=%d\n"</span>, A, m, d);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//file2.c</span></span><br><span class="line"><span class="keyword">extern</span>  A;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">power</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, y = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        y *= A;</span><br><span class="line">    <span class="keyword">return</span> y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>extern既可以用来扩展外部变量在本文件的作用域,又可以使外部变量的作用域从一个文件扩展到程序中的其他文件,那么系统怎么区别处理呢?</p><p>在编译时遇到extern时,先在本文件中找外部变量的定义,如果找到,则在本文件中扩展作用域;</p><p>如果找不到,就在连接时从其他文件找到外部变量的定义,如果从其他文件中找到了,就将作用域扩展到本文件;如果再找不到,就按出错处理.</p></blockquote><h4 id="将外部变量的作用域限制在本文件中"><a href="#将外部变量的作用域限制在本文件中" class="headerlink" title="将外部变量的作用域限制在本文件中"></a>将外部变量的作用域限制在本文件中</h4><p>有时在程序设计中希望某些外部变量只限于被本文件引用,而不能被其他文件引用,这时可以在定义外部变量时加一个<code>static</code>声明.</p><p>加上<code>static</code>声明,只能用于本文件的外部变量称为<code>静态外部变量</code>.这就为程序的模块化,通用性提供方便.</p><p>如果已确认其他文件不需要引用本文件的外部变量,就可以对本文件的外部变量都加上static,成为静态外部变量,以免被其他文件误用.这就相当于把本文件的外部变量对外界”屏蔽起来”,从其他文件的角度看,这个<code>静态外部变量</code>是”看不见的,不能用的”.</p><blockquote><p>用<code>static</code>声明一个变量的作用:</p><ul><li>对局部变量使用:</li></ul><p>把它分配在静态存储区,该变量在整个程序执行期间不释放,其所分配的空间始终存在.</p><ul><li>对全局变量使用:</li></ul><p>则该变量的作用域只限于本文件模块(即被声明的文件中).</p></blockquote><h5 id="注意"><a href="#注意" class="headerlink" title="注意:"></a>注意:</h5><p>auto,static,register声明变量时,是在定义变量的基础上加上这些关键字,不能<strong>单独使用</strong></p><p>如:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a;</span><br><span class="line"><span class="keyword">static</span> a; <span class="comment">//企图将变量a声明为静态变量</span></span><br></pre></td></tr></table></figure><p>编译时会被认为”重新定义”.</p><h1 id="关于变量的声明和定义"><a href="#关于变量的声明和定义" class="headerlink" title="关于变量的声明和定义"></a>关于变量的声明和定义</h1><ul><li>定义:建立存储空间的声明(“int a;”),定义性声明</li><li>声明:不建立存储空间的声明(“extern a;”),引用性声明</li></ul><p>声明包括定义,但并非所有的声明都是定义.</p><h1 id="内部函数和外部函数"><a href="#内部函数和外部函数" class="headerlink" title="内部函数和外部函数"></a>内部函数和外部函数</h1><h3 id="内部函数"><a href="#内部函数" class="headerlink" title="内部函数"></a>内部函数</h3><p>如果一个函数只能被本文件中的其他函数所调用，它称为<strong>内部函数</strong>，在定义内部函数时，在函数名和函数类型的前面加static，即：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> 类型名 函数名(形参表)</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span></span><br></pre></td></tr></table></figure><p>内部函数又被称为静态函数，因为它是用static声明的。使用内部函数，可以使函数的作用域只局限于所在文件。这样，在不同的文件中即使有同名的内部函数，也互不干扰，不必担心所用函数是否会与其他文件中的模块中的函数同名。</p><h3 id="外部函数"><a href="#外部函数" class="headerlink" title="外部函数"></a>外部函数</h3><p>如果在定义函数时，在函数首部的最左端加关键字extern，则此函数是外部函数，可供其他文件使用。</p><p>如函数首部可以为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">int</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span></span><br></pre></td></tr></table></figure><p>这样，函数fun就可以为其他文件调用。c语言规定，如果在定义函数时省略extern，则默认为<strong>外部函数</strong>。</p><h5 id="有一个字符串，内有若干个字符，现输入一个字符，要求程序将字符串中该字符删去。"><a href="#有一个字符串，内有若干个字符，现输入一个字符，要求程序将字符串中该字符删去。" class="headerlink" title="有一个字符串，内有若干个字符，现输入一个字符，要求程序将字符串中该字符删去。"></a>有一个字符串，内有若干个字符，现输入一个字符，要求程序将字符串中该字符删去。</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//file1.c</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">extern</span> <span class="keyword">void</span> <span class="title">enter_string</span><span class="params">(<span class="keyword">char</span> str[<span class="number">80</span>])</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">extern</span> <span class="keyword">void</span> <span class="title">delete_string</span><span class="params">(<span class="keyword">char</span> str[], <span class="keyword">char</span> ch)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">extern</span> <span class="keyword">void</span> <span class="title">print_string</span><span class="params">(<span class="keyword">char</span> str[])</span></span>;</span><br><span class="line">    <span class="keyword">char</span> c, str[<span class="number">80</span>];</span><br><span class="line">    enter_string(str);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%c"</span>, &amp;c);<span class="comment">//输入需要删除的字符</span></span><br><span class="line">    delete_string(str, c);</span><br><span class="line">    print_string(str);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//file2.c</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">enter_string</span><span class="params">(<span class="keyword">char</span> str[<span class="number">80</span>])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    gets(str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//file3.c</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delete_string</span><span class="params">(<span class="keyword">char</span> str[], <span class="keyword">char</span> ch)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = j = <span class="number">0</span>; str[i] != <span class="string">'\0'</span>; i++)</span><br><span class="line">        <span class="keyword">if</span> (str[i] != ch)</span><br><span class="line">            str[j++] = str[i];</span><br><span class="line">    str[j] = <span class="string">'\0'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//file4.c</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_string</span><span class="params">(<span class="keyword">char</span> str[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>extern可以省略</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;用函数实现模块化程序设计&quot;&gt;&lt;a href=&quot;#用函数实现模块化程序设计&quot; class=&quot;headerlink&quot; title=&quot;用函数实现模块化程序设计&quot;&gt;&lt;/a&gt;用函数实现模块化程序设计&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;Realize modular p
      
    
    </summary>
    
    
    
      <category term="C" scheme="https://kayleh.top/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>use-arrays-to-process-batch-data</title>
    <link href="https://kayleh.top/use-arrays-to-process-batch-data/"/>
    <id>https://kayleh.top/use-arrays-to-process-batch-data/</id>
    <published>2020-10-25T17:17:20.000Z</published>
    <updated>2020-10-25T17:47:51.546Z</updated>
    
    <content type="html"><![CDATA[<h1 id="利用数组处理批量数据"><a href="#利用数组处理批量数据" class="headerlink" title="利用数组处理批量数据"></a>利用数组处理批量数据</h1><blockquote><p>use-arrays-to-process-batch-data</p></blockquote><p>1.<code>数组</code>使一组有序数据的集合.</p><p>2.用一个数组名和下标来唯一地确定数组中的元素</p><p>3.数组中的每一个元素都属于同一个数据类型</p><h2 id="怎样定义和引用一维数组"><a href="#怎样定义和引用一维数组" class="headerlink" title="怎样定义和引用一维数组"></a>怎样定义和引用一维数组</h2><blockquote><p>类型符 数组名[常量表达式]</p></blockquote><h3 id="怎么引用一维数组元素"><a href="#怎么引用一维数组元素" class="headerlink" title="怎么引用一维数组元素"></a>怎么引用一维数组元素</h3><blockquote><p>数组名[下标]</p></blockquote><p>对10个数组元素依次赋值为0,1,2,3,4,5,6,7,8,9,要求按逆序输出.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, a[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= <span class="number">9</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        a[i] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">9</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>, a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="一维数组的初始化"><a href="#一维数组的初始化" class="headerlink" title="一维数组的初始化"></a>一维数组的初始化</h3><p>1)在定义数组时对全部数组元素赋予初值.</p><p>2)可以只给数组中的一部分元素赋值(只给前n个元素赋值,其余的元素自动赋值为0)</p><p>3)如果想使一个数组中全部元素值为0,可以写成</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a[<span class="number">10</span>]=&#123;<span class="number">0</span>&#125;;</span><br></pre></td></tr></table></figure><p>4)在对全部元素赋值时,如果数据的个数已经确定,因此可以不指定数组长度.</p><h5 id="用数组来处理求Fibonacci数列问题"><a href="#用数组来处理求Fibonacci数列问题" class="headerlink" title="用数组来处理求Fibonacci数列问题"></a>用数组来处理求Fibonacci数列问题</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">int</span> f[<span class="number">20</span>] = &#123;<span class="number">1</span>, <span class="number">1</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">2</span>; i &lt; <span class="number">20</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        f[i] = f[i - <span class="number">2</span>] + f[i - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (i % <span class="number">5</span> == <span class="number">0</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%12d"</span>, f[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="有10个地区的面积-要求对它们按由小到大的顺序排列-冒泡排序"><a href="#有10个地区的面积-要求对它们按由小到大的顺序排列-冒泡排序" class="headerlink" title="有10个地区的面积,要求对它们按由小到大的顺序排列(冒泡排序)"></a>有10个地区的面积,要求对它们按由小到大的顺序排列(冒泡排序)</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">int</span> i, j, t;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"input 10 numbers:\n"</span>);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">9</span>; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">9</span> - j; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[i] &gt; a[i + <span class="number">1</span>])</span><br><span class="line">            &#123;</span><br><span class="line">                t = a[i];</span><br><span class="line">                a[i] = a[i + <span class="number">1</span>];</span><br><span class="line">                a[i + <span class="number">1</span>] = t;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"the sorted number:\n"</span>);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>, a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="怎样定义和引用二维数组"><a href="#怎样定义和引用二维数组" class="headerlink" title="怎样定义和引用二维数组"></a>怎样定义和引用二维数组</h2><p>二维数组常称为矩阵.</p><h3 id="怎么定义二维数组"><a href="#怎么定义二维数组" class="headerlink" title="怎么定义二维数组"></a>怎么定义二维数组</h3><blockquote><p>float pay[3][6]</p></blockquote><p><em>类型说明符 数组名[常量表达式][常量表达式]</em></p><p>二维数组中元素排列的顺序是按行存放的,即在内存中先顺序存放第1行的元素,接着再存放第2行的元素.所以第1维的下标变化最慢,最右边的下标变化最快</p><h3 id="二维数组的初始化"><a href="#二维数组的初始化" class="headerlink" title="二维数组的初始化"></a>二维数组的初始化</h3><p>$花括号显示异常</p><p>1)分行给二维数组赋初值</p><blockquote><p>int a[3][4]=({1,2,3,4},{5,6,7,8},{9,10,11,12})</p></blockquote><p>2)可以将所有数据写在一个花括号内,按数组元素在内存中的排列顺序对各元素赋初值.</p><blockquote><p>int a[3][4]={1,2,3,4,5,6,7,8,9,10,11,12}</p></blockquote><p>3)可以对部分元素赋初值</p><blockquote><p>int a[3][4]=({1},{5},{9})</p><p>1    0    0    0</p><p>5    0    0    0</p><p>9    0    0    0</p></blockquote><p>也可以不赋初值</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a[<span class="number">3</span>][<span class="number">4</span>]=(&#123;<span class="number">1</span>&#125;,&#123;&#125;,&#123;<span class="number">9</span>&#125;)</span><br></pre></td></tr></table></figure><p>4)如果对全部元素都赋初值(即提供全部初始数据),则定义数组时对第1维的长度可以不指定,但第2维的长度不能省.</p><p>如:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a[<span class="number">3</span>][<span class="number">4</span>]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>&#125;;</span><br><span class="line">等价于</span><br><span class="line"><span class="keyword">int</span> a[][<span class="number">4</span>]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>&#125;;</span><br></pre></td></tr></table></figure><p>在定义时也可以只对部分元素赋初值而省略第1维的长度,但应分行赋值.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a[][<span class="number">4</span>]=(&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">3</span>&#125;,&#123;&#125;,&#123;<span class="number">0</span>,<span class="number">10</span>&#125;);</span><br></pre></td></tr></table></figure><h5 id="将一个二维数组行和列的元素互换-存到另一个二维数组里面"><a href="#将一个二维数组行和列的元素互换-存到另一个二维数组里面" class="headerlink" title="将一个二维数组行和列的元素互换,存到另一个二维数组里面."></a>将一个二维数组行和列的元素互换,存到另一个二维数组里面.</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">例如:</span><br><span class="line">14</span><br><span class="line">a&#x3D;[123]        b &#x3D; [ 25 ]</span><br><span class="line">   45636</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">2</span>][<span class="number">3</span>] = &#123;&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;,</span><br><span class="line">                   &#123;<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;&#125;;</span><br><span class="line">    <span class="keyword">int</span> b[<span class="number">3</span>][<span class="number">2</span>], i, j;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"array a:\n"</span>);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= <span class="number">1</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt;= <span class="number">2</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%5d"</span>, a[i][j]);</span><br><span class="line">            b[j][i] = a[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"array b:\n"</span>);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= <span class="number">2</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt;= <span class="number">1</span>; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%5d"</span>, b[i][j]);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="字符数组"><a href="#字符数组" class="headerlink" title="字符数组"></a>字符数组</h1><p>用来存放字符数据的数组时字符数组.</p><p>例如:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> c[<span class="number">10</span>];</span><br><span class="line">    c[<span class="number">0</span>] = <span class="string">'I'</span>;</span><br><span class="line">    c[<span class="number">1</span>] = <span class="string">' '</span>;</span><br><span class="line">    c[<span class="number">2</span>] = <span class="string">'a'</span>;</span><br><span class="line">    c[<span class="number">3</span>] = <span class="string">'m'</span>;</span><br><span class="line">    c[<span class="number">4</span>] = <span class="string">' '</span>;</span><br><span class="line">    c[<span class="number">5</span>] = <span class="string">'K'</span>;</span><br></pre></td></tr></table></figure><p>由于字符型数据是以整数形式(ASCII代码)存放的,因此也可以用整型数组来存放字符数据.</p> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> c[<span class="number">10</span>];</span><br><span class="line">c[<span class="number">1</span>] = <span class="string">'a'</span>;<span class="comment">//合法，但浪费存储空间</span></span><br></pre></td></tr></table></figure><h3 id="字符数组的初始化"><a href="#字符数组的初始化" class="headerlink" title="字符数组的初始化"></a>字符数组的初始化</h3><p>如果初值个数小于数组长度，则只将这些字符赋给数组中前面那些元素，其余的元素自动定为空字符(即’\0’).如:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> c[<span class="number">10</span>] = &#123;<span class="string">'c'</span>, <span class="string">' '</span>, <span class="string">'p'</span>, <span class="string">'p'</span>&#125;;</span><br></pre></td></tr></table></figure><p>如果提供的初值个数与预定的数组长度相同,在定义时可以省略数组长度,系统会自动根据初值个数确定数组长度</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> c[] = &#123;<span class="string">'c'</span>, <span class="string">' '</span>, <span class="string">'p'</span>, <span class="string">'p'</span>&#125;;</span><br></pre></td></tr></table></figure><p>也可以定义二维字符数组</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> diamond[<span class="number">5</span>][<span class="number">5</span>] = &#123;&#123;<span class="string">' '</span>, <span class="string">' '</span>, <span class="string">'*'</span>&#125;, &#123;<span class="string">' '</span>, <span class="string">'*'</span>, <span class="string">' '</span>, <span class="string">'*'</span>&#125;,&#123;<span class="string">'*'</span>, <span class="string">' '</span>, <span class="string">' '</span>, <span class="string">' '</span>, <span class="string">'*'</span>&#125;,&#123; <span class="string">' '</span>, <span class="string">'*'</span>, <span class="string">' '</span>, <span class="string">'*'</span> &#125;,&#123; <span class="string">' '</span>, <span class="string">' '</span>, <span class="string">'*'</span> &#125;&#125;;</span><br></pre></td></tr></table></figure><h3 id="怎样引用字符数组中的元素"><a href="#怎样引用字符数组中的元素" class="headerlink" title="怎样引用字符数组中的元素"></a>怎样引用字符数组中的元素</h3><p>输出一个已知的字符串</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> c[<span class="number">15</span>] = &#123;<span class="string">'I'</span>, <span class="string">' '</span>, <span class="string">'a'</span>, <span class="string">'m'</span>, <span class="string">' '</span>, <span class="string">'a'</span>, <span class="string">' '</span>, <span class="string">'s'</span>, <span class="string">'t'</span>, <span class="string">'u'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>, <span class="string">'n'</span>, <span class="string">'t'</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">15</span>; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%c"</span>, c[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出一个菱形图</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> diamond[<span class="number">5</span>][<span class="number">5</span>] = &#123;&#123;<span class="string">' '</span>, <span class="string">' '</span>, <span class="string">'*'</span>&#125;, &#123;<span class="string">' '</span>, <span class="string">'*'</span>, <span class="string">' '</span>, <span class="string">'*'</span>&#125;,</span><br><span class="line">                          &#123;<span class="string">'*'</span>, <span class="string">' '</span>, <span class="string">' '</span>, <span class="string">' '</span>, <span class="string">'*'</span>&#125;,&#123; <span class="string">' '</span>, <span class="string">'*'</span>, <span class="string">' '</span>, <span class="string">'*'</span> &#125;,&#123; <span class="string">' '</span>, <span class="string">' '</span>, <span class="string">'*'</span> &#125;&#125;;</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">5</span>; j++)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%c"</span>, diamond[i][j]);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="字符串和字符串你结束标志"><a href="#字符串和字符串你结束标志" class="headerlink" title="字符串和字符串你结束标志"></a>字符串和字符串你结束标志</h3><p>遇到字符’\0’时,表示字符串结束,把它前面的字符组成一个字符串.</p><p>C系统在用字符数组存储字符串常量时会自动加一个’\0’作为结束符.<strong>遇到’\0’会停止输出</strong></p><p>例如:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> c[] = &#123;<span class="string">"I am happy"</span>&#125;;</span><br><span class="line"><span class="keyword">char</span> c[] = <span class="string">"I am happy"</span>;<span class="comment">//花括号可以省略</span></span><br><span class="line"><span class="comment">//可以写成:</span></span><br><span class="line"><span class="keyword">char</span> c[] = &#123;<span class="string">'I'</span>, <span class="string">' '</span>, <span class="string">'a'</span>, <span class="string">'m'</span>, <span class="string">' '</span>, <span class="string">'h'</span>, <span class="string">'a'</span>, <span class="string">'p'</span>, <span class="string">'p'</span>, <span class="string">'y'</span>,<span class="string">'\0'</span>&#125;;</span><br></pre></td></tr></table></figure><p>此时数组c的长度不是10而是11,因为字符串常量的最后由系统加上一个’\0’.</p><h3 id="字符数组的输入输出"><a href="#字符数组的输入输出" class="headerlink" title="字符数组的输入输出"></a>字符数组的输入输出</h3><p>1)逐个字符输入输出,用格式符”%c”输入或输出一个字符.</p><p>2)将整个字符串一次输入或输出.用”%s”格式符,意思是对字符串(string)的输入输出.</p><p>例如:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> c[] = &#123;<span class="string">"China"</span>&#125;;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s\n"</span>, c);</span><br></pre></td></tr></table></figure><blockquote><p>1.如果一个字符数组中包含一个以上’\0’,则遇到第一个’\0’时输出就结束.</p><p>2.可以用scanf函数输入一个字符串,如:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>,c);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>3.数组中未被赋值的元素的值自动置’\0’</p><p>4.系统会把空格字符作为输入的字符串之间的分隔符</p><p>5.scanf函数中的输入项如果是字符数组名,不要再加地址符&amp;,因为在C语言中数组名代表该数组第一个元素的地址(或者说数组的起始地址)</p><p>下面的写法是不正确的:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>,&amp;str);<span class="comment">//str前面不应加&amp;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>实际上是这样执行的:</p><p>按字符数组名c找到其数组第一个元素的地址,然后逐个输出其中的字符,直到遇’\0’为止.</p></blockquote><h3 id="使用字符串处理函数"><a href="#使用字符串处理函数" class="headerlink" title="使用字符串处理函数"></a>使用字符串处理函数</h3><h4 id="puts函数———输出字符串的函数"><a href="#puts函数———输出字符串的函数" class="headerlink" title="puts函数———输出字符串的函数"></a>puts函数———输出字符串的函数</h4><blockquote><p>puts (字符数组)</p></blockquote><p>其作用是将一个字符串(以’\0’结束的字符序列)输出到终端.</p><p>在用puts输出时的字符串结束标志’\0’换成’\n’,即输出完字符串后换行.</p><h4 id="gets函数———输入字符串的函数"><a href="#gets函数———输入字符串的函数" class="headerlink" title="gets函数———输入字符串的函数"></a>gets函数———输入字符串的函数</h4><blockquote><p>gets (字符数组)</p></blockquote><p>其作用是从终端输入一个字符串到字符数组,并且得到一个函数值.该函数值是字符数组的起始地址.</p><p>将输入的字符串送给字符数组(字符数组得到的是输入的字符串+’\0’),返回的函数值是字符数组str的第一个元素的地址.</p><h4 id="strcat函数———字符串连接函数"><a href="#strcat函数———字符串连接函数" class="headerlink" title="strcat函数———字符串连接函数"></a>strcat函数———字符串连接函数</h4><blockquote><p>strcat(字符数组1,字符数组2)</p></blockquote><p>其作用是把两个字符数组的字符串连接起来,把字符串2连接到字符串1后面,结果放在字符数组1中.函数调用得到函数值是字符数组1的地址.</p><blockquote><p>1.字符数组1必须足够大</p><p>2.连接前两个字符串后面都有’\0’,连接时将字符串1后面的’\0’取消,只在新字符串后面保留.</p></blockquote><h4 id="strcpy和strncpy函数———字符串复制函数"><a href="#strcpy和strncpy函数———字符串复制函数" class="headerlink" title="strcpy和strncpy函数———字符串复制函数"></a>strcpy和strncpy函数———字符串复制函数</h4><blockquote><p>strcpy(字符数组1,字符串2)</p></blockquote><p>作用是将字符串2复制到字符串1中去.</p><ul><li><p>“字符数组1”必须写成数组名形式,”字符串2”可以是字符数组名,也可以是一个字符串常量</p></li><li><p>如果在复制前未对str1数组初始化或赋值,则str1的各字节的内容是无法预知的.</p></li><li><p>不能使用赋值语句将一个字符串常量或字符数组直接给一个字符数组,字符数组是一个地址常量,它不能改变值.</p></li><li><p>可以用strncpy函数将字符串2中前面n个字符复制到字符数组1中去.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">strncpy</span>(str1,str2,<span class="number">2</span>);</span><br></pre></td></tr></table></figure></li></ul><h4 id="strcmp函数——字符串比较函数"><a href="#strcmp函数——字符串比较函数" class="headerlink" title="strcmp函数——字符串比较函数"></a>strcmp函数——字符串比较函数</h4><blockquote><p>strcmp(字符串1,字符串2)</p></blockquote><p>将两个字符串自左至右逐个字符相比(按ASCII码值大小比较),直至出现不同的字符或遇到’\0’为止.</p><p>1)若全部字符相同,则认为两个字符串相同</p><p>2)若出现不相同的字符,则以第1对不相同的字符的比较结果为准.</p><p>如果 s1 和 s2 是相同的，则返回 0；如果 s1<s2 则返回小于 0；如果 s1>s2 则返回大于 0。 </s2></p><h4 id="strlen函数———测字符串长度的函数"><a href="#strlen函数———测字符串长度的函数" class="headerlink" title="strlen函数———测字符串长度的函数"></a>strlen函数———测字符串长度的函数</h4><blockquote><p>strlen(字符数组)</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> c[<span class="number">10</span>] = &#123;<span class="string">"China"</span>&#125;;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>, <span class="built_in">strlen</span>(c));</span><br><span class="line"><span class="comment">//结果是5</span></span><br></pre></td></tr></table></figure><h4 id="strlwr函数———转换为小写的函数"><a href="#strlwr函数———转换为小写的函数" class="headerlink" title="strlwr函数———转换为小写的函数"></a>strlwr函数———转换为小写的函数</h4><blockquote><p>strlwr(字符串)</p></blockquote><h4 id="strupr函数———转换为大写的函数"><a href="#strupr函数———转换为大写的函数" class="headerlink" title="strupr函数———转换为大写的函数"></a>strupr函数———转换为大写的函数</h4><blockquote><p>strupr(字符串)</p></blockquote><h3 id="输入一行字符统计其中有多少个单词-单词间用空格分隔开"><a href="#输入一行字符统计其中有多少个单词-单词间用空格分隔开" class="headerlink" title="输入一行字符统计其中有多少个单词,单词间用空格分隔开"></a>输入一行字符统计其中有多少个单词,单词间用空格分隔开</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> <span class="built_in">string</span>[<span class="number">81</span>];</span><br><span class="line">    <span class="keyword">int</span> i, num = <span class="number">0</span>, <span class="keyword">word</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> c;</span><br><span class="line">    gets(<span class="built_in">string</span>);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; (c = <span class="built_in">string</span>[i]) != <span class="string">'\0'</span>; i++)</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">' '</span>)<span class="keyword">word</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">word</span> == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">word</span> = <span class="number">1</span>;</span><br><span class="line">            num++;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"There are %d words in the lines.\n"</span>, num);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="有3个字符串要求找到其中“最大”者"><a href="#有3个字符串要求找到其中“最大”者" class="headerlink" title="有3个字符串要求找到其中“最大”者"></a>有3个字符串要求找到其中“最大”者</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> str[<span class="number">3</span>][<span class="number">20</span>];<span class="comment">//定义二维数组</span></span><br><span class="line">    <span class="keyword">char</span> <span class="built_in">string</span>[<span class="number">20</span>];<span class="comment">//定义一维数组，作为交换字符串时的临时字符数组</span></span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">        gets(str[i]);<span class="comment">//读入3个字符串</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strcmp</span>(str[<span class="number">0</span>], str[<span class="number">1</span>]) &gt; <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">strcpy</span>(<span class="built_in">string</span>, str[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">strcpy</span>(<span class="built_in">string</span>, str[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strcmp</span>(str[<span class="number">2</span>], <span class="built_in">string</span>) &gt; <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">strcpy</span>(<span class="built_in">string</span>, str[<span class="number">2</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\nthe largest string is:\n%s\n"</span>, <span class="built_in">string</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;利用数组处理批量数据&quot;&gt;&lt;a href=&quot;#利用数组处理批量数据&quot; class=&quot;headerlink&quot; title=&quot;利用数组处理批量数据&quot;&gt;&lt;/a&gt;利用数组处理批量数据&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;use-arrays-to-process-bat
      
    
    </summary>
    
    
    
      <category term="C" scheme="https://kayleh.top/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>cycle structure programming</title>
    <link href="https://kayleh.top/cycle-structure-programming/"/>
    <id>https://kayleh.top/cycle-structure-programming/</id>
    <published>2020-10-25T17:16:57.000Z</published>
    <updated>2020-10-25T17:22:51.378Z</updated>
    
    <content type="html"><![CDATA[<h1 id="循环结构体程序设计"><a href="#循环结构体程序设计" class="headerlink" title="循环结构体程序设计"></a>循环结构体程序设计</h1><h3 id="用while语句实现循环"><a href="#用while语句实现循环" class="headerlink" title="用while语句实现循环"></a>用while语句实现循环</h3><blockquote><p>while (表达式) 语句</p></blockquote><h5 id="求1-2-3-…-100"><a href="#求1-2-3-…-100" class="headerlink" title="求1+2+3+….+100;"></a>求1+2+3+….+100;</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= <span class="number">100</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        sum += i;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, sum);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="用do…while语句实现循环"><a href="#用do…while语句实现循环" class="headerlink" title="用do…while语句实现循环"></a>用do…while语句实现循环</h3><blockquote><p>do</p><p>​    语句</p><p>while (表达式);</p></blockquote><p>如:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, i++);</span><br><span class="line">    &#125; <span class="keyword">while</span> (i &lt;= <span class="number">100</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="求1-2-3-…-100-1"><a href="#求1-2-3-…-100-1" class="headerlink" title="求1+2+3+….+100;"></a>求1+2+3+….+100;</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">1</span>,sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        sum += i;</span><br><span class="line">        i++;</span><br><span class="line">    &#125; <span class="keyword">while</span> (i &lt;= <span class="number">100</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, sum);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="while和do…while的区别"><a href="#while和do…while的区别" class="headerlink" title="while和do…while的区别"></a>while和do…while的区别</h4><p>do…while无论如何都会至少执行一次循环体</p><p>while只要不满足就不会执行循环体</p><h3 id="用for语句实现循环"><a href="#用for语句实现循环" class="headerlink" title="用for语句实现循环"></a>用for语句实现循环</h3><blockquote><p>for(循环变量赋初值;循环条件;循环变量增值)</p><p>​    语句</p></blockquote><p>如:</p><p>for(i=1;i&lt;=100;i++)</p><p>​    sum+=i;</p><h3 id="循环的嵌套"><a href="#循环的嵌套" class="headerlink" title="循环的嵌套"></a>循环的嵌套</h3><h3 id="改变循环的执行状态"><a href="#改变循环的执行状态" class="headerlink" title="改变循环的执行状态"></a>改变循环的执行状态</h3><h4 id="用break语句提前终止循环"><a href="#用break语句提前终止循环" class="headerlink" title="用break语句提前终止循环"></a>用break语句提前终止循环</h4><p>在全系1000名学生中举行慈善募捐,当总数达到10万时就结束,统计此时捐款的人数以及平均每人捐款的数目.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SUM 100000</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">float</span> amount, aver, total;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; <span class="number">1000</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"please enter amount:"</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%f"</span>, &amp;amount);</span><br><span class="line">        total += amount;</span><br><span class="line">        <span class="keyword">if</span> (total &gt;= SUM)<span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    aver = total / i;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"num=%d\naver=%10.2f\n"</span>, i, aver);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>break的作用就是使流程跳到循环体之外,接着执行循环体下面的语句.</p><h4 id="用continue语句提前结束本次循环"><a href="#用continue语句提前结束本次循环" class="headerlink" title="用continue语句提前结束本次循环"></a>用continue语句提前结束本次循环</h4><p>有时不希望终止整个循环的操作,而只希望提前结束本次循环,而接着执行下次循环.这时可以用continue语句</p><p>要求输出100~200的不能被3整除的数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">for</span> (n = <span class="number">100</span>; n &lt;= <span class="number">200</span>; n++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (n % <span class="number">3</span> == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\t"</span>, n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;循环结构体程序设计&quot;&gt;&lt;a href=&quot;#循环结构体程序设计&quot; class=&quot;headerlink&quot; title=&quot;循环结构体程序设计&quot;&gt;&lt;/a&gt;循环结构体程序设计&lt;/h1&gt;&lt;h3 id=&quot;用while语句实现循环&quot;&gt;&lt;a href=&quot;#用while语句实现循环&quot;
      
    
    </summary>
    
    
    
      <category term="C" scheme="https://kayleh.top/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>select structure programming</title>
    <link href="https://kayleh.top/select-structure-programming/"/>
    <id>https://kayleh.top/select-structure-programming/</id>
    <published>2020-10-25T17:16:20.000Z</published>
    <updated>2020-10-25T17:22:12.289Z</updated>
    
    <content type="html"><![CDATA[<h1 id="选择结构程序设计"><a href="#选择结构程序设计" class="headerlink" title="选择结构程序设计"></a>选择结构程序设计</h1><h3 id="选择结构和条件判断"><a href="#选择结构和条件判断" class="headerlink" title="选择结构和条件判断"></a>选择结构和条件判断</h3><h3 id="用if语句实现选择结构"><a href="#用if语句实现选择结构" class="headerlink" title="用if语句实现选择结构"></a>用if语句实现选择结构</h3><blockquote><p>if</p></blockquote><h3 id="关系运算符和关系表达式"><a href="#关系运算符和关系表达式" class="headerlink" title="关系运算符和关系表达式"></a>关系运算符和关系表达式</h3><div class="table-container"><table><thead><tr><th style="text-align:left">关系运算符</th><th style="text-align:left">描述</th><th style="text-align:left">实例</th></tr></thead><tbody><tr><td style="text-align:left">==</td><td style="text-align:left">检查两个操作数的值是否相等，如果相等则条件为真。</td><td style="text-align:left">(A == B) 为假。</td></tr><tr><td style="text-align:left">!=</td><td style="text-align:left">检查两个操作数的值是否相等，如果不相等则条件为真。</td><td style="text-align:left">(A != B) 为真。</td></tr><tr><td style="text-align:left">&gt;</td><td style="text-align:left">检查左操作数的值是否大于右操作数的值，如果是则条件为真。</td><td style="text-align:left">(A &gt; B) 为假。</td></tr><tr><td style="text-align:left">&lt;</td><td style="text-align:left">检查左操作数的值是否小于右操作数的值，如果是则条件为真。</td><td style="text-align:left">(A &lt; B) 为真。</td></tr><tr><td style="text-align:left">&gt;=</td><td style="text-align:left">检查左操作数的值是否大于或等于右操作数的值，如果是则条件为真。</td><td style="text-align:left">(A &gt;= B) 为假。</td></tr><tr><td style="text-align:left">&lt;=</td><td style="text-align:left">检查左操作数的值是否小于或等于右操作数的值，如果是则条件为真。</td><td style="text-align:left">(A &lt;= B) 为真。</td></tr></tbody></table></div><h5 id="输入两个实数-按由小到大的顺序输出这两个数"><a href="#输入两个实数-按由小到大的顺序输出这两个数" class="headerlink" title="输入两个实数,按由小到大的顺序输出这两个数"></a>输入两个实数,按由小到大的顺序输出这两个数</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">float</span> a, b, t;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%f,%f"</span>, &amp;a, &amp;b);</span><br><span class="line">    <span class="keyword">if</span> (a &gt; b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//将a和b的值互换</span></span><br><span class="line">        t = a;</span><br><span class="line">        a = b;</span><br><span class="line">        b = t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%5.2f,%5.2f\n"</span>, a, b);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="输入3个数啊a-b-c-要求按由小到大的顺序输出"><a href="#输入3个数啊a-b-c-要求按由小到大的顺序输出" class="headerlink" title="输入3个数啊a,b,c,要求按由小到大的顺序输出."></a>输入3个数啊a,b,c,要求按由小到大的顺序输出.</h5><h3 id="if语句的一般形式"><a href="#if语句的一般形式" class="headerlink" title="if语句的一般形式"></a>if语句的一般形式</h3><blockquote><p>if(表达式) 语句1</p><p>​    [else 语句2]</p><p>……..</p></blockquote><h3 id="逻辑运算符和逻辑表达式"><a href="#逻辑运算符和逻辑表达式" class="headerlink" title="逻辑运算符和逻辑表达式"></a>逻辑运算符和逻辑表达式</h3><div class="table-container"><table><thead><tr><th style="text-align:left">逻辑运算符</th><th style="text-align:left">描述</th><th style="text-align:left">实例</th></tr></thead><tbody><tr><td style="text-align:left">&amp;&amp;</td><td style="text-align:left">称为逻辑与运算符。如果两个操作数都非零，则条件为真。</td><td style="text-align:left">(A &amp;&amp; B) 为假。</td></tr><tr><td style="text-align:left">\</td><td style="text-align:left">\</td><td style="text-align:left"></td><td>称为逻辑或运算符。如果两个操作数中有任意一个非零，则条件为真。</td><td>(A \</td><td>\</td><td>B) 为真。</td></tr><tr><td style="text-align:left">!</td><td style="text-align:left">称为逻辑非运算符。用来逆转操作数的逻辑状态。如果条件为真则逻辑非运算符将使其为假。</td><td style="text-align:left">!(A &amp;&amp; B) 为真。</td></tr></tbody></table></div><h3 id="选择结构的嵌套"><a href="#选择结构的嵌套" class="headerlink" title="选择结构的嵌套"></a>选择结构的嵌套</h3><h3 id="用switch语句实现多分支选择结构"><a href="#用switch语句实现多分支选择结构" class="headerlink" title="用switch语句实现多分支选择结构"></a>用switch语句实现多分支选择结构</h3><p>要求按照考试成绩等级输出百分制分数制,A等为85分以上,B等为70~84分,C等为60~69分,D等为60分以下.成绩的等级由键盘输入.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> grade;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%c"</span>, &amp;grade);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Yours Score:"</span>);</span><br><span class="line">    <span class="keyword">switch</span> (grade)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'A'</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"85~100"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'B'</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"70~84"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'C'</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"60~69"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'D'</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"&lt;60"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"enter data error!"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;选择结构程序设计&quot;&gt;&lt;a href=&quot;#选择结构程序设计&quot; class=&quot;headerlink&quot; title=&quot;选择结构程序设计&quot;&gt;&lt;/a&gt;选择结构程序设计&lt;/h1&gt;&lt;h3 id=&quot;选择结构和条件判断&quot;&gt;&lt;a href=&quot;#选择结构和条件判断&quot; class=&quot;he
      
    
    </summary>
    
    
    
      <category term="C" scheme="https://kayleh.top/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>sequential programming</title>
    <link href="https://kayleh.top/sequential-programming/"/>
    <id>https://kayleh.top/sequential-programming/</id>
    <published>2020-10-25T17:16:00.000Z</published>
    <updated>2020-10-25T17:21:47.252Z</updated>
    
    <content type="html"><![CDATA[<h1 id="顺序程序设计"><a href="#顺序程序设计" class="headerlink" title="顺序程序设计"></a>顺序程序设计</h1><p>求摄氏度</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">float</span> f, c;</span><br><span class="line">    f = <span class="number">64.0</span>;</span><br><span class="line">    c = (<span class="number">5.0</span> / <span class="number">9</span>) * (f - <span class="number">32</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"f=%f\nc=%f\n"</span>, f, c);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><ul><li><p>整型常量</p></li><li><p>实性常量(有小数点)</p><ul><li>十进制小数形式</li><li>指数形式:如12.34e3(e或E之前必须有数字,e或E之后必须为整数)</li></ul></li><li><p>字符常量</p><ul><li>普通字符,用单撇号括起来的一个字符</li></ul><blockquote><p>字符常量存储在计算机存储单元中时,并不是存储字符本身,而是以其代码(一般采用ASCII码)存储的</p></blockquote><ul><li>转义字符</li></ul></li><li><p>字符串常量</p></li></ul><blockquote><p>用双撇号括起来的全部字符,双撇号内可以只有一个字符</p></blockquote><ul><li>符号常量</li></ul><p>用#define指令,指定用一个符号名称代表一个常量</p><blockquote><p>在预编译后,符号变量会全部被置换,</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PI 3.1415   <span class="comment">//注意行末没有分号</span></span></span><br></pre></td></tr></table></figure><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p><code>变量</code>代表一个有名字,具有特定属性的一个存储单元,它用来存放数据,在程序运行期间,变量的值时可以改变的.</p><p>变量必须<strong>先定义,后使用</strong>. 在定义时指定该变量的名字和类型.</p><p>从变量中取值,实际上时通过变量名找到相应的内存地址,从该存储单元中读取数据.</p><h3 id="常变量"><a href="#常变量" class="headerlink" title="常变量"></a>常变量</h3><p>在定义变量时,前面加一个关键字<code>const</code></p><blockquote><p>常变量与处理的异同?</p><p>有类型,占存储单元,不允许改变其值</p><p>常变量时有名字的不变量(便于在程序中被引用),而常量时没有名字的不变量</p></blockquote><h3 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h3><p>一个对象的名字</p><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><blockquote><p>基本类型</p><ul><li>整型类型<ul><li>基本整型(int)</li><li>短整型(short int)</li><li>长整型(long int)</li><li>双长整型(long long int)</li><li>字符型(char)</li><li>布尔型(bool)</li></ul></li><li>浮点类型<ul><li>单精度浮点型(float)</li><li>双精度浮点型(double)</li><li>复数浮点型(float_complex,double_complex,long long_complex)</li></ul></li></ul><p>枚举类型(enum)</p><p>空类型(void)</p><p>派生类型</p><ul><li>指针类型(*)</li><li>数组类型([ ])</li><li>结构体类型(struct)</li><li>共用体类型(union)</li><li>函数类型</li></ul></blockquote><h3 id="整型数据"><a href="#整型数据" class="headerlink" title="整型数据"></a>整型数据</h3><h4 id="整数数据存储空间和值的范围"><a href="#整数数据存储空间和值的范围" class="headerlink" title="整数数据存储空间和值的范围"></a>整数数据存储空间和值的范围</h4><div class="table-container"><table><thead><tr><th style="text-align:center">类型</th><th style="text-align:center">字节数</th><th style="text-align:center">取值范围</th></tr></thead><tbody><tr><td style="text-align:center">int</td><td style="text-align:center">2</td><td style="text-align:center">- 32768 ~ 32767 （5位十进制数）</td></tr><tr><td style="text-align:center">int</td><td style="text-align:center">4</td><td style="text-align:center">- 2147483648 ~ 2147483647 （10位十进制数）</td></tr><tr><td style="text-align:center">unsignde int</td><td style="text-align:center">2</td><td style="text-align:center">0 ~ 65535 （5位十进制数）</td></tr><tr><td style="text-align:center">unsignde int</td><td style="text-align:center">4</td><td style="text-align:center">0 ~ 4294967295 （10位十进制数）</td></tr><tr><td style="text-align:center">short</td><td style="text-align:center">2</td><td style="text-align:center">- 32768 ~ 32767 （5位十进制数）</td></tr><tr><td style="text-align:center">unsigned short</td><td style="text-align:center">2</td><td style="text-align:center">0 ~ 65535 （5位十进制数）</td></tr><tr><td style="text-align:center">long</td><td style="text-align:center">4</td><td style="text-align:center">- 2147483648 ~ 2147483647 （10位十进制数）</td></tr><tr><td style="text-align:center">usigned long</td><td style="text-align:center">4</td><td style="text-align:center">0 ~ 4294967295 （10位十进制数）</td></tr><tr><td style="text-align:center">long long</td><td style="text-align:center">8</td><td style="text-align:center">- 9223372036854775808 ~ 9223372036854775807（20位十进制数）</td></tr><tr><td style="text-align:center">unsigned long long</td><td style="text-align:center">8</td><td style="text-align:center">0 ~ 18446744073709551615 （20位十进制数）</td></tr></tbody></table></div><h3 id="字符型数据"><a href="#字符型数据" class="headerlink" title="字符型数据"></a>字符型数据</h3><h3 id="浮点型数据"><a href="#浮点型数据" class="headerlink" title="浮点型数据"></a>浮点型数据</h3><blockquote><p>c编译系统把浮点型常量都按双精度处理,分配8个字节</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">float</span> a = <span class="number">3.14159f</span>;   <span class="comment">//把此3.14159按单精度浮点常量处理,编译时不出现"警告"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">double</span> a = <span class="number">1.23L</span>;  <span class="comment">//把此,1.23作为long double型处理</span></span><br></pre></td></tr></table></figure></blockquote><h2 id="运算符和表达式"><a href="#运算符和表达式" class="headerlink" title="运算符和表达式"></a>运算符和表达式</h2><div class="table-container"><table><thead><tr><th style="text-align:left">算术运算符</th><th style="text-align:left">描述</th><th style="text-align:left">实例</th></tr></thead><tbody><tr><td style="text-align:left">+</td><td style="text-align:left">把两个操作数相加</td><td style="text-align:left">A + B 将得到 30</td></tr><tr><td style="text-align:left">-</td><td style="text-align:left">从第一个操作数中减去第二个操作数</td><td style="text-align:left">A - B 将得到 -10</td></tr><tr><td style="text-align:left">*</td><td style="text-align:left">把两个操作数相乘</td><td style="text-align:left">A * B 将得到 200</td></tr><tr><td style="text-align:left">/</td><td style="text-align:left">分子除以分母</td><td style="text-align:left">B / A 将得到 2</td></tr><tr><td style="text-align:left">%</td><td style="text-align:left">取模运算符，整除后的余数</td><td style="text-align:left">B % A 将得到 0</td></tr><tr><td style="text-align:left">++</td><td style="text-align:left">自增运算符，整数值增加 1</td><td style="text-align:left">A++ 将得到 11</td></tr><tr><td style="text-align:left">—</td><td style="text-align:left">自减运算符，整数值减少 1</td><td style="text-align:left">A— 将得到 9</td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th style="text-align:left">关系运算符</th><th style="text-align:left">描述</th><th style="text-align:left">实例</th></tr></thead><tbody><tr><td style="text-align:left">==</td><td style="text-align:left">检查两个操作数的值是否相等，如果相等则条件为真。</td><td style="text-align:left">(A == B) 为假。</td></tr><tr><td style="text-align:left">!=</td><td style="text-align:left">检查两个操作数的值是否相等，如果不相等则条件为真。</td><td style="text-align:left">(A != B) 为真。</td></tr><tr><td style="text-align:left">&gt;</td><td style="text-align:left">检查左操作数的值是否大于右操作数的值，如果是则条件为真。</td><td style="text-align:left">(A &gt; B) 为假。</td></tr><tr><td style="text-align:left">&lt;</td><td style="text-align:left">检查左操作数的值是否小于右操作数的值，如果是则条件为真。</td><td style="text-align:left">(A &lt; B) 为真。</td></tr><tr><td style="text-align:left">&gt;=</td><td style="text-align:left">检查左操作数的值是否大于或等于右操作数的值，如果是则条件为真。</td><td style="text-align:left">(A &gt;= B) 为假。</td></tr><tr><td style="text-align:left">&lt;=</td><td style="text-align:left">检查左操作数的值是否小于或等于右操作数的值，如果是则条件为真。</td><td style="text-align:left">(A &lt;= B) 为真。</td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th style="text-align:left">逻辑运算符</th><th style="text-align:left">描述</th><th style="text-align:left">实例</th></tr></thead><tbody><tr><td style="text-align:left">&amp;&amp;</td><td style="text-align:left">称为逻辑与运算符。如果两个操作数都非零，则条件为真。</td><td style="text-align:left">(A &amp;&amp; B) 为假。</td></tr><tr><td style="text-align:left">\</td><td style="text-align:left">\</td><td style="text-align:left"></td><td>称为逻辑或运算符。如果两个操作数中有任意一个非零，则条件为真。</td><td>(A \</td><td>\</td><td>B) 为真。</td></tr><tr><td style="text-align:left">!</td><td style="text-align:left">称为逻辑非运算符。用来逆转操作数的逻辑状态。如果条件为真则逻辑非运算符将使其为假。</td><td style="text-align:left">!(A &amp;&amp; B) 为真。</td></tr></tbody></table></div><p><strong>位运算符</strong></p><p>位运算符作用于位，并逐位执行操作。&amp;、 | 和 ^ 的真值表如下所示：</p><div class="table-container"><table><thead><tr><th style="text-align:left">p</th><th style="text-align:left">q</th><th style="text-align:left">p &amp; q</th><th style="text-align:left">p \</th><th style="text-align:left">q</th><th>p ^ q</th></tr></thead><tbody><tr><td style="text-align:left">0</td><td style="text-align:left">0</td><td style="text-align:left">0</td><td style="text-align:left">0</td><td style="text-align:left">0</td></tr><tr><td style="text-align:left">0</td><td style="text-align:left">1</td><td style="text-align:left">0</td><td style="text-align:left">1</td><td style="text-align:left">1</td></tr><tr><td style="text-align:left">1</td><td style="text-align:left">1</td><td style="text-align:left">1</td><td style="text-align:left">1</td><td style="text-align:left">0</td></tr><tr><td style="text-align:left">1</td><td style="text-align:left">0</td><td style="text-align:left">0</td><td style="text-align:left">1</td><td style="text-align:left">1</td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th style="text-align:left">位运算符</th><th style="text-align:left">描述</th><th style="text-align:left">实例</th></tr></thead><tbody><tr><td style="text-align:left">&amp;</td><td style="text-align:left">按位与操作，按二进制位进行”与”运算。运算规则：<code>0&amp;0=0;    0&amp;1=0;     1&amp;0=0;      1&amp;1=1;</code></td><td style="text-align:left">(A &amp; B) 将得到 12，即为 0000 1100</td></tr><tr><td style="text-align:left">\</td><td style="text-align:left"></td><td style="text-align:left">按位或运算符，按二进制位进行”或”运算。运算规则：`0</td><td>0=0;    0</td><td>1=1;    1</td><td>0=1;     1</td><td>1=1;`</td><td>(A \</td><td>B) 将得到 61，即为 0011 1101</td></tr><tr><td style="text-align:left">^</td><td style="text-align:left">异或运算符，按二进制位进行”异或”运算。运算规则：<code>0^0=0;    0^1=1;    1^0=1;   1^1=0;</code></td><td style="text-align:left">(A ^ B) 将得到 49，即为 0011 0001</td></tr><tr><td style="text-align:left">~</td><td style="text-align:left">取反运算符，按二进制位进行”取反”运算。运算规则：<code>~1=0;    ~0=1;</code></td><td style="text-align:left">(~A ) 将得到 -61，即为 1100 0011，一个有符号二进制数的补码形式。</td></tr><tr><td style="text-align:left">&lt;&lt;</td><td style="text-align:left">二进制左移运算符。将一个运算对象的各二进制位全部左移若干位（左边的二进制位丢弃，右边补0）。</td><td style="text-align:left">A &lt;&lt; 2 将得到 240，即为 1111 0000</td></tr><tr><td style="text-align:left">&gt;&gt;</td><td style="text-align:left">二进制右移运算符。将一个数的各二进制位全部右移若干位，正数左补0，负数左补1，右边丢弃。</td><td style="text-align:left">A &gt;&gt; 2 将得到 15，即为 0000 1111</td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th style="text-align:left">赋值运算符</th><th style="text-align:left">描述</th><th style="text-align:left">实例</th></tr></thead><tbody><tr><td style="text-align:left">=</td><td style="text-align:left">简单的赋值运算符，把右边操作数的值赋给左边操作数</td><td style="text-align:left">C = A + B 将把 A + B 的值赋给 C</td></tr><tr><td style="text-align:left">+=</td><td style="text-align:left">加且赋值运算符，把右边操作数加上左边操作数的结果赋值给左边操作数</td><td style="text-align:left">C += A 相当于 C = C + A</td></tr><tr><td style="text-align:left">-=</td><td style="text-align:left">减且赋值运算符，把左边操作数减去右边操作数的结果赋值给左边操作数</td><td style="text-align:left">C -= A 相当于 C = C - A</td></tr><tr><td style="text-align:left">*=</td><td style="text-align:left">乘且赋值运算符，把右边操作数乘以左边操作数的结果赋值给左边操作数</td><td style="text-align:left">C <em>= A 相当于 C = C </em> A</td></tr><tr><td style="text-align:left">/=</td><td style="text-align:left">除且赋值运算符，把左边操作数除以右边操作数的结果赋值给左边操作数</td><td style="text-align:left">C /= A 相当于 C = C / A</td></tr><tr><td style="text-align:left">%=</td><td style="text-align:left">求模且赋值运算符，求两个操作数的模赋值给左边操作数</td><td style="text-align:left">C %= A 相当于 C = C % A</td></tr><tr><td style="text-align:left">&lt;&lt;=</td><td style="text-align:left">左移且赋值运算符</td><td style="text-align:left">C &lt;&lt;= 2 等同于 C = C &lt;&lt; 2</td></tr><tr><td style="text-align:left">&gt;&gt;=</td><td style="text-align:left">右移且赋值运算符</td><td style="text-align:left">C &gt;&gt;= 2 等同于 C = C &gt;&gt; 2</td></tr><tr><td style="text-align:left">&amp;=</td><td style="text-align:left">按位与且赋值运算符</td><td style="text-align:left">C &amp;= 2 等同于 C = C &amp; 2</td></tr><tr><td style="text-align:left">^=</td><td style="text-align:left">按位异或且赋值运算符</td><td style="text-align:left">C ^= 2 等同于 C = C ^ 2</td></tr><tr><td style="text-align:left">\</td><td style="text-align:left">=</td><td style="text-align:left">按位或且赋值运算符</td><td>C \</td><td>= 2 等同于 C = C \</td><td>2</td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th style="text-align:left">杂项运算符</th><th style="text-align:left">描述</th><th style="text-align:left">实例</th></tr></thead><tbody><tr><td style="text-align:left">sizeof()</td><td style="text-align:left">返回变量的大小。</td><td style="text-align:left">sizeof(a) 将返回 4，其中 a 是整数。</td></tr><tr><td style="text-align:left">&amp;</td><td style="text-align:left">返回变量的地址。</td><td style="text-align:left">&a; 将给出变量的实际地址。</td></tr><tr><td style="text-align:left">*</td><td style="text-align:left">指向一个变量。</td><td style="text-align:left">*a; 将指向一个变量。</td></tr><tr><td style="text-align:left">? :</td><td style="text-align:left">条件表达式</td><td style="text-align:left">如果条件为真 ? 则值为 X : 否则值为 Y</td></tr></tbody></table></div><h2 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h2><h3 id="赋值语句"><a href="#赋值语句" class="headerlink" title="赋值语句"></a>赋值语句</h3><p>赋值运算符</p><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x3D;</span><br></pre></td></tr></table></figure></blockquote><p>复合的赋值运算符</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a+=<span class="number">3</span>等价于a=a+<span class="number">3</span>;</span><br><span class="line">x*=y+<span class="number">8</span>等价于x=x*(y+<span class="number">8</span>);</span><br><span class="line">x%=<span class="number">3</span>等价于x=x%<span class="number">3</span>;</span><br></pre></td></tr></table></figure><p>赋值表达式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">变量赋值运算符表达式</span><br></pre></td></tr></table></figure><p>赋值过程中的类型转换</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1将浮点型数据(包括单,双精度)赋给整型变量时,先对浮点数取整,即舍弃小数部分,然后赋予整型变量;</span><br><span class="line">2将整型数据赋值给单,双精度变量时,数值不变,但以浮点数形式存储到变量中.</span><br><span class="line">3将一个double型赋给一float变量时,先将双精度数转换为单精度,即只取6~7位有效数字,存储到float型变量的4个字节中.</span><br><span class="line">4字符型数据赋给整型变量时,将字符的ASCII代码赋给整型变量</span><br><span class="line">5将一个占字节多的整型数据赋给一个占字节少的整型变量或字符变量(例如把占4个字节的int型数据赋给占2个字节的short变量或占1个字节的char变量)时,只将其低字节原封不动地送到被赋值的变量(即发生&quot;截断&quot;),如:</span><br><span class="line">int i&#x3D;289;</span><br><span class="line">char c &#x3D;&#39;a&#39;;</span><br><span class="line">c&#x3D;i;</span><br></pre></td></tr></table></figure><h2 id="数据的输入输出"><a href="#数据的输入输出" class="headerlink" title="数据的输入输出"></a>数据的输入输出</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>();</span><br><span class="line"><span class="built_in">scanf</span>();</span><br><span class="line"><span class="built_in">putchar</span>();</span><br><span class="line">getchar();</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;顺序程序设计&quot;&gt;&lt;a href=&quot;#顺序程序设计&quot; class=&quot;headerlink&quot; title=&quot;顺序程序设计&quot;&gt;&lt;/a&gt;顺序程序设计&lt;/h1&gt;&lt;p&gt;求摄氏度&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cl
      
    
    </summary>
    
    
    
      <category term="C" scheme="https://kayleh.top/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C algorithm</title>
    <link href="https://kayleh.top/C-algorithm/"/>
    <id>https://kayleh.top/C-algorithm/</id>
    <published>2020-10-25T17:15:22.000Z</published>
    <updated>2020-10-25T17:21:11.014Z</updated>
    
    <content type="html"><![CDATA[<h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><h4 id="1-什么是算法"><a href="#1-什么是算法" class="headerlink" title="1.什么是算法?"></a>1.什么是算法?</h4><p>算法（Algorithm）是指解题方案的准确而完整的描述，是一系列解决问题的清晰指令，算法代表着用系统的方法描述解决问题的策略机制。也就是说，能够对一定规范的输入，在有限时间内获得所要求的输出。 </p><h4 id="2-什么叫结构化算法-为什么要提倡结构化算法"><a href="#2-什么叫结构化算法-为什么要提倡结构化算法" class="headerlink" title="2.什么叫结构化算法?为什么要提倡结构化算法?"></a>2.什么叫结构化算法?为什么要提倡结构化算法?</h4><p>结构化算法是由一些基本结构顺序组成的，就是把一个大的功能的实现分隔为许多个小功能的实现。 </p><p>自顶向下,逐步细化,模块化设计,结构化编码</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;算法&quot;&gt;&lt;a href=&quot;#算法&quot; class=&quot;headerlink&quot; title=&quot;算法&quot;&gt;&lt;/a&gt;算法&lt;/h2&gt;&lt;h4 id=&quot;1-什么是算法&quot;&gt;&lt;a href=&quot;#1-什么是算法&quot; class=&quot;headerlink&quot; title=&quot;1.什么是算法?&quot;&gt;&lt;
      
    
    </summary>
    
    
    
      <category term="C" scheme="https://kayleh.top/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C programming</title>
    <link href="https://kayleh.top/C-programming/"/>
    <id>https://kayleh.top/C-programming/</id>
    <published>2020-10-25T17:14:40.000Z</published>
    <updated>2020-10-25T17:19:27.765Z</updated>
    
    <content type="html"><![CDATA[<h1 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h1><h4 id="1-什么是程序-什么是程序设计"><a href="#1-什么是程序-什么是程序设计" class="headerlink" title="1.什么是程序?什么是程序设计?"></a>1.什么是程序?什么是程序设计?</h4><p><code>程序</code>是一组计算机能识别和执行的指令，运行于电子计算机上，满足人们某种需求的信息化工具。<br><code>程序设计</code>（programming），是给出解决特定问题程序的过程，软件开发过程中的重要步骤。程序设计往往以某种程序设计语言为工具，给出这种语言下的程序。程序设计过程一般包括分析、设计、编码、测试、调试等不同阶段。</p><h4 id="2-为什么需要计算机语言-高级语言有哪些特点"><a href="#2-为什么需要计算机语言-高级语言有哪些特点" class="headerlink" title="2.为什么需要计算机语言?高级语言有哪些特点?"></a>2.为什么需要计算机语言?高级语言有哪些特点?</h4><p>人和计算机交流信息需要解决语言问题,需要创造一种计算机和人都能识别的语言.</p><p>高级语言是从人类的逻辑思维角度出发的计算机语言，抽象程度大大提高，需要经过编译成特定机器上的目标代码才能执行，一条高级语言的语句往往需要若干条机器指令来完成。高级语言独立于机器的特性是靠编译器为不同机器生成不同的目标代码(或机器指令)来实现的。</p><h4 id="3-正确解释一下名词以及含义"><a href="#3-正确解释一下名词以及含义" class="headerlink" title="3.正确解释一下名词以及含义:"></a>3.正确解释一下名词以及含义:</h4><h5 id="1-源程序-目标程序-可执行程序。"><a href="#1-源程序-目标程序-可执行程序。" class="headerlink" title="(1)源程序,目标程序,可执行程序。"></a>(1)源程序,目标程序,可执行程序。</h5><p> 源程序：指未编译的按照一定的程序设计语言规范书写的文本文件，是一系列人类可读的计算机语言指令</p><p> 目标程序：为源程序经编译可直接被计算机运行的机器码集合，在计算机文件上以.obj作扩展名</p><p> 可执行程序：将所有编译后得到的目标模块连接装配起来，在与函数库相连接成为一个整体，生成一个可供计算机执行的目标程序，成为可执行程序</p><h5 id="2-程序编辑-程序编译-程序连接。"><a href="#2-程序编辑-程序编译-程序连接。" class="headerlink" title="(2)程序编辑,程序编译,程序连接。"></a>(2)程序编辑,程序编译,程序连接。</h5><p>程序编辑：上机输入或者编辑源程序。</p><p>程序编译：</p><ul><li>先用C提供的“预处理器”，对程序中的预处理指令进行编译预处理</li><li>对源程序进行语法检查， 判断是否有语法错误，直到没有语法错误未知</li><li>编译程序自动把源程序转换为二进制形式的目标程序</li></ul><p>程序连接：将所有编译后得到的目标模块连接装配起来，在与函数库相连接成为一个整体的过程称之为程序连接</p><h5 id="3-程序-程序模块-程序文件。"><a href="#3-程序-程序模块-程序文件。" class="headerlink" title="(3)程序,程序模块,程序文件。"></a>(3)程序,程序模块,程序文件。</h5><p>程序：一组计算机能识别和执行的指令，运行于电子计算机上，满足人们某种需求的信息化工具</p><p>程序模块：可由汇编程序、编译程序、装入程序或翻译程序作为一个整体来处理的一级独立的、可识别的程序指令</p><p>程序文件：程序的文件称为程序文件，程序文件存储的是程序，包括源程序和可执行程序</p><h5 id="4-函数-主函数，被调用函数-库函数。"><a href="#4-函数-主函数，被调用函数-库函数。" class="headerlink" title="(4)函数,主函数，被调用函数,库函数。"></a>(4)函数,主函数，被调用函数,库函数。</h5><p>函数：将一段经常需要使用的代码封装起来，在需要使用时可以直接调用，来完成一定功能</p><p>主函数：又称main函数，是程序执行的起点</p><p>被调用函数：由一个函数调用另一个函数，则称第二个函数为被调用函数</p><p>库函数：一般是指编译器提供的可在c源程序中调用的函数。可分为两类，一类是c语言标准规定的库函数，一类是</p><p> 编译器特定的库函数</p><h5 id="5-程序调试-程序测试。"><a href="#5-程序调试-程序测试。" class="headerlink" title="(5)程序调试,程序测试。"></a>(5)程序调试,程序测试。</h5><p>程序调试：是将编制的程序投入实际运行前，用手工或编译程序等方法进行测试，修正语法错误和逻辑错误的过程</p><p>程序测试：是指对一个完成了全部或部分功能、模块的计算机程序在正式使用前的检测，以确保该程序能按预定的</p><p> 方式正确地运行</p><h4 id="4-编写一个c程序-运行时输出"><a href="#4-编写一个c程序-运行时输出" class="headerlink" title="4.编写一个c程序,运行时输出"></a>4.编写一个c程序,运行时输出</h4><p>Hello World!</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Hello World!"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-编写一个c程序-运行时输出一下图形"><a href="#5-编写一个c程序-运行时输出一下图形" class="headerlink" title="5.编写一个c程序,运行时输出一下图形"></a>5.编写一个c程序,运行时输出一下图形</h4><p>**<em>*</em></p><p>​    **<em>*</em></p><p>​        **<em>*</em></p><p>​            **<em>*</em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"*****\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"    *****\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"        *****\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"            *****\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-编写一个c程序-运行时输入a-b-c三个值-输出其中值最大值"><a href="#6-编写一个c程序-运行时输入a-b-c三个值-输出其中值最大值" class="headerlink" title="6.编写一个c程序,运行时输入a,b,c三个值,输出其中值最大值"></a>6.编写一个c程序,运行时输入a,b,c三个值,输出其中值最大值</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a, b, c, <span class="built_in">max</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"input 3 number:"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;a, &amp;b, &amp;c);</span><br><span class="line">    <span class="built_in">max</span> = a;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">max</span> &lt; b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">max</span> = b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">max</span> &lt; c)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">max</span> = c;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"max:%d"</span>, <span class="built_in">max</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;程序&quot;&gt;&lt;a href=&quot;#程序&quot; class=&quot;headerlink&quot; title=&quot;程序&quot;&gt;&lt;/a&gt;程序&lt;/h1&gt;&lt;h4 id=&quot;1-什么是程序-什么是程序设计&quot;&gt;&lt;a href=&quot;#1-什么是程序-什么是程序设计&quot; class=&quot;headerlink&quot; ti
      
    
    </summary>
    
    
    
      <category term="C" scheme="https://kayleh.top/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu.deb安装包</title>
    <link href="https://kayleh.top/deb/"/>
    <id>https://kayleh.top/deb/</id>
    <published>2020-10-06T13:16:50.000Z</published>
    <updated>2020-10-07T05:43:18.612Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dkpg -i xxxx.deb</span><br></pre></td></tr></table></figure><p>需要超级用户权限</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dkpg -i xxxx.deb</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span cla
      
    
    </summary>
    
    
    
      <category term="linux" scheme="https://kayleh.top/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>微分方程</title>
    <link href="https://kayleh.top/differential-equation/"/>
    <id>https://kayleh.top/differential-equation/</id>
    <published>2020-10-05T14:55:36.000Z</published>
    <updated>2020-10-09T11:35:25.830Z</updated>
    
    <content type="html"><![CDATA[<h1 id="微分方程"><a href="#微分方程" class="headerlink" title="微分方程"></a>微分方程</h1><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/kayleh/cdn2/微分方程/1601913199716.png" alt="1601913199716"/></div><span class="image-caption">1601913199716</span></div><h4 id="定义："><a href="#定义：" class="headerlink" title="定义："></a>定义：</h4><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/kayleh/cdn2/微分方程/1601913450223.png" alt="1601913450223"/></div><span class="image-caption">1601913450223</span></div><h4 id="微分方程的阶："><a href="#微分方程的阶：" class="headerlink" title="微分方程的阶："></a>微分方程的阶：</h4><p>导数的最高阶数</p><p>二阶：</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/kayleh/cdn2/微分方程/1601913485819.png" alt="1601913485819" style="zoom:50%;"/></div><span class="image-caption">1601913485819" style="zoom:50%;</span></div><h4 id="通解"><a href="#通解" class="headerlink" title="通解"></a>通解</h4><p>独立常数的个数=阶数，比如二阶的最终的解里有c1，c2两个独立的常数</p><h4 id="特解"><a href="#特解" class="headerlink" title="特解"></a>特解</h4><p>如果常数都确定的解叫特解</p><h4 id="初始条件"><a href="#初始条件" class="headerlink" title="初始条件"></a>初始条件</h4><h5 id="解题过程"><a href="#解题过程" class="headerlink" title="解题过程"></a>解题过程</h5><p>一般把初始条件代入到通解里，确定常数的值，得到的就是特解</p><h1 id="一阶微分方程"><a href="#一阶微分方程" class="headerlink" title="一阶微分方程"></a>一阶微分方程</h1><h3 id="可分离变量"><a href="#可分离变量" class="headerlink" title="可分离变量"></a>可分离变量</h3><blockquote><p>分离变量，同时积分</p></blockquote><h4 id="例题："><a href="#例题：" class="headerlink" title="例题："></a>例题：</h4><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/kayleh/cdn2/微分方程/1601960660685.png" alt="1601960660685" style="zoom:50%;"/></div><span class="image-caption">1601960660685" style="zoom:50%;</span></div><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/kayleh/cdn2/微分方程/1601974381957.png" alt="1601974381957"/></div><span class="image-caption">1601974381957</span></div><h3 id="齐次方程"><a href="#齐次方程" class="headerlink" title="齐次方程"></a>齐次方程</h3><p>dy/dx=f(y/x)</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/kayleh/cdn2/微分方程/1601974805152.png" alt="1601974805152"/></div><span class="image-caption">1601974805152</span></div><h4 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h4><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/kayleh/cdn2/微分方程/1601975659287.png" alt="1601975659287"/></div><span class="image-caption">1601975659287</span></div><p>​                                                                                         ↓</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/kayleh/cdn2/微分方程/1601975852227.png" alt="1601975852227"/></div><span class="image-caption">1601975852227</span></div><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/kayleh/cdn2/微分方程/1601976016219.png" alt="1601976016219" style="zoom:50%;"/></div><span class="image-caption">1601976016219" style="zoom:50%;</span></div><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/kayleh/cdn2/微分方程/1601976189378.png" alt="1601976189378"/></div><span class="image-caption">1601976189378</span></div><h3 id="一阶线性方程"><a href="#一阶线性方程" class="headerlink" title="一阶线性方程"></a>一阶线性方程</h3><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/kayleh/cdn2/微分方程/1601976400936.png" alt="1601976400936"/></div><span class="image-caption">1601976400936</span></div><p>一阶线性齐次微分方程：</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/kayleh/cdn2/微分方程/1601976462021.png" alt="1601976462021"/></div><span class="image-caption">1601976462021</span></div><p>齐次方程的解<img src="https://cdn.jsdelivr.net/gh/kayleh/cdn2/微分方程/1601976680970.png" alt="1601976680970"></p><p>非齐次方程的解：</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/kayleh/cdn2/微分方程/1601977077686.png" alt="1601977077686"/></div><span class="image-caption">1601977077686</span></div><h4 id="例题-1"><a href="#例题-1" class="headerlink" title="例题"></a>例题</h4><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/kayleh/cdn2/微分方程/1601977447388.png" alt="1601977447388"/></div><span class="image-caption">1601977447388</span></div><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/kayleh/cdn2/微分方程/1601978340530.png" alt="1601978340530"/></div><span class="image-caption">1601978340530</span></div><h3 id="伯努利方程"><a href="#伯努利方程" class="headerlink" title="#伯努利方程"></a>#伯努利方程</h3><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/kayleh/cdn2/微分方程/1601978484353.png" alt="1601978484353"/></div><span class="image-caption">1601978484353</span></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;微分方程&quot;&gt;&lt;a href=&quot;#微分方程&quot; class=&quot;headerlink&quot; title=&quot;微分方程&quot;&gt;&lt;/a&gt;微分方程&lt;/h1&gt;&lt;div class=&quot;img-wrap&quot;&gt;&lt;div class=&quot;img-bg&quot;&gt;&lt;img class=&quot;img&quot; src=&quot;h
      
    
    </summary>
    
    
    
      <category term="math" scheme="https://kayleh.top/tags/math/"/>
    
  </entry>
  
  <entry>
    <title>级数</title>
    <link href="https://kayleh.top/series/"/>
    <id>https://kayleh.top/series/</id>
    <published>2020-10-04T05:24:36.000Z</published>
    <updated>2020-10-05T15:01:54.710Z</updated>
    
    <content type="html"><![CDATA[<h2 id="无穷级数"><a href="#无穷级数" class="headerlink" title="无穷级数"></a>无穷级数</h2><p>等比数列</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/kayleh/cdn/img/级数/1601790764370.png" alt="1601790764370"/></div><span class="image-caption">1601790764370</span></div><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/kayleh/cdn/img/级数/1601790914893.png" alt="1601790914893"/></div><span class="image-caption">1601790914893</span></div><p>例题</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/kayleh/cdn/img/级数/1601791340789.png" alt="1601791340789"/></div><span class="image-caption">1601791340789</span></div><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/kayleh/cdn/img/级数/1601791680034.png" alt="1601791680034"/></div><span class="image-caption">1601791680034</span></div><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/kayleh/cdn/img/级数/1601792414977.png" alt="1601792414977"/></div><span class="image-caption">1601792414977</span></div><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/kayleh/cdn/img/级数/1601793241870.png" alt="1601793241870"/></div><span class="image-caption">1601793241870</span></div><h5 id="调和级数"><a href="#调和级数" class="headerlink" title="调和级数"></a>调和级数</h5><blockquote><p>调和级数是发散的</p></blockquote><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/kayleh/cdn/img/级数/1601793542661.png" alt="1601793542661"/></div><span class="image-caption">1601793542661</span></div><h4 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h4><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/kayleh/cdn/img/级数/1601793732086.png" alt="1601793732086"/></div><span class="image-caption">1601793732086</span></div><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/kayleh/cdn/img/级数/1601793936645.png" alt="1601793936645"/></div><span class="image-caption">1601793936645</span></div><blockquote><p>相反则未必</p></blockquote><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/kayleh/cdn/img/级数/1601794096106.png" alt="1601794096106"/></div><span class="image-caption">1601794096106</span></div><p>敛散性不变</p><p>如果级数收敛，通项是趋于0的。</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/kayleh/cdn/img/级数/1601794310032.png" alt="1601794310032"/></div><span class="image-caption">1601794310032</span></div><ul><li><p>通项趋于0，未必是收敛的，</p></li><li><p>通项不趋于0，一定是不收敛的。</p></li></ul><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/kayleh/cdn/img/级数/1601794730888.png" alt="1601794730888"/></div><span class="image-caption">1601794730888</span></div><p>例题：</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/kayleh/cdn/img/级数/1601795245209.png" alt="1601795245209"/></div><span class="image-caption">1601795245209</span></div><p>通项不趋于0必发散</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/kayleh/cdn/img/级数/1601795312952.png" alt="1601795312952"/></div><span class="image-caption">1601795312952</span></div><p>去掉了第一项，敛散性不变</p><h2 id="正项级数"><a href="#正项级数" class="headerlink" title="正项级数"></a>正项级数</h2><p>大收必小收 小散必大散</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/kayleh/cdn/img/级数/1601804217057.png" alt="1601804217057"/></div><span class="image-caption">1601804217057</span></div><p>例题</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/kayleh/cdn/img/级数/1601804688577.png" alt="1601804688577"/></div><span class="image-caption">1601804688577</span></div><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/kayleh/cdn/img/级数/1601805099865.png" alt="1601805099865"/></div><span class="image-caption">1601805099865</span></div><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/kayleh/cdn/img/级数/1601805233170.png" alt="1601805233170"/></div><span class="image-caption">1601805233170</span></div><p>公式</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/kayleh/cdn/img/级数/1601825215690.png" alt="1601825215690"/></div><span class="image-caption">1601825215690</span></div><h4 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h4><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/kayleh/cdn/img/级数/1601825904805.png" alt="1601825904805"/></div><span class="image-caption">1601825904805</span></div><blockquote><p>等于1说明分子分母有相同的敛散性,1/n是发散的</p></blockquote><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/kayleh/cdn/img/级数/1601826789198.png" alt="1601826789198"/></div><span class="image-caption">1601826789198</span></div><h3 id="达朗贝尔判别法"><a href="#达朗贝尔判别法" class="headerlink" title="达朗贝尔判别法"></a>达朗贝尔判别法</h3><p>1</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/kayleh/cdn/img/级数/1601827007419.png" alt="1601827007419"/></div><span class="image-caption">1601827007419</span></div><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/kayleh/cdn/img/级数/1601827327209.png" alt="1601827327209"/></div><span class="image-caption">1601827327209</span></div><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/kayleh/cdn/img/级数/1601827440373.png" alt="1601827440373"/></div><span class="image-caption">1601827440373</span></div><p><img src="https://cdn.jsdelivr.net/gh/kayleh/cdn/img/级数/1601828186038.png" alt="1601828186038">2</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/kayleh/cdn/img/级数/1601828466075.png" alt="1601828466075"/></div><span class="image-caption">1601828466075</span></div><p>解题过程：</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/kayleh/cdn/img/级数/1601828887182.png" alt="1601828887182"/></div><span class="image-caption">1601828887182</span></div><h2 id="任意项级数"><a href="#任意项级数" class="headerlink" title="任意项级数"></a>任意项级数</h2><p>和调和级数相比，这个是收敛的(“交错调和级数”)</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/kayleh/cdn/img/级数/1601829465113.png" alt="1601829465113"/></div><span class="image-caption">1601829465113</span></div><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/kayleh/cdn/img/级数/1601829594795.png" alt="1601829594795"/></div><span class="image-caption">1601829594795</span></div><p>例题：</p><p>证明$U^n$是递减的</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/kayleh/cdn/img/级数/1601871650150.png" alt="1601871650150"/></div><span class="image-caption">1601871650150</span></div><h2 id="绝对值级数"><a href="#绝对值级数" class="headerlink" title="绝对值级数"></a>绝对值级数</h2><h4 id="定理："><a href="#定理：" class="headerlink" title="定理："></a>定理：</h4><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/kayleh/cdn/img/级数/1601872096360.png" alt="1601872096360"/></div><span class="image-caption">1601872096360</span></div><h4 id="绝对收敛"><a href="#绝对收敛" class="headerlink" title="绝对收敛"></a>绝对收敛</h4><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/kayleh/cdn/img/级数/1601872183627.png" alt="1601872183627"/></div><span class="image-caption">1601872183627</span></div><ul><li>例题：</li></ul><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/kayleh/cdn/img/级数/1601872339329.png" alt="1601872339329" style="zoom:50%;"/></div><span class="image-caption">1601872339329" style="zoom:50%;</span></div><blockquote><p>先取绝对值，p级数是收敛的，这个就是绝对收敛的。</p></blockquote><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/kayleh/cdn/img/级数/1601872386548.png" alt="1601872386548" style="zoom:50%;"/></div><span class="image-caption">1601872386548" style="zoom:50%;</span></div><blockquote><p>取绝对值，是调和级数发散的，但是原来的是交错调和级数是收敛的，所以是条件收敛</p></blockquote><h4 id="定理"><a href="#定理" class="headerlink" title="定理"></a>定理</h4><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/kayleh/cdn/img/级数/1601872739222.png" alt="1601872739222"/></div><span class="image-caption">1601872739222</span></div><p>例题：</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/kayleh/cdn/img/级数/1601872820329.png" alt="1601872820329"/></div><span class="image-caption">1601872820329</span></div><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/kayleh/cdn/img/级数/1601872908387.png" alt="1601872908387"/></div><span class="image-caption">1601872908387</span></div><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/kayleh/cdn/img/级数/1601873036417.png" alt="1601873036417"/></div><span class="image-caption">1601873036417</span></div><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/kayleh/cdn/img/级数/1601873460780.png" alt="1601873460780"/></div><span class="image-caption">1601873460780</span></div><h4 id="例题："><a href="#例题：" class="headerlink" title="例题："></a>例题：</h4><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/kayleh/cdn/img/级数/1601908365663.png" alt="1601908365663"/></div><span class="image-caption">1601908365663</span></div><h4 id="性质："><a href="#性质：" class="headerlink" title="性质："></a>性质：</h4><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/kayleh/cdn/img/级数/1601909335329.png" alt="1601909335329"/></div><span class="image-caption">1601909335329</span></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;无穷级数&quot;&gt;&lt;a href=&quot;#无穷级数&quot; class=&quot;headerlink&quot; title=&quot;无穷级数&quot;&gt;&lt;/a&gt;无穷级数&lt;/h2&gt;&lt;p&gt;等比数列&lt;/p&gt;
&lt;div class=&quot;img-wrap&quot;&gt;&lt;div class=&quot;img-bg&quot;&gt;&lt;img class=
      
    
    </summary>
    
    
    
      <category term="math" scheme="https://kayleh.top/tags/math/"/>
    
  </entry>
  
  <entry>
    <title>二重积分</title>
    <link href="https://kayleh.top/double-integral/"/>
    <id>https://kayleh.top/double-integral/</id>
    <published>2020-10-02T06:43:15.000Z</published>
    <updated>2020-10-05T15:03:39.746Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>体积</p><h3 id="几何含义"><a href="#几何含义" class="headerlink" title="几何含义"></a>几何含义</h3><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/kayleh/cdn/img/二重积分/1601621561773.png" alt="1601621561773"/></div><span class="image-caption">1601621561773</span></div><h3 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h3><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/kayleh/cdn/img/二重积分/1601621872570.png" alt="1601621872570"/></div><span class="image-caption">1601621872570</span></div><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/kayleh/cdn/img/二重积分/1601622019111.png" alt="1601622019111"/></div><span class="image-caption">1601622019111</span></div><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/kayleh/cdn/img/二重积分/1601622207780.png" alt="1601622207780"/></div><span class="image-caption">1601622207780</span></div><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/kayleh/cdn/img/二重积分/1601622538512.png" alt="1601622538512"/></div><span class="image-caption">1601622538512</span></div><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/kayleh/cdn/img/二重积分/1601622624030.png" alt="1601622624030"/></div><span class="image-caption">1601622624030</span></div><h2 id="直角坐标系的计算"><a href="#直角坐标系的计算" class="headerlink" title="直角坐标系的计算"></a>直角坐标系的计算</h2><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/kayleh/cdn/img/二重积分/1601628194665.png" alt="1601628194665"/></div><span class="image-caption">1601628194665</span></div><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/kayleh/cdn/img/二重积分/1601628177270.png" alt="1601628177270"/></div><span class="image-caption">1601628177270</span></div><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/kayleh/cdn/img/二重积分/1601628338192.png" alt="1601628338192"/></div><span class="image-caption">1601628338192</span></div><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/kayleh/cdn/img/二重积分/1601628391367.png" alt="1601628391367"/></div><span class="image-caption">1601628391367</span></div><h4 id="例题："><a href="#例题：" class="headerlink" title="例题："></a>例题：</h4><blockquote><p>x型是从左到右走</p><p>上边的函数写成上限，下边的函数写成下限</p></blockquote><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/kayleh/cdn/img/二重积分/1601628609123.png" alt="1601628609123"/></div><span class="image-caption">1601628609123</span></div><blockquote><p>y型是从下到上走</p><p>左边的函数写成下限，右边的函数写成上限</p></blockquote><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/kayleh/cdn/img/二重积分/1601629244702.png" alt="1601629244702"/></div><span class="image-caption">1601629244702</span></div><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/kayleh/cdn/img/二重积分/1601629522050.png" alt="1601629522050"/></div><span class="image-caption">1601629522050</span></div><h4 id="特殊"><a href="#特殊" class="headerlink" title="特殊"></a>特殊</h4><p>矩形</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/kayleh/cdn/img/二重积分/1601629887174.png" alt="1601629887174"/></div><span class="image-caption">1601629887174</span></div><p>分成两部分的：</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/kayleh/cdn/img/二重积分/1601630012904.png" alt="1601630012904"/></div><span class="image-caption">1601630012904</span></div><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/kayleh/cdn/img/二重积分/1601630687632.png" alt="1601630687632"/></div><span class="image-caption">1601630687632</span></div><h2 id="极坐标的计算"><a href="#极坐标的计算" class="headerlink" title="极坐标的计算"></a>极坐标的计算</h2><p>极坐标</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/kayleh/cdn/img/二重积分/1601661252410.png" alt="1601661252410"/></div><span class="image-caption">1601661252410</span></div><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/kayleh/cdn/img/二重积分/1601661564115.png" alt="1601661564115"/></div><span class="image-caption">1601661564115</span></div><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/kayleh/cdn/img/二重积分/1601662210072.png" alt="1601662210072"/></div><span class="image-caption">1601662210072</span></div><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/kayleh/cdn/img/二重积分/1601778511764.png" alt="1601778511764"/></div><span class="image-caption">1601778511764</span></div><h4 id="二重积分写成极坐标的表达方式"><a href="#二重积分写成极坐标的表达方式" class="headerlink" title="二重积分写成极坐标的表达方式"></a>二重积分写成极坐标的表达方式</h4><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/kayleh/cdn/img/二重积分/1601779046075.png" alt="1601779046075"/></div><span class="image-caption">1601779046075</span></div><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/kayleh/cdn/img/二重积分/1601780186870.png" alt="1601780186870"/></div><span class="image-caption">1601780186870</span></div><p>例题：</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/kayleh/cdn/img/二重积分/1601780625791.png" alt="1601780625791"/></div><span class="image-caption">1601780625791</span></div><p>$-e^{-x}$求导是$e^{-x}$</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/kayleh/cdn/img/二重积分/1601782073282.png" alt="1601782073282"/></div><span class="image-caption">1601782073282</span></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h3&gt;&lt;p&gt;体积&lt;/p&gt;
&lt;h3 id=&quot;几何含义&quot;&gt;&lt;a href=&quot;#几何含义&quot; class=&quot;headerlink&quot; title=&quot;几何含义&quot;&gt;&lt;
      
    
    </summary>
    
    
    
      <category term="math" scheme="https://kayleh.top/tags/math/"/>
    
  </entry>
  
  <entry>
    <title>偏导数</title>
    <link href="https://kayleh.top/partial-derivative/"/>
    <id>https://kayleh.top/partial-derivative/</id>
    <published>2020-09-30T05:38:35.000Z</published>
    <updated>2020-10-02T18:29:03.931Z</updated>
    
    <content type="html"><![CDATA[<h3 id="在某点偏导的定义"><a href="#在某点偏导的定义" class="headerlink" title="在某点偏导的定义"></a>在某点偏导的定义</h3><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/kayleh/cdn/img/偏导数/1601445508700.png" alt="1601445508700"/></div><span class="image-caption">1601445508700</span></div><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/kayleh/cdn/img/偏导数/1601445566320.png" alt="1601445566320"/></div><span class="image-caption">1601445566320</span></div><blockquote><p>对y求导时，是把x看作常数，对y求导</p><p>对x求导时，是把y看作常数，对x求导</p></blockquote><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/kayleh/cdn/img/偏导数/1601445908951.png" alt="1601445908951"/></div><span class="image-caption">1601445908951</span></div><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/kayleh/cdn/img/偏导数/1601483632915.png" alt="1601483632915"/></div><span class="image-caption">1601483632915</span></div><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/kayleh/cdn/img/偏导数/1601484198275.png" alt="1601484198275"/></div><span class="image-caption">1601484198275</span></div><h4 id="多元函数可导不连续"><a href="#多元函数可导不连续" class="headerlink" title="多元函数可导不连续"></a>多元函数可导不连续</h4><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/kayleh/cdn/img/偏导数/1601484542681.png" alt="1601484542681"/></div><span class="image-caption">1601484542681</span></div><p>例题：</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/kayleh/cdn/img/偏导数/1601485323277.png" alt="1601485323277"/></div><span class="image-caption">1601485323277</span></div><h4 id="几何意义"><a href="#几何意义" class="headerlink" title="几何意义"></a>几何意义</h4><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/kayleh/cdn/img/偏导数/1601486051149.png" alt="1601486051149"/></div><span class="image-caption">1601486051149</span></div><h4 id="二阶偏导数和混合偏导"><a href="#二阶偏导数和混合偏导" class="headerlink" title="二阶偏导数和混合偏导"></a>二阶偏导数和混合偏导</h4><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/kayleh/cdn/img/偏导数/1601486294681.png" alt="1601486294681"/></div><span class="image-caption">1601486294681</span></div><blockquote><p>先求x再求y跟先求y再求x时一样的</p></blockquote><p>如果两个混合二阶偏导数在区域d上是连续的。</p><h3 id="全微分"><a href="#全微分" class="headerlink" title="全微分"></a>全微分</h3><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/kayleh/cdn/img/偏导数/1601519540974.png" alt="1601519540974"/></div><span class="image-caption">1601519540974</span></div><p>x，y都发生的变化引起了z的变化</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/kayleh/cdn/img/偏导数/1601521286233.png" alt="1601521286233"/></div><span class="image-caption">1601521286233</span></div><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/kayleh/cdn/img/偏导数/1601521299461.png" alt="1601521299461"/></div><span class="image-caption">1601521299461</span></div><h4 id="定义："><a href="#定义：" class="headerlink" title="定义："></a>定义：</h4><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/kayleh/cdn/img/偏导数/1601522781003.png" alt="1601522781003"/></div><span class="image-caption">1601522781003</span></div><h4 id="可微必要条件"><a href="#可微必要条件" class="headerlink" title="可微必要条件"></a>可微必要条件</h4><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/kayleh/cdn/img/偏导数/1601522951253.png" alt="1601522951253"/></div><span class="image-caption">1601522951253</span></div><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/kayleh/cdn/img/偏导数/1601524573062.png" alt="1601524573062"/></div><span class="image-caption">1601524573062</span></div><p>偏导存在只是可微的必要条件。</p><h4 id="可微的充分条件"><a href="#可微的充分条件" class="headerlink" title="可微的充分条件"></a>可微的充分条件</h4><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/kayleh/cdn/img/偏导数/1601537220332.png" alt="1601537220332"/></div><span class="image-caption">1601537220332</span></div><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/kayleh/cdn/img/偏导数/1601537658697.png" alt="1601537658697" style="zoom:50%;"/></div><span class="image-caption">1601537658697" style="zoom:50%;</span></div><blockquote><p>一个全微分等于两个偏微分之和。</p></blockquote><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/kayleh/cdn/img/偏导数/1601538273461.png" alt="1601538273461"/></div><span class="image-caption">1601538273461</span></div><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/kayleh/cdn/img/偏导数/1601538416772.png" alt="1601538416772"/></div><span class="image-caption">1601538416772</span></div><p>例题：</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/kayleh/cdn/img/偏导数/1601539670990.png" alt="1601539670990"/></div><span class="image-caption">1601539670990</span></div><h2 id="多元复合函数求导"><a href="#多元复合函数求导" class="headerlink" title="多元复合函数求导"></a>多元复合函数求导</h2><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/kayleh/cdn/img/偏导数/1601543140863.png" alt="1601543140863"/></div><span class="image-caption">1601543140863</span></div><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/kayleh/cdn/img/偏导数/1601544657228.png" alt="1601544657228"/></div><span class="image-caption">1601544657228</span></div><blockquote><p>x对x求导=1</p></blockquote><h4 id="例题："><a href="#例题：" class="headerlink" title="例题："></a>例题：</h4><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/kayleh/cdn/img/偏导数/1601546031624.png" alt="1601546031624"/></div><span class="image-caption">1601546031624</span></div><h2 id="隐函数求导"><a href="#隐函数求导" class="headerlink" title="隐函数求导"></a>隐函数求导</h2><h3 id="定理1"><a href="#定理1" class="headerlink" title="定理1"></a>定理1</h3><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/kayleh/cdn/img/偏导数/1601555127077.png" alt="1601555127077" style="zoom:50%;"/></div><span class="image-caption">1601555127077" style="zoom:50%;</span></div><h4 id="例题：-1"><a href="#例题：-1" class="headerlink" title="例题："></a>例题：</h4><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/kayleh/cdn/img/偏导数/1601556049588.png" alt="1601556049588"/></div><span class="image-caption">1601556049588</span></div><h3 id="定理2："><a href="#定理2：" class="headerlink" title="定理2："></a>定理2：</h3><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/kayleh/cdn/img/偏导数/1601556490422.png" alt="1601556490422"/></div><span class="image-caption">1601556490422</span></div><h4 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h4><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/kayleh/cdn/img/偏导数/1601556789370.png" alt="1601556789370"/></div><span class="image-caption">1601556789370</span></div><h3 id="定理3"><a href="#定理3" class="headerlink" title="定理3"></a>定理3</h3><p>例题：</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/kayleh/cdn/img/偏导数/1601570240705.png" alt="1601570240705"/></div><span class="image-caption">1601570240705</span></div><h6 id><a href="#" class="headerlink" title="#"></a>#</h6><h3 id="克莱姆法则"><a href="#克莱姆法则" class="headerlink" title="克莱姆法则"></a>克莱姆法则</h3><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/kayleh/cdn/img/偏导数/1601571263222.png" alt="1601571263222"/></div><span class="image-caption">1601571263222</span></div><h3 id="二元函数的极值"><a href="#二元函数的极值" class="headerlink" title="二元函数的极值"></a>二元函数的极值</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;在某点偏导的定义&quot;&gt;&lt;a href=&quot;#在某点偏导的定义&quot; class=&quot;headerlink&quot; title=&quot;在某点偏导的定义&quot;&gt;&lt;/a&gt;在某点偏导的定义&lt;/h3&gt;&lt;div class=&quot;img-wrap&quot;&gt;&lt;div class=&quot;img-bg&quot;&gt;&lt;img cl
      
    
    </summary>
    
    
    
      <category term="math" scheme="https://kayleh.top/tags/math/"/>
    
  </entry>
  
  <entry>
    <title>多元函数</title>
    <link href="https://kayleh.top/multi-function/"/>
    <id>https://kayleh.top/multi-function/</id>
    <published>2020-09-28T17:10:02.000Z</published>
    <updated>2020-09-29T17:36:01.525Z</updated>
    
    <content type="html"><![CDATA[<h1 id="空间解析几何"><a href="#空间解析几何" class="headerlink" title="空间解析几何"></a>空间解析几何</h1><div class="img-wrap"><div class="img-bg"><img class="img" src="/multi-function/Blog\source\_posts\多元函数\1601354294435.png" alt="1601354294435"/></div><span class="image-caption">1601354294435</span></div><p>两点之间距离</p><div class="img-wrap"><div class="img-bg"><img class="img" src="/multi-function/Blog\source\_posts\多元函数\1601354442692.png" alt="1601354442692"/></div><span class="image-caption">1601354442692</span></div><div class="img-wrap"><div class="img-bg"><img class="img" src="/multi-function/Blog\source\_posts\多元函数\1601354799490.png" alt="1601354799490"/></div><span class="image-caption">1601354799490</span></div><h3 id="平面方程"><a href="#平面方程" class="headerlink" title="平面方程"></a><strong>平面方程</strong></h3><div class="img-wrap"><div class="img-bg"><img class="img" src="/multi-function/Blog\source\_posts\多元函数\1601354842773.png" alt="1601354842773"/></div><span class="image-caption">1601354842773</span></div><h3 id="球面方程"><a href="#球面方程" class="headerlink" title="球面方程"></a>球面方程</h3><div class="img-wrap"><div class="img-bg"><img class="img" src="/multi-function/Blog\source\_posts\多元函数\1601354949365.png" alt="1601354949365"/></div><span class="image-caption">1601354949365</span></div><div class="img-wrap"><div class="img-bg"><img class="img" src="/multi-function/Blog\source\_posts\多元函数\1601355067816.png" alt="1601355067816"/></div><span class="image-caption">1601355067816</span></div><p>z是正的表示求的上半部分，负的表示下半部分。</p><p>旋转抛物面：</p><div class="img-wrap"><div class="img-bg"><img class="img" src="/multi-function/Blog\source\_posts\多元函数\1601355316536.png" alt="1601355316536"/></div><span class="image-caption">1601355316536</span></div><p>双曲抛物面：</p><div class="img-wrap"><div class="img-bg"><img class="img" src="/multi-function/Blog\source\_posts\多元函数\1601355447432.png" alt="1601355447432"/></div><span class="image-caption">1601355447432</span></div><h1 id="多元函数"><a href="#多元函数" class="headerlink" title="多元函数"></a>多元函数</h1><p>邻域</p><p>开集：所有的点都是内点</p><div class="img-wrap"><div class="img-bg"><img class="img" src="/multi-function/Blog\source\_posts\多元函数\1601398417032.png" alt="1601398417032"/></div><span class="image-caption">1601398417032</span></div><p>闭区域：既包含内点和边界点</p><h3 id="二元函数的极限"><a href="#二元函数的极限" class="headerlink" title="二元函数的极限"></a>二元函数的极限</h3><blockquote><p>证明极限不存在</p><p>找两种不同的逼近方式</p></blockquote><div class="img-wrap"><div class="img-bg"><img class="img" src="/multi-function/Blog\source\_posts\多元函数\1601399459395.png" alt="1601399459395"/></div><span class="image-caption">1601399459395</span></div><p>例题：</p><div class="img-wrap"><div class="img-bg"><img class="img" src="/multi-function/Blog\source\_posts\多元函数\1601399650482.png" alt="1601399650482"/></div><span class="image-caption">1601399650482</span></div><div class="img-wrap"><div class="img-bg"><img class="img" src="/multi-function/Blog\source\_posts\多元函数\1601399792399.png" alt="1601399792399"/></div><span class="image-caption">1601399792399</span></div><p>求极限</p><div class="img-wrap"><div class="img-bg"><img class="img" src="/multi-function/Blog\source\_posts\多元函数\1601400065760.png" alt="1601400065760"/></div><span class="image-caption">1601400065760</span></div><div class="img-wrap"><div class="img-bg"><img class="img" src="/multi-function/Blog\source\_posts\多元函数\1601400252209.png" alt="1601400252209"/></div><span class="image-caption">1601400252209</span></div><div class="img-wrap"><div class="img-bg"><img class="img" src="/multi-function/Blog\source\_posts\多元函数\1601400533096.png" alt="1601400533096"/></div><span class="image-caption">1601400533096</span></div><h3 id="连续"><a href="#连续" class="headerlink" title="连续"></a>连续</h3><div class="img-wrap"><div class="img-bg"><img class="img" src="/multi-function/Blog\source\_posts\多元函数\1601400850590.png" alt="1601400850590"/></div><span class="image-caption">1601400850590</span></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;空间解析几何&quot;&gt;&lt;a href=&quot;#空间解析几何&quot; class=&quot;headerlink&quot; title=&quot;空间解析几何&quot;&gt;&lt;/a&gt;空间解析几何&lt;/h1&gt;&lt;div class=&quot;img-wrap&quot;&gt;&lt;div class=&quot;img-bg&quot;&gt;&lt;img class=&quot;img
      
    
    </summary>
    
    
    
      <category term="math" scheme="https://kayleh.top/tags/math/"/>
    
  </entry>
  
  <entry>
    <title>广义积分和瑕积分</title>
    <link href="https://kayleh.top/generalized-integral/"/>
    <id>https://kayleh.top/generalized-integral/</id>
    <published>2020-09-28T13:58:19.000Z</published>
    <updated>2020-09-28T17:13:31.080Z</updated>
    
    <content type="html"><![CDATA[<h1 id="广义积分"><a href="#广义积分" class="headerlink" title="广义积分"></a>广义积分</h1><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/kayleh/cdn/img/广义积分/1601302982305.png" alt="1601302982305"/></div><span class="image-caption">1601302982305</span></div><h3 id="无穷限积分"><a href="#无穷限积分" class="headerlink" title="无穷限积分"></a>无穷限积分</h3><p>①上限是无穷的，就对b求导</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/kayleh/cdn/img/广义积分/1601303240702.png" alt="1601303240702"/></div><span class="image-caption">1601303240702</span></div><p>如果极限存在，就是收敛的，如果不存在，就是发散的。</p><p>②下限是无穷的，就对a求导</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/kayleh/cdn/img/广义积分/1601303277989.png" alt="1601303277989"/></div><span class="image-caption">1601303277989</span></div><p>③上下限都是无穷</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/kayleh/cdn/img/广义积分/1601303420141.png" alt="1601303420141"/></div><span class="image-caption">1601303420141</span></div><p>结合①和②来求。</p><h4 id="例题："><a href="#例题：" class="headerlink" title="例题："></a>例题：</h4><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/kayleh/cdn/img/广义积分/1601303693780.png" alt="1601303693780"/></div><span class="image-caption">1601303693780</span></div><p>广义的牛顿-莱布尼茨公式</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/kayleh/cdn/img/广义积分/1601303809560.png" alt="1601303809560"/></div><span class="image-caption">1601303809560</span></div><h5 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h5><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/kayleh/cdn/img/广义积分/1601303899003.png" alt="1601303899003"/></div><span class="image-caption">1601303899003</span></div><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/kayleh/cdn/img/广义积分/1601304242138.png" alt="1601304242138"/></div><span class="image-caption">1601304242138</span></div><h3 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h3><blockquote><p>-也收敛</p></blockquote><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/kayleh/cdn/img/广义积分/1601304752667.png" alt="1601304752667"/></div><span class="image-caption">1601304752667</span></div><blockquote><p>2）第二个性质。反之，不一定</p></blockquote><p>分部积分和换元积分也成立。</p><h3 id="收敛判定"><a href="#收敛判定" class="headerlink" title="收敛判定"></a>收敛判定</h3><p>定理：</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/kayleh/cdn/img/广义积分/1601305473068.png" alt="1601305473068"/></div><span class="image-caption">1601305473068</span></div><h4 id="★★★比较判别法"><a href="#★★★比较判别法" class="headerlink" title="★★★比较判别法"></a>★★★比较判别法</h4><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/kayleh/cdn/img/广义积分/1601305670196.png" alt="1601305670196"/></div><span class="image-caption">1601305670196</span></div><p>大敛则小敛，小散大必散</p><blockquote><p>找一个比被积函数大的易比函数进行比较</p></blockquote><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/kayleh/cdn/img/广义积分/1601306623507.png" alt="1601306623507"/></div><span class="image-caption">1601306623507</span></div><hr><h3 id="绝对收敛、条件收敛"><a href="#绝对收敛、条件收敛" class="headerlink" title="绝对收敛、条件收敛"></a>绝对收敛、条件收敛</h3><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/kayleh/cdn/img/广义积分/1601307238632.png" alt="1601307238632"/></div><span class="image-caption">1601307238632</span></div><p>绝对收敛必收敛</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/kayleh/cdn/img/广义积分/1601308675891.png" alt="1601308675891"/></div><span class="image-caption">1601308675891</span></div><h2 id="瑕积分"><a href="#瑕积分" class="headerlink" title="#瑕积分"></a>#瑕积分</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;广义积分&quot;&gt;&lt;a href=&quot;#广义积分&quot; class=&quot;headerlink&quot; title=&quot;广义积分&quot;&gt;&lt;/a&gt;广义积分&lt;/h1&gt;&lt;div class=&quot;img-wrap&quot;&gt;&lt;div class=&quot;img-bg&quot;&gt;&lt;img class=&quot;img&quot; src=&quot;h
      
    
    </summary>
    
    
    
      <category term="math" scheme="https://kayleh.top/tags/math/"/>
    
  </entry>
  
  <entry>
    <title>定积分</title>
    <link href="https://kayleh.top/definite-integral/"/>
    <id>https://kayleh.top/definite-integral/</id>
    <published>2020-09-26T12:38:49.000Z</published>
    <updated>2020-09-28T17:12:16.910Z</updated>
    
    <content type="html"><![CDATA[<h1 id="定积分"><a href="#定积分" class="headerlink" title="定积分"></a>定积分</h1><h3 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h3><blockquote><p>插入分点，区间内取任意值，求任意值的函数值，$△x_n$小区间的长度</p><p>拉姆达是最大的区间</p></blockquote><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/kayleh/cdn/img/定积分/1601053742391.png" alt="1601053742391"/></div><span class="image-caption">1601053742391</span></div><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>$f(x)$在$[a,b]$有界，在$[a,b]$任意插入分点</p><p>分成n个区间，△x_1,△x_2….△x_n,任取一点 $\xi_i$ </p><script type="math/tex; mode=display">\int_a^b{f(x)dx}=\lim_{\lambda \to 0} \sum_{i=1}^n{f(\xi_i)△x_i}</script><script type="math/tex; mode=display">\lambda=max\{△x_1...△x_n\}</script><h4 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h4><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/kayleh/cdn/img/定积分/1601055940188.png" alt="1601055940188"/></div><span class="image-caption">1601055940188</span></div><p>两个图像都是一样的</p><h3 id="定理"><a href="#定理" class="headerlink" title="定理"></a>定理</h3><p>1）连续就可积</p><p>2）有界，有限个间断点，可积</p><h3 id="几何意义"><a href="#几何意义" class="headerlink" title="几何意义"></a>几何意义</h3><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/kayleh/cdn/img/定积分/1601056351353.png" alt="1601056351353"/></div><span class="image-caption">1601056351353</span></div><p>②积分等于面积的相反数</p><h3 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h3><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/kayleh/cdn/img/定积分/1601056797153.png" alt="1601056797153"/></div><span class="image-caption">1601056797153</span></div><h2 id="定积分的近似计算"><a href="#定积分的近似计算" class="headerlink" title="定积分的近似计算"></a>定积分的近似计算</h2><h4 id="矩形法"><a href="#矩形法" class="headerlink" title="矩形法"></a>矩形法</h4><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/kayleh/cdn/img/定积分/1601089155704.png" alt="1601089155704"/></div><span class="image-caption">1601089155704</span></div><h4 id="梯形法"><a href="#梯形法" class="headerlink" title="梯形法"></a>梯形法</h4><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/kayleh/cdn/img/定积分/1601090462955.png" alt="1601090462955"/></div><span class="image-caption">1601090462955</span></div><h4 id="抛物线法"><a href="#抛物线法" class="headerlink" title="抛物线法"></a>抛物线法</h4><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/kayleh/cdn/img/定积分/1601090743620.png" alt="1601090743620"/></div><span class="image-caption">1601090743620</span></div><h2 id="性质-1"><a href="#性质-1" class="headerlink" title="性质"></a>性质</h2><p>1）当b=a时，</p><script type="math/tex; mode=display">\int_a^a{f(x)=0}</script><p>2）<script type="math/tex">\int_a^b{f(x)dx}= - \int_b^a{f(x)dx}</script></p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/kayleh/cdn/img/定积分/1601100327822.png" alt="1601100327822"/></div><span class="image-caption">1601100327822</span></div><blockquote><p>不管是a&lt;c&lt;b还是a&lt;b&lt;c,性质2公式都成立</p></blockquote><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/kayleh/cdn/img/定积分/1601100611938.png" alt="1601100611938"/></div><span class="image-caption">1601100611938</span></div><h4 id="推论"><a href="#推论" class="headerlink" title="推论"></a>推论</h4><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/kayleh/cdn/img/定积分/1601100749415.png" alt="1601100749415"/></div><span class="image-caption">1601100749415</span></div><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/kayleh/cdn/img/定积分/1601101052364.png" alt="1601101052364"/></div><span class="image-caption">1601101052364</span></div><p>性质6</p><h3 id="定积分中值定理"><a href="#定积分中值定理" class="headerlink" title="定积分中值定理"></a>定积分中值定理</h3><blockquote><p>f(x)必须是连续的</p></blockquote><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/kayleh/cdn/img/定积分/1601101655002.png" alt="1601101655002"/></div><span class="image-caption">1601101655002</span></div><p>在最小值和最大值之间一定能找到一点$\xi$</p><p>函数值$f(\xi)$就是<strong>平均值</strong>。</p><h1 id="微积分的基本原理"><a href="#微积分的基本原理" class="headerlink" title="微积分的基本原理"></a>微积分的基本原理</h1><h2 id="积分上限函数"><a href="#积分上限函数" class="headerlink" title="积分上限函数"></a>积分上限函数</h2><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/kayleh/cdn/img/定积分/1601110706936.png" alt="1601110706936"/></div><span class="image-caption">1601110706936</span></div><p>x是变化的</p><hr><h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h3><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/kayleh/cdn/img/定积分/1601110816738.png" alt="1601110816738"/></div><span class="image-caption">1601110816738</span></div><p>积分上限函数p(x)是连续的</p><hr><h3 id="定理-1"><a href="#定理-1" class="headerlink" title="定理"></a>定理</h3><p>如果f(x)在[a,b]上连续，那么p(x)在积分区域上<strong>可导</strong></p><script type="math/tex; mode=display">p'(x)=f(x)</script><p>1)如果上限是x，直接将x代入被积函数</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/kayleh/cdn/img/定积分/1601111539113.png" alt="1601111539113"/></div><span class="image-caption">1601111539113</span></div><p>2)如果x是下限，取相反数，再直接将x代入被积函数</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/kayleh/cdn/img/定积分/1601111632965.png" alt="1601111632965"/></div><span class="image-caption">1601111632965</span></div><p>3）如果上限是x的函数g(x)</p><p>复合函数求导——链式法则</p><p>1.把上限g(x)直接代入被积函数</p><p>2.对上限求导g’(x)</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/kayleh/cdn/img/定积分/1601111926046.png" alt="1601111926046"/></div><span class="image-caption">1601111926046</span></div><p>4）如果上限是x的函数h(x)</p><p>1.把上限h(x)直接代入被积函数</p><p>2.对上限求导h’(x)</p><p>3.取相反数，加负号</p><p>5）上下都是x的函数，</p><p>可以根据积分的性质，在h(x)和g(x)之间任取一点C，求h(x)到c的积分和c到g(x)的积分。</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/kayleh/cdn/img/定积分/1601112251309.png" alt="1601112251309"/></div><span class="image-caption">1601112251309</span></div><hr><h4 id="例题-1"><a href="#例题-1" class="headerlink" title="例题"></a>例题</h4><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/kayleh/cdn/img/定积分/1601112870379.png" alt="1601112870379"/></div><span class="image-caption">1601112870379</span></div><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/kayleh/cdn/img/定积分/1601139602455.png" alt="1601139602455"/></div><span class="image-caption">1601139602455</span></div><hr><h3 id="牛顿莱布尼茨公式"><a href="#牛顿莱布尼茨公式" class="headerlink" title="牛顿莱布尼茨公式"></a>牛顿莱布尼茨公式</h3><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/kayleh/cdn/img/定积分/1601140289642.png" alt="1601140289642"/></div><span class="image-caption">1601140289642</span></div><p>例题：<img src="https://cdn.jsdelivr.net/gh/kayleh/cdn/img/定积分/1601141863229.png" alt="1601141863229"></p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/kayleh/cdn/img/定积分/1601142031603.png" alt="1601142031603"/></div><span class="image-caption">1601142031603</span></div><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/kayleh/cdn/img/定积分/1601142825530.png" alt="1601142825530"/></div><span class="image-caption">1601142825530</span></div><h2 id="定积分的换元积分法"><a href="#定积分的换元积分法" class="headerlink" title="定积分的换元积分法"></a>定积分的换元积分法</h2><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/kayleh/cdn/img/定积分/1601183156945.png" alt="1601183156945"/></div><span class="image-caption">1601183156945</span></div><h4 id="例题："><a href="#例题：" class="headerlink" title="例题："></a>例题：</h4><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/kayleh/cdn/img/定积分/1601184315091.png" alt="1601184315091"/></div><span class="image-caption">1601184315091</span></div><p>3ln3</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/kayleh/cdn/img/定积分/1601185910499.png" alt="1601185910499"/></div><span class="image-caption">1601185910499</span></div><p>sin的值是1到-1来回波动，在因为a是正的，所以就是从0到1的范围</p><p>又可以这么写：</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/kayleh/cdn/img/定积分/1601186045641.png" alt="1601186045641"/></div><span class="image-caption">1601186045641</span></div><hr><h4 id="★"><a href="#★" class="headerlink" title="★"></a>★</h4><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/kayleh/cdn/img/定积分/1601186556806.png" alt="1601186556806"/></div><span class="image-caption">1601186556806</span></div><p><strong>积分区间关于原点对称</strong></p><p>例题：</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/kayleh/cdn/img/定积分/1601187310285.png" alt="1601187310285"/></div><span class="image-caption">1601187310285</span></div><p>$1+x^2$分之1是arctanx的导数，提出去所以是对$(arctanx)^2$求导</p><p>证明：</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/kayleh/cdn/img/定积分/1601187747971.png" alt="1601187747971"/></div><span class="image-caption">1601187747971</span></div><p>sin（派/2-X）= cosx</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/kayleh/cdn/img/定积分/1601189272798.png" alt="1601189272798"/></div><span class="image-caption">1601189272798</span></div><p>同时求导</p><h2 id="定积分的分部积分法"><a href="#定积分的分部积分法" class="headerlink" title="定积分的分部积分法"></a>定积分的分部积分法</h2><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/kayleh/cdn/img/定积分/1601190092256.png" alt="1601190092256"/></div><span class="image-caption">1601190092256</span></div><p>例题：<img src="https://cdn.jsdelivr.net/gh/kayleh/cdn/img/定积分/1601190921495.png" alt="1601190921495"></p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/kayleh/cdn/img/定积分/1601191359757.png" alt="1601191359757"/></div><span class="image-caption">1601191359757</span></div><p>=1/2</p><p>优先级：反对幂三指</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/kayleh/cdn/img/定积分/1601192056564.png" alt="1601192056564"/></div><span class="image-caption">1601192056564</span></div><h1 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h1><h2 id="求面积"><a href="#求面积" class="headerlink" title="求面积"></a>求面积</h2><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/kayleh/cdn/img/定积分/1601224434165.png" alt="1601224434165"/></div><span class="image-caption">1601224434165</span></div><p>x型：垂直于x轴</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/kayleh/cdn/img/定积分/1601225369727.png" alt="1601225369727"/></div><span class="image-caption">1601225369727</span></div><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/kayleh/cdn/img/定积分/1601225743031.png" alt="1601225743031"/></div><span class="image-caption">1601225743031</span></div><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/kayleh/cdn/img/定积分/1601226092741.png" alt="1601226092741"/></div><span class="image-caption">1601226092741</span></div><h2 id="求体积"><a href="#求体积" class="headerlink" title="求体积"></a>求体积</h2><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/kayleh/cdn/img/定积分/1601226647106.png" alt="1601226647106"/></div><span class="image-caption">1601226647106</span></div><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/kayleh/cdn/img/定积分/1601226802688.png" alt="1601226802688"/></div><span class="image-caption">1601226802688</span></div><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/kayleh/cdn/img/定积分/1601226875100.png" alt="1601226875100"/></div><span class="image-caption">1601226875100</span></div><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/kayleh/cdn/img/定积分/1601227123788.png" alt="1601227123788"/></div><span class="image-caption">1601227123788</span></div><h2 id="经济问题"><a href="#经济问题" class="headerlink" title="经济问题"></a>经济问题</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;定积分&quot;&gt;&lt;a href=&quot;#定积分&quot; class=&quot;headerlink&quot; title=&quot;定积分&quot;&gt;&lt;/a&gt;定积分&lt;/h1&gt;&lt;h3 id=&quot;性质&quot;&gt;&lt;a href=&quot;#性质&quot; class=&quot;headerlink&quot; title=&quot;性质&quot;&gt;&lt;/a&gt;性质&lt;/h3&gt;&lt;b
      
    
    </summary>
    
    
    
      <category term="math" scheme="https://kayleh.top/tags/math/"/>
    
  </entry>
  
  <entry>
    <title>图床</title>
    <link href="https://kayleh.top/pictrue-bed/"/>
    <id>https://kayleh.top/pictrue-bed/</id>
    <published>2020-09-25T12:45:24.000Z</published>
    <updated>2020-09-25T14:10:09.924Z</updated>
    
    <content type="html"><![CDATA[<p>原地址<a href="https://www.jianshu.com/u/e68ebf1b004c" target="_blank" rel="noopener">https://www.jianshu.com/u/e68ebf1b004c</a></p><h2 id="Github-repo图床"><a href="#Github-repo图床" class="headerlink" title="Github repo图床"></a>Github repo图床</h2><p>Github的repo也可以储存东西，最直接的就是程序的版本控制，当然也可以用来当作备份储存，用来储存图片（github官方回复是：该行为不构成abuse，如果把github当图床算滥用，那么那么多人把微博当图床怎么就理所应当捏）。其实github对于国内的响应速度并不快，而且时不时被block，所以用github当图床完全是出于储存个人用途的自创图片，并不能当CDN使用。github自从被微软收购后，我对github的信心大增，代码以前只敢用git管理保存在本地，现在可以放心大胆上传到github了（很多是private，所以不可见），github图床主要就是图个稳定，也并不是想恶意刷github服务器的流量，恶意影响大家的体验。</p><ol><li>新建repo，名称任意</li></ol><ol><li><p>打开账户/Settings/Developer settings/Personal access tokens,点击Generate new token</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https:////upload-images.jianshu.io/upload_images/17029678-88e1807b0a33255e.png?imageMogr2/auto-orient/strip|imageView2/2/w/233/format/webp" alt="img"/></div><span class="image-caption">img</span></div><p>image</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https:////upload-images.jianshu.io/upload_images/17029678-7656c08d619ed359.png?imageMogr2/auto-orient/strip|imageView2/2/w/1002/format/webp" alt="img"/></div><span class="image-caption">img</span></div><p>image</p></li><li><p>在弹出的产生token页面，Token description随意填写，但是一定要勾选上这几项</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https:////upload-images.jianshu.io/upload_images/17029678-55b2842f6875b416.png?imageMogr2/auto-orient/strip|imageView2/2/w/784/format/webp" alt="img"/></div><span class="image-caption">img</span></div><p>image</p></li><li><p>下载PicGo客户端对应的版本并安装，github地址：<a href="https://links.jianshu.com/go?to=https%3A%2F%2Fgithub.com%2FMolunerfinn%2FPicGo%2Freleases" target="_blank" rel="noopener">https://github.com/Molunerfinn/PicGo/releases</a></p></li><li><p>启动PicGo后，打开设置界面，点击</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https:////upload-images.jianshu.io/upload_images/17029678-3ed6d235f87629c4.png?imageMogr2/auto-orient/strip|imageView2/2/w/800/format/webp" alt="img"/></div><span class="image-caption">img</span></div><p>image</p><p>在第一栏填入你的github名称/repo名称；在第二栏填入你的分支名称，默认为master；在第三栏填入你刚才申请到的Token；第四栏填入你的repo中的储存路径；最后点击确认，再点击设为默认图床</p></li><li><p>使用QQ截图Ctrl+Alt+A或者微信的Alt+A截图后，按下Ctrl+Shiht+P快捷键即可自动上传到github对应的repo中，上传完成后，会有提示，自动将对应的图片地址送入剪贴板中，直接Ctrl+V即可粘贴对应的地址出来了~~</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;原地址&lt;a href=&quot;https://www.jianshu.com/u/e68ebf1b004c&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.jianshu.com/u/e68ebf1b004c&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=
      
    
    </summary>
    
    
    
      <category term="front" scheme="https://kayleh.top/tags/front/"/>
    
  </entry>
  
</feed>
