{"meta":{"title":"Kayleh","subtitle":"","description":"Kayleh","author":"Kayleh","url":"http://dqlcr5.coding-pages.com","root":"/"},"pages":[],"posts":[{"title":"C prime plus","slug":"C-prime-plus","date":"2020-06-28T09:33:01.000Z","updated":"2020-06-30T03:16:34.740Z","comments":true,"path":"2020/06/28/C-prime-plus/","link":"","permalink":"http://dqlcr5.coding-pages.com/2020/06/28/C-prime-plus/","excerpt":"指针每一个变量都有一个内存位置，每一个内存位置都定义了可使用连字号（&amp;）运算符访问的地址，它表示了在内存中的一个地址。","text":"指针每一个变量都有一个内存位置，每一个内存位置都定义了可使用连字号（&amp;）运算符访问的地址，它表示了在内存中的一个地址。 取地址&amp; 取值* 123456789#include &lt;stdio.h&gt;int main()&#123; int a; char b[10]; printf(\"a变量的内存地址：%p\\n\", &amp;a); printf(\"b变量的内存地址：%p\\n\", &amp;b); return 0;&#125; 访问数组b的地址其实就是数组第一个变量的数组 指针是一个变量，其值为另一个变量的地址，即，内存位置的直接地址。就像其他变量或常量一样，您必须在使用指针存储其他变量地址之前，对其进行声明。指针变量声明的一般形式为： 1type *var-name; 在这里，type 是指针的基类型，它必须是一个有效的 C 数据类型，var-name 是指针变量的名称。用来声明指针的星号 * 与乘法中使用的星号是相同的。但是，在这个语句中，星号是用来指定一个变量是指针。以下是有效的指针声明： 1234int *ip; /* 一个整型的指针 */double *dp; /* 一个 double 型的指针 */float *fp; /* 一个浮点型的指针 */char *ch; /* 一个字符型的指针 */ 所有实际数据类型，不管是整型、浮点型、字符型，还是其他的数据类型，对应指针的值的类型都是一样的，都是一个代表内存地址的长的十六进制数。 指针的使用 使用指针时会频繁进行以下几个操作：定义一个指针变量、把变量地址赋值给指针、访问指针变量中可用地址的值。这些是通过使用一元运算符 ***** 来返回位于操作数所指定地址的变量的值。下面的实例涉及到了这些操作： 12345678910111213141516171819#include &lt;stdio.h&gt; int main ()&#123; int var = 20; /* 实际变量的声明 */ int *ip; /* 指针变量的声明 */ ip = &amp;var; /* 在指针变量中存储 var 的地址 */ printf(\"Address of var variable: %p\\n\", &amp;var ); /* 在指针变量中存储的地址 */ printf(\"Address stored in ip variable: %p\\n\", ip ); /* 使用指针访问值 */ printf(\"Value of *ip variable: %d\\n\", *ip ); //20 return 0;&#125; C 中的 NULL 指针在变量声明的时候，如果没有确切的地址可以赋值，为指针变量赋一个 NULL 值是一个良好的编程习惯。赋为 NULL 值的指针被称为空指针。 NULL 指针是一个定义在标准库中的值为零的常量。请看下面的程序： 12345678910#include &lt;stdio.h&gt; int main ()&#123; int *ptr = NULL; printf(\"ptr 的地址是 %p\\n\", ptr ); return 0;&#125; 在大多数的操作系统上，程序不允许访问地址为 0 的内存，因为该内存是操作系统保留的。然而，内存地址 0 有特别重要的意义，它表明该指针不指向一个可访问的内存位置。但按照惯例，如果指针包含空值（零值），则假定它不指向任何东西。 如需检查一个空指针，您可以使用 if 语句，如下所示： 12if(ptr) /* 如果 p 非空，则完成 */if(!ptr) /* 如果 p 为空，则完成 */ 指针的算数运算C 指针是一个用数值表示的地址。因此，您可以对指针执行算术运算。可以对指针进行四种算术运算：++、–、+、-。 假设 ptr 是一个指向地址 1000 的整型指针，是一个 32 位的整数，让我们对该指针执行下列的算术运算： 1ptr++ 在执行完上述的运算之后，ptr 将指向位置 1004，因为 ptr 每增加一次，它都将指向下一个整数位置，即当前位置往后移 4 字节。这个运算会在不影响内存位置中实际值的情况下，移动指针到下一个内存位置。如果 ptr 指向一个地址为 1000 的字符，上面的运算会导致指针指向位置 1001，因为下一个字符位置是在 1001。 我们概括一下： 指针的每一次递增，它其实会指向下一个元素的存储单元。 指针的每一次递减，它都会指向前一个元素的存储单元。 指针在递增和递减时跳跃的字节数取决于指针所指向变量数据类型长度，比如 int 就是 4 个字节。 递增一个指针我们喜欢在程序中使用指针代替数组，因为变量指针可以递增，而数组不能递增，数组可以看成一个指针常量。下面的程序递增变量指针，以便顺序访问数组中的每一个元素： 1234567891011121314151617181920212223242526272829#include &lt;stdio.h&gt; const int MAX = 3; int main ()&#123; int var[] = &#123;10, 100, 200&#125;; int i, *ptr; /* 指针中的数组地址 */ ptr = var; for ( i = 0; i &lt; MAX; i++) &#123; printf(\"存储地址：var[%d] = %x\\n\", i, ptr ); printf(\"存储值：var[%d] = %d\\n\", i, *ptr ); /* 移动到下一个位置 */ ptr++; &#125; return 0;&#125;----存储地址：var[0] = bf882b30存储值：var[0] = 10存储地址：of var[1] = bf882b34存储值： var[1] = 100存储地址：of var[2] = bf882b38存储值：var[2] = 200 指针的比较指针可以用关系运算符进行比较，如 ==、&lt; 和 &gt;。如果 p1 和 p2 指向两个相关的变量，比如同一个数组中的不同元素，则可对 p1 和 p2 进行大小比较。 下面的程序修改了上面的实例，只要变量指针所指向的地址小于或等于数组的最后一个元素的地址 &amp;var[MAX - 1]，则把变量指针进行递增： 12345678910111213141516171819202122232425262728293031#include &lt;stdio.h&gt; const int MAX = 3; int main ()&#123; int var[] = &#123;10, 100, 200&#125;; int i, *ptr; /* 指针中第一个元素的地址 */ ptr = var; i = 0; while ( ptr &lt;= &amp;var[MAX - 1] ) &#123; printf(\"Address of var[%d] = %p\\n\", i, ptr ); printf(\"Value of var[%d] = %d\\n\", i, *ptr ); /* 指向上一个位置 */ ptr++; i++; &#125; return 0;&#125;----------------Address of var[0] = bfdbcb20Value of var[0] = 10Address of var[1] = bfdbcb24Value of var[1] = 100Address of var[2] = bfdbcb28Value of var[2] = 200 指针数组一个指向整数的指针数组的声明： 1int *ptr[MAX]; 在这里，把 ptr 声明为一个数组，由 MAX 个整数指针组成。因此，ptr 中的每个元素，都是一个指向 int 值的指针。下面的实例用到了三个整数，它们将存储在一个指针数组中，如下所示： 1234567891011121314151617181920212223#include &lt;stdio.h&gt; const int MAX = 3; int main ()&#123; int var[] = &#123;10, 100, 200&#125;; int i, *ptr[MAX]; for ( i = 0; i &lt; MAX; i++) &#123; ptr[i] = &amp;var[i]; /* 赋值为整数的地址 */ &#125; for ( i = 0; i &lt; MAX; i++) &#123; printf(\"Value of var[%d] = %d\\n\", i, *ptr[i] ); &#125; return 0;&#125;------Value of var[0] = 10Value of var[1] = 100Value of var[2] = 200 您也可以用一个指向字符的指针数组来存储一个字符串列表，如下： 12345678910111213141516171819202122232425#include &lt;stdio.h&gt; const int MAX = 4; int main ()&#123; const char *names[] = &#123; \"Zara Ali\", \"Hina Ali\", \"Nuha Ali\", \"Sara Ali\", &#125;; int i = 0; for ( i = 0; i &lt; MAX; i++) &#123; printf(\"Value of names[%d] = %s\\n\", i, names[i] ); &#125; return 0;&#125;------Value of names[0] = Zara AliValue of names[1] = Hina AliValue of names[2] = Nuha AliValue of names[3] = Sara Ali 指向指针的指针 指向指针的指针是一种多级间接寻址的形式，或者说是一个指针链。通常，一个指针包含一个变量的地址。当我们定义一个指向指针的指针时，第一个指针包含了第二个指针的地址，第二个指针指向包含实际值的位置。 1234 Pointer Pointer Variable _____________ _____________ _____________| Address | ------&gt;| Address |--------&gt;| Value ||_____________| |_____________| |_____________| 一个指向指针的指针变量必须如下声明，即在变量名前放置两个星号。例如，下面声明了一个指向 int 类型指针的指针： 1int **var; 当一个目标值被一个指针间接指向到另一个指针时，访问这个值需要使用两个星号运算符，如下面实例所示： 123456789101112131415161718192021222324252627#include &lt;stdio.h&gt; int main ()&#123; int var; int *ptr; int **pptr; var = 3000; /* 获取 var 的地址 */ ptr = &amp;var; /* 使用运算符 &amp; 获取 ptr 的地址 */ pptr = &amp;ptr; /* 使用 pptr 获取值 */ printf(\"Value of var = %d\\n\", var ); printf(\"Value available at *ptr = %d\\n\", *ptr ); printf(\"Value available at **pptr = %d\\n\", **pptr); return 0;&#125;-------------------Value of var = 3000Value available at *ptr = 3000Value available at **pptr = 3000 指针数组和数组指针12int *p1[5] ----------指针数组int (*p2)[5]---------数组指针 指针数组是一个数组，每个数组元素存放一个指针变量。 1234567891011121314151617#include &lt;stdio.h&gt;int main()&#123; //指针数组，里面存的是指针 char *p1[5] = &#123;\"wo\", \"jiao\", \"Kayleh\", \"!\"&#125;; int i; for (i = 0; i &lt; 5; i++) &#123; /* code */ // %s会取地址对应的值，char形是特列,通过字符串首地址输出字符串 printf(\"%s\\n\", p1[i]); &#125;&#125; 数组指针是一个指针，它指向的是一个数组 12345678910111213141516#include &lt;stdio.h&gt;int main()&#123; int temp[5] = &#123;1, 2, 3, 4, 5&#125;; //&amp;temp表示取出整个数组的地址 //temp表示数组的第一个元素的地址 int(*p2)[5] = &amp;temp; int i; for (i = 0; i &lt; 5; i++) &#123; /* code */ //内部的*取得是数组的，外部的取得是数组元素的 printf(\"%d\\n\", *(*p2 + i)); &#125; return 0;&#125; 二维数组数组名实际上是第一组一维数组的指针。 1234array[4][5]*(array+1) = array[1] = &amp;array[1][0]*(array+1)+3 == &amp;array[1][3] 结论 123*(array+i) == array[i]*(*(array+i)+j) == &amp;array[i][j]*(*(*(array+i)+j)+k) == &amp;array[i][j][k] 初始化二维数组 1int array[][3];&#x2F;&#x2F;前面的可不写 数组指针和二维数组 void指针 void指针称为通用指针，就是可以指向任意类型的数据。也就是说，任何类型的指针都可以赋值给void指针 1234567891011121314151617181920#include &lt;stdio.h&gt;int main()&#123; int num = 1024; int *pi = &amp;num; char *pc = \"Kayleh\"; void *pv; pv = pi; printf(\"pi:%p,pv:%p\\n\", pi, pv); printf(\"pv:%d\\n\", *(int *)pv); //强制转换 pv = pc; printf(\"pc:%p,pv:%p\\n\", pc, pv); //因为字符数组中每一个元素都相当于一个指针变量，就不需要在加*了，不用解引用 printf(\"pv:%s\\n\", pv); return 0;&#125; NULL指针1#define NULL ((void *)0) 12345678910#include &lt;stdio.h&gt;int main()&#123; int *p1; int *p2 = NULL; printf(\"%d\\n\", *p1); printf(\"%d\\n\", *p2); return 0;&#125;","categories":[],"tags":[{"name":"C","slug":"C","permalink":"http://dqlcr5.coding-pages.com/tags/C/"}]},{"title":"Redis","slug":"Redis","date":"2020-06-27T09:30:29.000Z","updated":"2020-06-29T12:47:11.606Z","comments":true,"path":"2020/06/27/Redis/","link":"","permalink":"http://dqlcr5.coding-pages.com/2020/06/27/Redis/","excerpt":"Redis","text":"Redis 在Linux下安装 https://redis.io/ 官网下载，移动到/opt 目录下. 在终端使用命令解压 1$ tar -zxvf redis-XXXXXX.tar.gz 进入解压后的目录,运行make指令(需要GCC编译器) 123$ cd redis.XXX$ make$ make install 进入默认安装的目录 1$ cd usr&#x2F;local&#x2F;bin 在根目录创建一个文件夹/myredis，把安装目录下的redis.conf复制到/myredis，复制的目的是不影响出厂的设置 1cp redis.conf &#x2F;myredis 要把myredis的权限修改,否则会出现redis无法SHUTDOWN的问题 1sudo chmod 777 &#x2F;myredis 修改复制过来的conf 1vim redis.conf 修改为为yes 1234567原来的：##########GENERAL###################XXXdaemonzie no修改为:daemonize yes 检查有没有启动Redis 1$ ps -ef|gref redis 检查端口是否启动 1lsof -i :6379 结果是没有启动的 启动方法：在/usr/local/bin下： 1$ redis-server &#x2F;myredis&#x2F;redis.conf 默认端口是6379 1$ redis-cli -p 6379 检查是否连接成功 1127.0.0.1:6379&gt; ping 1PONG 返回PONG表示成功 退出： 12127.0.0.1:6379&gt; SHUTDOWNexit KEY关键字12345678910DBSIZE &#x2F;&#x2F;当前数据库的key的数量select db &#x2F;&#x2F;切换数据库Flushdb &#x2F;&#x2F;清空当前库Flushall &#x2F;&#x2F;清空所有库key * 当前库所有的keyexists key &#x2F;&#x2F;判断key是否存在，有返回1，无则0move key db &#x2F;&#x2F;移动到目标库，当前库的移除expire key 秒钟 &#x2F;&#x2F;给key设置过期时间，过期后查询到的是nid空值ttl key &#x2F;&#x2F;查看还有多久过期，-1表示永不过期，-2表示已过期type key &#x2F;&#x2F;查看key是什么类型 redis五种数据结构String：字符串123456789101112set key valueget keydel keyappend key value &#x2F;&#x2F;在value后追加strlen &#x2F;&#x2F;String长度INCR&#x2F;DECR KEY&#x2F;&#x2F;一定要是数字，自增自减INCRBY&#x2F;DECRBY KEY 步长 &#x2F;&#x2F;多步递增递减getrange&#x2F;setrange key index index &#x2F;&#x2F;根据索引取值设置值setex key 秒钟 value &#x2F;&#x2F;设置值的时候设置过期时间setnx &#x2F;&#x2F;set if not existmset key1 value1 key2 value2 &#x2F;&#x2F; 设置多个值mget&#x2F;msetnx List：列表1234567891011LPUSH list1 1 2 3 4 5 (类似栈)LRANGE list1 0 -154321lpop list1&quot;5&quot;rpop list1&quot;1&quot; 1234567891011RPUSH list2 1 2 3 4 5LRANGE list2 0 -112345lpop list2&quot;1&quot;rpop list2&quot;5&quot; 1234567lindex &#x2F;&#x2F;按照索引下标获得元素，（从上到下）llen &#x2F;&#x2F;长度LREM KEY N Value &#x2F;&#x2F;删除key数组中的N个ValueLTRIM KEY 开始index 结束index &#x2F;&#x2F;截取指定范围的值后在赋值给keyrpoplpush 源列表 目的列表 &#x2F;&#x2F;把源列表的最底的值移动到目的列表的最上面lset key index value &#x2F;&#x2F;根据数组下标设置成valuelinsert key before&#x2F;after 值1 值2 &#x2F;&#x2F;把值2的值插入到key数组值1的前面&#x2F;后面 Set：集合1234567891011sadd key value1，value1，value2 &#x2F;&#x2F;只会进去不重复的值 smembers key value 0 -1 &#x2F;&#x2F;打印全部sismember key value &#x2F;&#x2F;判断value是否在key里scard &#x2F;&#x2F;获取集合里面的元素srem key value &#x2F;&#x2F;删除集合中元素srandmember key &#x2F;&#x2F;随机出几个数spop key &#x2F;&#x2F;随机出栈smove key1 key2 在key1里某个值 &#x2F;&#x2F;将key1里的某个值赋给key2sdiff set1 set2 &#x2F;&#x2F;差集，set1里有的，set2没有的sinter set1 set2 &#x2F;&#x2F;交集，都有的sunion set1 set2 &#x2F;&#x2F;并集 Hash ：哈希12345678910value是一个键值对hset key &lt;key1,value1&gt;hget key key1hmset KEY1 keyA valueA KEY2 keyB valueBhmgetall hdel KEY1 keyAHEXISTS KEY1 keyA &#x2F;&#x2F;判断是否存在hkeys&#x2F;kvals KEY1hincrby&#x2F;hincrbyfloat KEY1 keyA 步长&#x2F;浮点数 &#x2F;&#x2F;自增自减hsetnx Zset（sorted set）：有序集合在set基础上，加一个score值 set是 k1 v1 v2 v3 zset是 k1 score1 v1 score2 v2 12345678910111213zadd key k1 score1 v1 score2 v2zrange key 0 -1 &#x2F;&#x2F;只会打印valuezrange key 0 -1 withscores &#x2F;&#x2F;会打印v1，score，v2，scorezrangebyscore key 开始score 结束score &#x2F;&#x2F; &quot;（&quot; 表示不包含， a（ b 表示大于等于a，小于b zrangebyscore key 开始score 结束score withscorezrangebyscore key 开始score 结束score limit 开始下标步 多少步 zrem key score对应的value &#x2F;&#x2F;删除元素zacard key &#x2F;&#x2F;统计key里value的个数zcount key score区间zrank key value &#x2F;&#x2F;获取下标zrevrank key value &#x2F;&#x2F;获取反转后的下标zrevrange key 0 -1&#x2F;&#x2F;反转集合zrevrangebyscore key 结束score 开始score &#x2F;&#x2F;反转集合，index也要反转 配置文件Units1.配置大小单位，开头定义了一些基本的度量单位，只支持bytes，不支持bit 2.对大小写不敏感 INCLUDES可以通过includes包含，redis.conf可以作为总闸,包含其他 GENERALdaemonize 默认为no pidfile 进程管道id文件 port 默认端口 tcp-backlog,backlog 511是一个连接队列,在高并发环境下你需要一个高backlog值来避免慢客户端连接问题 bind 端口及网卡的绑定 timeout 0 当系统空闲一段时间后中断 Tcp-keepalive 单位为秒,设置为0则不会进行Keepalive检测 loglevel notice 日志级别 logfile 日志文件 syslog-enabled 是否把日志输出到syslog中 syslog-ident 指定syslog里的日志标志 syslog-facility 指定syslog设备,值可以是USER或LOCAL0-LOCAL7 databases 默认有16个库 SECURITY123config get requirepassconfig set requirepass &quot;123456&quot; &#x2F;&#x2F;立即生效访问任何命令前使用 auth 123456 LIMITmaxclients 10000 允许10000人连接 maxmemory maxmemory-policy noexiction 缓存过期清洁策略 ,默认永不过期 volatile-lru:使用LRU算法移除key,只对设置了过期时间的键 allkeys-lru:使用LRU算法移除key volatile-random:在过期集合中移除随机的key,只对设置了过期时间的键 allkeys-random:移除随机的key volatile-ttl:移除那些TTL值最小的key,即那些最近要过期的key noexiction :不进行移除.针对写操作,只是返回错误信息 LRU算法:最近最少使用的 Maxmemory-samples 设置样本数量,LRU算法和最小TTL算法都并非是精确的算法,而是估算值,所以你可以设置样本的大小,redis默认会检查这么多个key并选择其中LRU的那个; 常用配置 redis默认不是以守护进程的方式运行,可以通过该配置项修改,使用yes启动守护进程 1daemonize no 当Redis以守护进程方式运行时,Redis默认会把pid写入/var/run/redis.pid文件,可以通过pidfile指定 1pid &#x2F;var&#x2F;run&#x2F;redis.pid 指定redis监听端口,默认端口为6379 1port 6379 绑定的主机地址 1blind 127.0.0.1 当客户端闲置多长时间后关闭连接,如果指定为0,表示关闭该功能 1timeout 300 指定日志记录级别,Redis总共支持四个级别,debug、verbose、notice、warning，默认为verbose 1loglevel verbose 日志记录方式，默认为标准输出，如果配置Redis为守护进程方式，而这里又配置为日志记录方式为标准输出，则日志将会发送给/dev/null 1logfile stdout 设置数据库的数量，默认数据库为0，可以使用命令在连接上指定数据库id 1databases 16 指定在多长时间内，有多少次更新操作，就将数据同步到数据文件，可以多个条件配合 12345save &lt;seconds&gt; &lt;changes&gt;Redis默认配置文件中提供了三个条件:save 900 1save 300 10save 60 10000 指定存储至本地数据库时是否压缩数据，默认为yes，Redis采用LZF压缩，如果为了节省CPU时间，可以关闭该选项，但会导致数据库文件变的巨大 1rdbcompression yes 指定本地数据库文件名，默认为dump.rdb 1dbfilename dump.rdb 指定本地数据库存放目录 1dir .&#x2F; 设置当本机为slav服务时，设置master服务的IP地址及端口，在Redis启动时，它会自动从master进行数据同步 1slaveof &lt;masterip&gt; &lt;masterport&gt; 当master服务先设置了密码保护，slav服务连接master的密码 1masterauth &lt;master-password&gt; 设置Redis连接密码，如果配置了连接密码，客户端在连接Redis时需要通过AUTH 命令提供密码，默认关闭 1requirepass foobared 设置同一时间最大客户端连接数，默认无限制，Redis可以同时打开的客户端连接数为Redis进程可以打开的最大文件描述符，如果设置 maxclients 0，表示不作限制。当客户端连接数到达限制时，Redis会关闭新的连接并向客户端返回max numbers of clients reached 错误信息 1maxclients 128 指定Redis最大内存限制，Redis在启动时会把数据加载到内存中，达到最大内存后，redis会先尝试清除已到期或即将到期的Key，当此方法处理后，仍然到达最大内存设置，将无法再进行写入操作，但仍然可以进行读取操作。Redis新的vm机制，会把key存放内存，value会存放在swap区。 1maxmemory &lt;bytes&gt; 指定是否在每次更新操作后进行日志记录。Redis在默认情况下时异步的把数据写入磁盘，如果不开启，可能会在断电时导致一段时间内的数据丢失。因为redis本身同步数据文件时按save条件来同步的，所以有的数据会在一段时间内只存在内存中。默认为no 1appendonly no 指定更新日志文件名，默认为appendonly.aof 1appendfilename appendonly.aof 指定更新日志条件，共有3个可选值： 1234appendfsync everysecno: 表示等操作系统进行数据缓存同步到磁盘（快）always：表示每次更新操作后手动调用fsync()将数据写到磁盘（慢，安全）everysec：表示每秒同步一次（折中，默认值） 指定是否启用虚拟内存机制，默认为no。VM机制将数据分页存放，有Redis将访问量较少的页即冷数据swap到磁盘上，访问多的页面由磁盘换出到内存中 1vm-enabled no 虚拟内存文件路径,默认值为/tmp/redis.swap 1vm-swap-file &#x2F;tmp&#x2F;redis.swap 将所有大于vm-max-memory的数据存入虚拟内存，无论vm-max-memory设置多小，所有索引数据都是内存存储的(Redis的索引数据 就是keys)，也就是说，当vm-max-memory设置为0的时候，其实是所有value都存在于磁盘。默认为0 1vm-max-memory 0 Redis swap文件分成了很多page，一个对象可以保存在多个page上面，但一个page上不能被多个对象共享，vm-page-size是要根据存储的数据大小来设定的，作者建议如果存储很多小对象，page大小最好设置为32或者64bytes;如果存储很大的对象，则可以使用更大的page，如果不确定，就使用默认值 1vm-page-size 32 设置swap文件中的page数量，由于页表(一种表示页面空闲或使用的bitmap)是放在内存中的，在磁盘上每8个page将消耗1bytes的内存 1vm-pages 134217728 设置访问swap文件的线程数，最好不要超过机器的核数，如果设置为0，那么所有对swap文件的操作都是串行的，可能会造成比较长时间的延迟。默认值为4 1vm-max-threads 4 设置在向客户端应答时，是否把较小的包含并为一个包发送，默认为开启 1glueoutputbuf yes 指定在超过一定的数量或者最大的元素超过某一临界值时，采用一种特殊的哈希算法 12hash-max-zipmap-entries 64hash-max-zipmap-value 512 指定是否激活重置哈希，默认为开启 1activerehashing yes 指定包含其他的配置文件，可以在同一主机上多个Redis实例之间同一份配置文件，而同时各个实例又拥有自己的特定配置文件 1inclue &#x2F;path&#x2F;to.local,conf Redis持久化RDB 在指定的时间间隔内将内存中的数据集快照写入磁盘，即Snapshot快照，它恢复时是将快照文件直接读到内存里 是什么？Redis会单独创建(fork)一个子进程来进行持久化，会先将数据写入到一个临时文件中，待持久化过程都结束了，再用这个临时文件，替换上次持久化好的文件。 整个过程中，主进程是不进行任何IO操作的，这就确保了极高的性能。 如果需要进行大规模数据的恢复，且对于数据恢复的完整性不是非常敏感，那RDB方法要比AOF方式更加的高效。 RDB的缺点是最后一次持久化后的数据可能丢失。 Fork Fork的作用是复制一个与当前进程一样的进程。新进程的所有数据（变量、环境变量、程序计数器等） 数值都和原进程一致，但是是一个全新的进程，并作为原进程的子进程 RDB保存的是dump.rdb文件, 先拷贝一份rdb，删除原rdb，再重命名为dump.rdb，即可恢复 配置文件的位置##########SNAPSHOT########### save 秒钟 写操作次数 禁用 save “” stop-writes-on-bgsave-error yes 如果后台在save操作出现错误的时候，停止写入 如果配置为no，表示你不在乎数据不一致或者有其他的手段发现和控制 rgbchecksum yes 在存储快照后， 命令 save 手动保存 bgsave Redis会在后台异步进行快照操作，快照同时还可以响应客户端请求，可以通过lastsave命令获得最后一次成功执行快照的时间 执行flushall命令，也会产生dump.rdb文件，但里面是空的，无意义。 config get dir获取目录 停止 动态所有停止RDB保存规则的方法：redis-cli config set save “” 优势1.适合大规模的数据恢复 2.对数据完整性和一致性要求不高 劣势1.在一定间隔时间做一次备份，所有如果redis意外down掉的话，就会丢失最后一次快照后的所有修改 2.fork的时候，内存中的数据被克隆了一份，大致2倍的膨胀性需要考虑 总结12345内存中的 rdbSave 磁盘中的数据对象 ----------》 RDB文件 rdbload RDB是一个非常紧凑的文件 RDB在保存文件时父进程唯一要做的就是fork出一个子进程来做，接下来的工作全部由子进程来做， 父进程不需要再做其他IO操作，所以RDB持久化方式可以最大化redis的性能 与AOF相比，在恢复大的数据集的时候，RDB方式会更快一些。 数据丢失风险大 RDB需要经常fork子进程来保存数据集到硬盘上，当数据集比较大的时候，fork的过程是非常耗时的，可能会导致Redis在一些毫秒级不能响应客户端的请求。 Redis持久化之AOF 以日志的形式来记录每个写操作，将Redis执行过的所有写指令记录下来（读操作不记录），只许追加文件但不可以改写文件，redis启动之初会读取该文件重新构建数据，换言之，redis重启的话就根据日志文件的内容将写指令从前到后执行一次以完成数据的恢复工作 AOF保存的是appendonly.aof文件 ###########appendonly########## 恢复：删除dump.rdb，vim appendonly.aof，删除末尾行的FLUSHALL，再次连接数据库即可访问。 两者可以共存，优先找aof，如果aof有修改为不能识别的字符，开启redis时会被拒绝。 这时，当前文件夹下有一个redis-check-aof，使用命令： 12redis-check-aof --fix appendonly.aofcontinue?[y&#x2F;N]:y 命令会删除不符合语法规范的字段。 rewriteAOF采用文件追加方式，文件会越来越大为避免出现此种情况，新增了重写机制，当AOF文件的大小超过所设定的阈值时，Redis就会启动AOF文件的内容压缩，只保留可以恢复数据的最小指令集.可以使用bgrewriteaof 重写原理： AOF文件持续增长而过大时，会fork出一条新进程来将文件重写（也是先写临时文件最后再rename），遍历新进程的内存中数据，每条记录有一条的set 语句。重写aof文件的操作，并没有读取旧的aof文件，而是将整个内存中的数据库内容用命令的方式重写了一个新的aof文件，这点和快照有点类似。 触发机制： Redis会记录上次重写时的AOF大小，默认配置是当AOF文件大小是上次rewrite后大小的一倍且文件大于64M时触发。 auto-aof-rewrite-percentage 100 一倍 auto-aof-rewrite-min-size 64mb 优势每秒同步：appendfsync always 同步持久化 每次发生数据变更会被立即记录到磁盘 性能较差但数据完整比较好 每修改同步：appendfsync everysec 异步操作，每秒记录 如果一秒内宕机，有数据丢失。 不同步：appendfsync no 从不同步 劣势相同数据集的数据而言aof文件要远大于rdb文件，恢复速度慢与rdb aof运行效率要慢与rdb，每秒同步策略较好，不同步效率和rdb相同 1234 AOF 网络协议格式 _________________ 命令请求 ________________ 的命令内容 ____________________| 客户端 | __________&gt; | 服务器 | __________&gt;| AOF文件 ||_________________| |________________| |___________________| aof文件时一个只进行追加的日志文件 Redis可以在AoF文件体积变得过大时，自动地在后台对AOF进行重写 对于相同的数据集来说，AOF文件的体积通常要大于RDB文件的体积 根据所使用的fsync策略，AOF的速度可能会慢于RDB 总结 RDB持久化方式能够在指定的时间间隔能对你的数据进行快照存储 AOP持久化方式记录每次对服务器写的操作，当服务器重启的时候回重新执行这些命令来回复原始的数据，AOP命令以redis协议追加保存每次写的操作到文件末尾. Redis还能对AOF文件进行后台重写，使得AOF文件的体积不至于过大 只做缓存：如果你只希望你的数据在服务器运行的时候存在，你也可以不使用任何持久化方式. 同时开启两种持久化方式.在这种情况下,当redis重启的时候会优先载入AOF文件来恢复原始的数据,因为在通常情况下AOF文件保存的数据集要比RDB文件保存的数据集要完整. RDB的数据不实时,同时使用两者时服务器重启也只会找AOF文件, 建议不要只使用AOF,因为RDB更适合于备份数据库(AOF在不断变化不好备份), 快速重启,而且不会有AOF可能存在的bug,留着作为一个万一的手段. 事务 可以一次执行多个命令，本质是一组命令的集合。一个事务中的所有命令都会序列化，按顺序地串行化执行而不会被其他命令插入，不许加塞 能做什么？一个队列中，一次性的、顺序性、排他性的执行一系列命令 常用命令 DISCARD 取消事务，放弃执行事务块内的所有命令。 EXEC 执行所有事务块内的命令。 MULTI 标记一个事务块的开始。 UNWATCH 取消 WATCH 命令对所有 key 的监视。 WATCH key [key …] 监视一个(或多个) key ，如果在事务执行之前这个(或这些) key 被其他命令所改动，那么事务将被打断。 正常执行MULTI 相当与 一个新的购物车，每输入一条命令返回QUEUED相当于加入购物车，EXEC执行命令相当于结账。 放弃事务在事务没有EXEC之前调用DISCARD 全体连坐如果有一个指令不能正常运行（编译出错），事务EXEC会报错 冤头债主运行时出错的命令不会执行，而其他命令仍然会放行。 Redis是否支持事务？ 是部分支持。 watch监控 悲观锁(Pessimistic Lock) 我对这个事情的发展很悲观，每次去拿数据的时候都认为别人会修改，为了避免出事，把整张表锁了， 表锁，并发性最差，一致性最好。 乐观锁(Optimistic Lock) 我认为这个事没有人会去干，不会上锁，乐观锁在每条记录的后面加一个version版本号字段。 乐观锁策略：提交版本必须大于记录当前版本才能执行。 在调用MULTI之前，先调用 WATCH + KEY UNWATCH取消所有key的监控 有加塞篡改，监控了key，key被修改了，事务将被打断，调用UNWATCH再执行一次 阶段开启：以MULTI开始一个事务 入队：将多个命令入队到事务中，接到这些命令并不会立即执行，而是放到等待执行的事务队列里面。 执行：由EXEC命令触发事务 总结watch指令，类似乐观锁，事务提交时，如果key的值已被别的客户端改变，比如某个list已被别的客户端push/pop过了，整个事务队列都不会执行。 通过watch命令在事务执行之前监控了多个keys，倘若在watch之后有任何key的值发生了变化，EXEC命令执行的事务都将被放弃，同时返回Nullmulti-bulk应答以通知调用者事务执行失败。 特性：单独的隔离操作：事务中的所有命令都会序列化、按顺序的执行。事务在执行的过程中，不会被其他客户端发送来的请求所打断。 没有隔离级别的概念：队列中的命令没有提交之前都不会实际的被执行，因为事务提交前任何指令都不会被实际执行，也就不存在“事务内的查询要看到事务里的更新，在事务外查询不能看到”这个问题。 不保证原子性：redis同一个事务中如果有一条命令执行失败，其后的命令仍然会被执行，没有回滚。 消息订阅发布是什么？ 进程间的一种消息通信模式：发送者(pub)发送消息，订阅者(sub)接收消息 下图展示了频道channel1，以及订阅这个频道的三个客户端—client2和client5、client1之间的关系 当有新消息通过PUBLISH命令发送给频道channel1时，这个消息就会发送给订阅它的三个客户端 下表列出了 redis 发布订阅常用命令： 命令 描述 PSUBSCRIBE pattern [pattern …] 订阅一个或多个符合给定模式的频道。 PUBSUB subcommand [argument [argument …]] 查看订阅与发布系统状态。 PUBLISH channel message 将信息发送到指定的频道。 PUNSUBSCRIBE [pattern [pattern …]] 退订所有给定模式的频道。 SUBSCRIBE channel[channel …] 订阅给定的一个或多个频道的信息。 UNSUBSCRIBE[channel [channel …]] 指退订给定的频道。 SUBSCRIBE c1 c2 PULISH c1 message PSUBSCRIBE new* PULISH new4 message 主从复制 主机数据更新后根据配置和策略，自动同步到备机的master/slave机制，Master以写为主，Slave以读为主。 在/myredis下：123cp redis.conf redis6379.confcp redis.conf redis6380.confcp redis.conf redis6381.conf 修改配置文件 12345678vim redis6379.confpidfile &#x2F;var&#x2F;run&#x2F;redis.pid -&gt; &#x2F;var&#x2F;run&#x2F;redis6379.pidport 6379logfile &quot;&quot; -&gt; logfile &quot;6379.log&quot;备份dbfilename dump.rdb -&gt; dump6379.rdb6380,6381 以此为例 分别启动 12redis-server &#x2F;myredis&#x2F;redis6379.confredis-cli -p 6379 检查是否启动 1ps -ef|gref redis 使用命令 info replication查看信息,他们的角色都是master 1role:master 在主机（6379）下往数据库设值 123set k1 v1set k2 v2set k3 v3 在从机（6380,6381）分别使用SLAVEOF命令 1SLAVEOF 127.0.0.1 6379 这时再往主机6379设值 1set k4 v4 从机可以获取值 1234get k4&quot;v4&quot;get k1&quot;v1&quot; 再次使用命令 info replication查看信息 6379主机下多了两个奴隶：6380,6381 6780、6781的角色变成了奴隶。 如果从机尝试写入数据。会出错。因为Master以写为主，Slave以读为主 如果主机SHUTDOWN死了，调用从机的 info replication 1master_link_status: 由up变成了down 从机在原地待命 如果主机重新连接回来了，并设值 1set k7 v7 从机依然可以获取k7的值 12get k7&quot;v7&quot; 如果从机退出并重新连接role角色会变成master，并且会丢失退出期间的数据, 调用SLAVEOF 127.0.0.1 6379就可以恢复连接并获取到原来丢失的值 每次与master断开之后，都需要重新连接，除非配置进redis.conf 薪火相传 去中心化 上一个Slave可以是下一个slave的Master，Slave同样可以接收其他slaves的连接和同步请求，那么该slave作为了链条中的下一个的master，可以有效减轻master的写压力。 中途变更转向：会清除之前的数据，重新建立拷贝最新的 Slaveof 新主库IP 新主库端口 例如81是80的从机，80是79的从机，那么80是79的奴隶，80还是奴隶，81是80的奴隶。 反客为主一主二仆里，主机挂了，从机使用命令： 1SLAVEOF no one 当前从机的角色就变成了主机，其他从机需要调用： 12Slaveof 新主库IP 新主库端口&#x2F;&#x2F;使当前数据库停止与其他数据库同步，转成组数据库。 才能跟随新主机。 复制原理 Slave启动成功连接到master后会发送一个sync命令 Master接到命令启动后台的存盘进程，同时收集所有接受到的用于修改数据集命令，在后台进程执行完毕之后，master将传送整个数据文件到slave，以完成一次完全同步 全量复制：而slave服务在接收到数据库文件数据后，将其存盘并加载到内存中。 增量复制：Master继续将新的所有收集到的修改命令依次传给slave，完成同步 但是只要是重新连接master，一次完全同步（全量复制）将会被自动执行。 哨兵模式 反客为主的自动版，能够后台监控主机是否故障，如果故障了根据投票数自动将从库转换为主库 启动在/myredis下面创建一个sentinel.conf文件 12touch sentinel.confvim sentinel.conf 修改为以下内容： 一组 sentinel.conf 可以监控多个Master 123sentinel monitor 被监控数据库名字(自己起名字) 127.0.0.1 6379 1//数字1 表示主机挂掉后salve投票看让谁接替成为主机，得票数多少后成为主机 启动redis： 1redis-sentinel &#x2F;myredis&#x2F;sentinel.conf 主机断开之后，哨兵监控到了，就开始投票，如果两个从机一人一票，就会重新投票， 票数高的从机替换主机，其他从机都跟随这个新主机。 断开的主机回来之后变成了从机，并跟随新主机。 复制的缺点由于所有的写操作都是先在Master上操作，然后同步更新到Slave上，所以从Master同步带Slave机器有一定的延迟，当系统很繁忙的时候，延迟问题会更加严重，Slave机器数量的增加也会使这个问题更加严重。 Jedis测试联通 先启动 在/usr/local/bin下： 1$ redis-server &#x2F;myredis&#x2F;redis.conf 1$ redis-cli -p 6379 Java： 依赖： 1234567891011121314&lt;dependencies&gt; &lt;!-- https://mvnrepository.com/artifact/org.apache.commons/commons-pool2 --&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.commons&lt;/groupId&gt; &lt;artifactId&gt;commons-pool2&lt;/artifactId&gt; &lt;version&gt;2.8.0&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;redis.clients&lt;/groupId&gt; &lt;artifactId&gt;jedis&lt;/artifactId&gt; &lt;version&gt;3.3.0&lt;/version&gt; &lt;/dependency&gt; &lt;/dependencies&gt; 123456789101112/** * @Author: Wizard * @Date: 2020/6/29 18:33 */public class TestPing &#123; public static void main(String[] args) &#123; Jedis jedis = new Jedis(\"127.0.0.1\", 6379); System.out.println(jedis.ping()); &#125;&#125;------PONG API 1234567891011121314151617/** * @Author: Wizard * @Date: 2020/6/29 18:33 */public class TestAPI &#123; public static void main(String[] args) &#123; Jedis jedis = new Jedis(\"127.0.0.1\", 6379); jedis.set(\"k1\", \"v2\"); jedis.get(\"k1\"); Set&lt;String&gt; keys = jedis.keys(\"*\"); //事务 Transaction multi = jedis.multi(); multi.set(\"k2\", \"v2\");// multi.exec(); multi.discard(); &#125;&#125; 事务 1234567891011121314151617181920212223242526272829/** * @Author: Wizard * @Date: 2020/6/29 20:04 */public class TestTX &#123; public static void main(String[] args) throws InterruptedException &#123; TestTX test = new TestTX(); boolean b = test.transMethod(); System.out.println(b); &#125; public boolean transMethod() throws InterruptedException &#123; Jedis jedis = new Jedis(\"127.0.0.1\", 6379); int balance;//可用余额 int debt;//欠额 int amtToSubtract = 10;//实刷额度 jedis.watch(\"balance\"); //其他程序执行 // Thread.sleep(3000); //jedis.set(\"balance\", \"5\"); balance = Integer.parseInt(jedis.get(\"balance\")); if (balance &lt; amtToSubtract) &#123; jedis.unwatch(); System.out.println(\"modify\"); return false; &#125; return true; &#125;&#125; 主从 123456789101112131415/** * @Author: Wizard * @Date: 2020/6/29 20:04 */public class TestMS &#123; public static void main(String[] args) &#123; Jedis jedis_M = new Jedis(\"127.0.0.1\", 6379); Jedis jedis_S = new Jedis(\"127.0.0.1\", 6380); jedis_S.slaveof(\"127.0.0.1\", 6379); jedis_M.set(\"class\", \"1\"); System.out.println(jedis_S.get(\"class\")); &#125;&#125; 池 123456789101112131415161718192021222324252627/** * @Author: Wizard * @Date: 2020/6/29 20:29 */public class JedisPoolUtils &#123; private static volatile JedisPool jedisPool = null; private JedisPoolUtils() &#123; &#125; public static JedisPool getJedisPoolInstance() &#123; if (null == jedisPool) &#123; synchronized (JedisPoolUtils.class) &#123; if (null == jedisPool) &#123; JedisPoolConfig jedisPoolConfig = new JedisPoolConfig(); jedisPoolConfig.setMaxActive(); jedisPoolConfig.setMaxIdle(32); jedisPoolConfig.setMaxWaitMillis(100*1000); jedisPoolConfig.setTestOnBorrow(true); jedisPool = new JedisPool(\"127.0.0.1\", 6379); &#125; &#125; &#125; return jedisPool; &#125;&#125; JedisPoolConfig: 缓存雪崩","categories":[],"tags":[{"name":"sql","slug":"sql","permalink":"http://dqlcr5.coding-pages.com/tags/sql/"}]},{"title":"操作系统","slug":"操作系统","date":"2020-06-20T13:14:21.000Z","updated":"2020-06-24T02:09:38.042Z","comments":true,"path":"2020/06/20/操作系统/","link":"","permalink":"http://dqlcr5.coding-pages.com/2020/06/20/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/","excerpt":"OS Kernel的特征","text":"OS Kernel的特征 并发 计算机系统中存在多个运行的程序，需要OS管理和调度 共享 “同时”访问 互斥共享 虚拟 利用多道程序设计技术，让每个用户都觉得有一个计算机专门为他服务。 异步 程序的执行不是一贯到底，而是走走停停，向前推进的速度不可预知。 但只要运行环境相同，OS需要保证程序运行的结果也要相同。 关系：DISK：存放OS BIOS：基本I/O处理系统，最基本的功能是电源开启后检测外设，之后加载相应的软件来执行 Bootloader：加载OS，把OS从硬盘放到内存里，让CPU可以操作系统， 从图可以看出，计算机里面有一部分空间（硬盘）已经给BIOS占用了，但是还有很多地方是空的，BIOS需要从一个特定的地址开始执行，以X86为例，固定的地址为0xf000:fff0. CS寄存器和IP寄存器一起可以形成一个内存地址，一开始加电，BIOS就从这个地址开始执行。执行一系列的工作： POST（加电自检） 寻找显卡和执行BIOS，检查设备是否可以正常工作。初始化的检擦。 BIOS是如何把bootloader放进去的： Bootloader一般是放在硬盘的第一个主引导扇区。第一个扇区是512个字节。把bootloader放到内存里，CPU的掌控权就在bootloader； 操作系统与设备和程序交互。系统调用、异常、中断 系统调用（来源于应用程序）sys call 应用程序主动向操作系统发出服务请求。 异常（来源于不良的应用程序） exception 非法指令或者其他坏的处理状态（如：内存出错） 中断（来源与外设）interrupt 来自不同硬件设备的计时器和网络中断。 为什么应用程序不直接使用外设而要经过操作系统？ 在计算机运行中，内核是被信任的第三方 只有内核可以执行特权指令 为了方便应用程序 产生的源头： 中断：外设 异常：应用程序意想不到的行为 系统调用：应用程序请求操作提供服务。 处理时间： 中断：异步，异步：当这个事件产生的时候，我们应用程序并不知道什么时候产生。 异常：同步，异常执行到某条特定的指令后一定会产生 系统调用：异步或同步，当系统调用发出请求的时候，返回的时间是异步的 响应： 中断：持续，对用户应用程序是透明的、 异常: 杀死或者重新执行意想不到的应用程序指令 系统调用：等待和持续","categories":[],"tags":[{"name":"Operating Systems","slug":"Operating-Systems","permalink":"http://dqlcr5.coding-pages.com/tags/Operating-Systems/"}]},{"title":"编码算法","slug":"编码算法","date":"2020-06-19T00:53:22.000Z","updated":"2020-06-19T01:08:34.559Z","comments":true,"path":"2020/06/19/编码算法/","link":"","permalink":"http://dqlcr5.coding-pages.com/2020/06/19/%E7%BC%96%E7%A0%81%E7%AE%97%E6%B3%95/","excerpt":"编码算法","text":"编码算法 要学习编码算法，先来看一看什么是编码。 ASCII码就是一种编码，字母A的编码是十六进制的0x41，字母B是0x42，以此类推： 字母 ASCII编码 A 0x41 B 0x42 C 0x43 D 0x44 … … 因为ASCII编码最多只能有127个字符，要想对更多的文字进行编码，就需要用Unicode。而中文的中使用Unicode编码就是0x4e2d，使用UTF-8则需要3个字节编码： 汉字 Unicode编码 UTF-8编码 中 0x4e2d 0xe4b8ad 文 0x6587 0xe69687 编 0x7f16 0xe7bc96 码 0x7801 0xe7a081 … … … 因此，最简单的编码是直接给每个字符指定一个若干字节表示的整数，复杂一点的编码就需要根据一个已有的编码推算出来。 比如UTF-8编码，它是一种不定长编码，但可以从给定字符的Unicode编码推算出来。 URL编码URL编码是浏览器发送数据给服务器时使用的编码，它通常附加在URL的参数部分，例如： https://www.baidu.com/s?wd=%E4%B8%AD%E6%96%87 之所以需要URL编码，是因为出于兼容性考虑，很多服务器只识别ASCII字符。但如果URL中包含中文、日文这些非ASCII字符怎么办？不要紧，URL编码有一套规则： 如果字符是AZ，az，0~9以及-、_、.、*，则保持不变； 如果是其他字符，先转换为UTF-8编码，然后对每个字节以%XX表示。 例如：字符中的UTF-8编码是0xe4b8ad，因此，它的URL编码是%E4%B8%AD。URL编码总是大写。 Java标准库提供了一个URLEncoder类来对任意字符串进行URL编码： 123456public class Main &#123; public static void main(String[] args) &#123; String encoded = URLEncoder.encode(\"中文!\", StandardCharsets.UTF_8); System.out.println(encoded); &#125;&#125; 上述代码的运行结果是%E4%B8%AD%E6%96%87%21，中的URL编码是%E4%B8%AD，文的URL编码是%E6%96%87，!虽然是ASCII字符，也要对其编码为%21。 和标准的URL编码稍有不同，URLEncoder把空格字符编码成+，而现在的URL编码标准要求空格被编码为%20，不过，服务器都可以处理这两种情况。 如果服务器收到URL编码的字符串，就可以对其进行解码，还原成原始字符串。Java标准库的URLDecoder就可以解码： 123456public class Main &#123; public static void main(String[] args) &#123; String decoded = URLDecoder.decode(\"%E4%B8%AD%E6%96%87%21\", StandardCharsets.UTF_8); System.out.println(decoded); &#125;&#125; 要特别注意：URL编码是编码算法，不是加密算法。URL编码的目的是把任意文本数据编码为%前缀表示的文本，编码后的文本仅包含AZ，az，0~9，-，_，.，*和%，便于浏览器和服务器处理。 Base64编码URL编码是对字符进行编码，表示成%xx的形式，而Base64编码是对二进制数据进行编码，表示成文本格式。 Base64编码可以把任意长度的二进制数据变为纯文本，且只包含AZ、az、0~9、+、/、=这些字符。它的原理是把3字节的二进制数据按6bit一组，用4个int整数表示，然后查表，把int整数用索引对应到字符，得到编码后的字符串。 举个例子：3个byte数据分别是e4、b8、ad，按6bit分组得到39、0b、22和2d： 123456789┌───────────────┬───────────────┬───────────────┐│ e4 │ b8 │ ad │└───────────────┴───────────────┴───────────────┘┌─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┐│1│1│1│0│0│1│0│0│1│0│1│1│1│0│0│0│1│0│1│0│1│1│0│1│└─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┘┌───────────┬───────────┬───────────┬───────────┐│ 39 │ 0b │ 22 │ 2d │└───────────┴───────────┴───────────┴───────────┘ 因为6位整数的范围总是063，所以，能用64个字符表示：字符AZ对应索引025，字符az对应索引2651，字符09对应索引52~61，最后两个索引62、63分别用字符+和/表示。 在Java中，二进制数据就是byte[]数组。Java标准库提供了Base64来对byte[]数组进行编解码： 1234567public class Main &#123; public static void main(String[] args) &#123; byte[] input = new byte[] &#123; (byte) 0xe4, (byte) 0xb8, (byte) 0xad &#125;; String b64encoded = Base64.getEncoder().encodeToString(input); System.out.println(b64encoded); &#125;&#125; 编码后得到5Lit4个字符。要对Base64解码，仍然用Base64这个类： 123456public class Main &#123; public static void main(String[] args) &#123; byte[] output = Base64.getDecoder().decode(\"5Lit\"); System.out.println(Arrays.toString(output)); // [-28, -72, -83] &#125;&#125; 有的童鞋会问：如果输入的byte[]数组长度不是3的整数倍肿么办？这种情况下，需要对输入的末尾补一个或两个0x00，编码后，在结尾加一个=表示补充了1个0x00，加两个=表示补充了2个0x00，解码的时候，去掉末尾补充的一个或两个0x00即可。 实际上，因为编码后的长度加上=总是4的倍数，所以即使不加=也可以计算出原始输入的byte[]。Base64编码的时候可以用withoutPadding()去掉=，解码出来的结果是一样的： 1234567891011public class Main &#123; public static void main(String[] args) &#123; byte[] input = new byte[] &#123; (byte) 0xe4, (byte) 0xb8, (byte) 0xad, 0x21 &#125;; String b64encoded = Base64.getEncoder().encodeToString(input); String b64encoded2 = Base64.getEncoder().withoutPadding().encodeToString(input); System.out.println(b64encoded); System.out.println(b64encoded2); byte[] output = Base64.getDecoder().decode(b64encoded2); System.out.println(Arrays.toString(output)); &#125;&#125; 因为标准的Base64编码会出现+、/和=，所以不适合把Base64编码后的字符串放到URL中。一种针对URL的Base64编码可以在URL中使用的Base64编码，它仅仅是把+变成-，/变成_： 123456789public class Main &#123; public static void main(String[] args) &#123; byte[] input = new byte[] &#123; 0x01, 0x02, 0x7f, 0x00 &#125;; String b64encoded = Base64.getUrlEncoder().encodeToString(input); System.out.println(b64encoded); byte[] output = Base64.getUrlDecoder().decode(b64encoded); System.out.println(Arrays.toString(output)); &#125;&#125; Base64编码的目的是把二进制数据变成文本格式，这样在很多文本中就可以处理二进制数据。例如，电子邮件协议就是文本协议，如果要在电子邮件中添加一个二进制文件，就可以用Base64编码，然后以文本的形式传送。 Base64编码的缺点是传输效率会降低，因为它把原始数据的长度增加了1/3。 和URL编码一样，Base64编码是一种编码算法，不是加密算法。 如果把Base64的64个字符编码表换成32个、48个或者58个，就可以使用Base32编码，Base48编码和Base58编码。字符越少，编码的效率就会越低。 小结URL编码和Base64编码都是编码算法，它们不是加密算法； URL编码的目的是把任意文本数据编码为%前缀表示的文本，便于浏览器和服务器处理； Base64编码的目的是把任意二进制数据编码为文本，但编码后数据量会增加1/3。","categories":[],"tags":[{"name":"dataAlgorithm","slug":"dataAlgorithm","permalink":"http://dqlcr5.coding-pages.com/tags/dataAlgorithm/"}]},{"title":"哈希算法","slug":"哈希算法","date":"2020-06-17T10:03:58.000Z","updated":"2020-06-17T11:03:45.393Z","comments":true,"path":"2020/06/17/哈希算法/","link":"","permalink":"http://dqlcr5.coding-pages.com/2020/06/17/%E5%93%88%E5%B8%8C%E7%AE%97%E6%B3%95/","excerpt":"哈希算法 哈希算法（Hash）又称摘要算法（Digest），它的作用是：对任意一组输入数据进行计算，得到一个固定长度的输出摘要。","text":"哈希算法 哈希算法（Hash）又称摘要算法（Digest），它的作用是：对任意一组输入数据进行计算，得到一个固定长度的输出摘要。 哈希算法最重要的特点就是： 相同的输入一定得到相同的输出； 不同的输入大概率得到不同的输出。 哈希算法的目的就是为了验证原始数据是否被篡改。 Java字符串的hashCode()就是一个哈希算法，它的输入是任意字符串，输出是固定的4字节int整数： 123&quot;hello&quot;.hashCode(); &#x2F;&#x2F; 0x5e918d2&quot;hello, java&quot;.hashCode(); &#x2F;&#x2F; 0x7a9d88e8&quot;hello, bob&quot;.hashCode(); &#x2F;&#x2F; 0xa0dbae2f 两个相同的字符串永远会计算出相同的hashCode，否则基于hashCode定位的HashMap就无法正常工作。这也是为什么当我们自定义一个class时，覆写equals()方法时我们必须正确覆写hashCode()方法。 哈希碰撞哈希碰撞是指，两个不同的输入得到了相同的输出： 12&quot;AaAaAa&quot;.hashCode(); &#x2F;&#x2F; 0x7460e8c0&quot;BBAaBB&quot;.hashCode(); &#x2F;&#x2F; 0x7460e8c0 有童鞋会问：碰撞能不能避免？答案是不能。碰撞是一定会出现的，因为输出的字节长度是固定的，String的hashCode()输出是4字节整数，最多只有4294967296种输出，但输入的数据长度是不固定的，有无数种输入。所以，哈希算法是把一个无限的输入集合映射到一个有限的输出集合，必然会产生碰撞。 碰撞不可怕，我们担心的不是碰撞，而是碰撞的概率，因为碰撞概率的高低关系到哈希算法的安全性。一个安全的哈希算法必须满足： 碰撞概率低； 不能猜测输出。 不能猜测输出是指，输入的任意一个bit的变化会造成输出完全不同，这样就很难从输出反推输入（只能依靠暴力穷举）。假设一种哈希算法有如下规律： 123hashA(&quot;java001&quot;) &#x3D; &quot;123456&quot;hashA(&quot;java002&quot;) &#x3D; &quot;123457&quot;hashA(&quot;java003&quot;) &#x3D; &quot;123458&quot; 那么很容易从输出123459反推输入，这种哈希算法就不安全。安全的哈希算法从输出是看不出任何规律的： 123hashB(&quot;java001&quot;) &#x3D; &quot;123456&quot;hashB(&quot;java002&quot;) &#x3D; &quot;580271&quot;hashB(&quot;java003&quot;) &#x3D; ??? 常用的哈希算法有： 算法 输出长度（位） 输出长度（字节） MD5 128 bits 16 bytes SHA-1 160 bits 20 bytes RipeMD-160 160 bits 20 bytes SHA-256 256 bits 32 bytes SHA-512 512 bits 64 bytes 根据碰撞概率，哈希算法的输出长度越长，就越难产生碰撞，也就越安全。 Java标准库提供了常用的哈希算法，并且有一套统一的接口。我们以MD5算法为例，看看如何对输入计算哈希： 1234567891011public class Main &#123; public static void main(String[] args) throws Exception &#123; // 创建一个MessageDigest实例: MessageDigest md = MessageDigest.getInstance(\"MD5\"); // 反复调用update输入数据: md.update(\"Hello\".getBytes(\"UTF-8\")); md.update(\"World\".getBytes(\"UTF-8\")); byte[] result = md.digest(); // 16 bytes: 68e109f0f40ca72a15e05cc22786f8e6 System.out.println(new BigInteger(1, result).toString(16)); &#125;&#125; 使用MessageDigest时，我们首先根据哈希算法获取一个MessageDigest实例，然后，反复调用update(byte[])输入数据。当输入结束后，调用digest()方法获得byte[]数组表示的摘要，最后，把它转换为十六进制的字符串。 运行上述代码，可以得到输入HelloWorld的MD5是68e109f0f40ca72a15e05cc22786f8e6。 哈希算法的用途因为相同的输入永远会得到相同的输出，因此，如果输入被修改了，得到的输出就会不同。 我们在网站上下载软件的时候，经常看到下载页显示的哈希： 如何判断下载到本地的软件是原始的、未经篡改的文件？我们只需要自己计算一下本地文件的哈希值，再与官网公开的哈希值对比，如果相同，说明文件下载正确，否则，说明文件已被篡改。 哈希算法的另一个重要用途是存储用户口令。如果直接将用户的原始口令存放到数据库中，会产生极大的安全风险： 数据库管理员能够看到用户明文口令； 数据库数据一旦泄漏，黑客即可获取用户明文口令。 不存储用户的原始口令，那么如何对用户进行认证？ 方法是存储用户口令的哈希，例如，MD5。 在用户输入原始口令后，系统计算用户输入的原始口令的MD5并与数据库存储的MD5对比，如果一致，说明口令正确，否则，口令错误。 因此，数据库存储用户名和口令的表内容应该像下面这样： username password bob f30aa7a662c728b7407c54ae6bfd27d1 alice 25d55ad283aa400af464c76d713c07ad tim bed128365216c019988915ed3add75fb 这样一来，数据库管理员看不到用户的原始口令。即使数据库泄漏，黑客也无法拿到用户的原始口令。想要拿到用户的原始口令，必须用暴力穷举的方法，一个口令一个口令地试，直到某个口令计算的MD5恰好等于指定值。 使用哈希口令时，还要注意防止彩虹表攻击。 什么是彩虹表呢？上面讲到了，如果只拿到MD5，从MD5反推明文口令，只能使用暴力穷举的方法。 然而黑客并不笨，暴力穷举会消耗大量的算力和时间。但是，如果有一个预先计算好的常用口令和它们的MD5的对照表： 常用口令 MD5 hello123 f30aa7a662c728b7407c54ae6bfd27d1 12345678 25d55ad283aa400af464c76d713c07ad passw0rd bed128365216c019988915ed3add75fb 19700101 570da6d5277a646f6552b8832012f5dc … … 20201231 6879c0ae9117b50074ce0a0d4c843060 这个表就是彩虹表。如果用户使用了常用口令，黑客从MD5一下就能反查到原始口令： bob的MD5：f30aa7a662c728b7407c54ae6bfd27d1，原始口令：hello123； alice的MD5：25d55ad283aa400af464c76d713c07ad，原始口令：12345678； tim的MD5：bed128365216c019988915ed3add75fb，原始口令：passw0rd。 这就是为什么不要使用常用密码，以及不要使用生日作为密码的原因。 即使用户使用了常用口令，我们也可以采取措施来抵御彩虹表攻击，方法是对每个口令额外添加随机数，这个方法称之为加盐（salt）： 1digest &#x3D; md5(salt+inputPassword) 经过加盐处理的数据库表，内容如下： username salt password bob H1r0a a5022319ff4c56955e22a74abcc2c210 alice 7$p2w e5de688c99e961ed6e560b972dab8b6a tim z5Sk9 1eee304b92dc0d105904e7ab58fd2f64 加盐的目的在于使黑客的彩虹表失效，即使用户使用常用口令，也无法从MD5反推原始口令。 SHA-1SHA-1也是一种哈希算法，它的输出是160 bits，即20字节。SHA-1是由美国国家安全局开发的，SHA算法实际上是一个系列，包括SHA-0（已废弃）、SHA-1、SHA-256、SHA-512等。 在Java中使用SHA-1，和MD5完全一样，只需要把算法名称改为&quot;SHA-1&quot;： 1234567891011public class Main &#123; public static void main(String[] args) throws Exception &#123; // 创建一个MessageDigest实例: MessageDigest md = MessageDigest.getInstance(\"SHA-1\"); // 反复调用update输入数据: md.update(\"Hello\".getBytes(\"UTF-8\")); md.update(\"World\".getBytes(\"UTF-8\")); byte[] result = md.digest(); // 20 bytes: db8ac1c259eb89d4a131b253bacfca5f319d54f2 System.out.println(new BigInteger(1, result).toString(16)); &#125;&#125; 类似的，计算SHA-256，我们需要传入名称&quot;SHA-256&quot;，计算SHA-512，我们需要传入名称&quot;SHA-512&quot;。Java标准库支持的所有哈希算法可以在这里查到。","categories":[],"tags":[{"name":"dataAlgorithm","slug":"dataAlgorithm","permalink":"http://dqlcr5.coding-pages.com/tags/dataAlgorithm/"}]},{"title":"插值查找算法","slug":"插值查找算法","date":"2020-06-17T01:18:21.000Z","updated":"2020-06-17T01:18:58.253Z","comments":true,"path":"2020/06/17/插值查找算法/","link":"","permalink":"http://dqlcr5.coding-pages.com/2020/06/17/%E6%8F%92%E5%80%BC%E6%9F%A5%E6%89%BE%E7%AE%97%E6%B3%95/","excerpt":"插值查找算法","text":"插值查找算法 12345678910111213141516171819202122232425262728293031323334/** * @Author: Wizard * @Date: 2020/6/17 9:06 */public class insertSearch &#123; /** * @param arr 数组 * @param left 左边的索引 * @param right 右边的索引 * @param findVal 要查找的值 * @return */ public static int insertValue(int[] arr, int left, int right, int findVal) &#123; System.out.println(\"插值查找次数...\"); //注意：findVal&lt;arr[0]和findVal&gt;arr[arr.length-1]必须需要 //否则得到的mid可能越界 if (left &gt; right || findVal &lt; arr[0] || findVal &gt; arr[arr.length - 1]) &#123; return -1; &#125; //求出mid,自适应 int mid = left + (right - left) * (findVal - arr[left] / arr[right] - arr[left]); int midVal = arr[mid]; if (findVal &gt; midVal) &#123; //应该向右递归 return insertValue(arr, mid + 1, right, findVal); &#125; else if (findVal &lt; midVal) &#123; return insertValue(arr, left, mid - 1, findVal); &#125; else &#123; return mid; &#125; &#125;&#125;","categories":[],"tags":[{"name":"dataAlgorithm","slug":"dataAlgorithm","permalink":"http://dqlcr5.coding-pages.com/tags/dataAlgorithm/"}]},{"title":"二分查找算法","slug":"二分查找算法","date":"2020-06-17T01:04:50.000Z","updated":"2020-06-17T01:17:21.808Z","comments":true,"path":"2020/06/17/二分查找算法/","link":"","permalink":"http://dqlcr5.coding-pages.com/2020/06/17/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E7%AE%97%E6%B3%95/","excerpt":"二分查找算法","text":"二分查找算法 12345678910111213141516171819202122232425/** * 二分查找算法 * * @param arr 待查找的数组,arr是升序排序 * @param target 需要查找的数 * @return 返回对应的下标，-1表示没有 */ public static int binarySearch(int[] arr, int target) &#123; int left = 0; int right = arr.length - 1; while (left &lt;= right) &#123; //说明可以继续查找 int mid = (left + right) / 2; if (arr[mid] == target) &#123; return mid; &#125; else if (arr[mid] &gt; target) &#123; right = mid - 1;//需要向左边查找 &#125; else &#123; left = mid + 1;//需要向右边查找 &#125; &#125; return -1; &#125;","categories":[],"tags":[{"name":"dataAlgorithm","slug":"dataAlgorithm","permalink":"http://dqlcr5.coding-pages.com/tags/dataAlgorithm/"}]},{"title":"线性查找算法","slug":"线性查找算法","date":"2020-06-17T00:54:06.000Z","updated":"2020-06-17T01:00:56.756Z","comments":true,"path":"2020/06/17/线性查找算法/","link":"","permalink":"http://dqlcr5.coding-pages.com/2020/06/17/%E7%BA%BF%E6%80%A7%E6%9F%A5%E6%89%BE%E7%AE%97%E6%B3%95/","excerpt":"线性查找算法","text":"线性查找算法 有一个数列： {1,8, 10, 89, 1000, 1234} ，判断数列中是否包含此名称 【顺序查找】 要求: 如果找到了，就提示找到，并给出下标值。 12345678910111213141516171819/** * @Author: Wizard * @Date: 2020/6/17 8:57 */public class OrderSearch &#123; public static void main(String[] args) &#123; int[] arr = &#123;1, 8, 10, 89, 1000, 1234&#125;; System.out.println(OrderFind(arr, 10)); &#125; public static int OrderFind(int[] arr, int value) &#123; for (int i = 0; i &lt; arr.length - 1; i++) &#123; if (arr[i] == value) &#123; return i; &#125; &#125; return -1; &#125;&#125;","categories":[],"tags":[{"name":"dataAlgorithm","slug":"dataAlgorithm","permalink":"http://dqlcr5.coding-pages.com/tags/dataAlgorithm/"}]},{"title":"多线程","slug":"多线程","date":"2020-06-15T01:13:04.000Z","updated":"2020-06-16T13:47:08.940Z","comments":true,"path":"2020/06/15/多线程/","link":"","permalink":"http://dqlcr5.coding-pages.com/2020/06/15/%E5%A4%9A%E7%BA%BF%E7%A8%8B/","excerpt":"多线程","text":"多线程 一个线程的生命周期线程是一个动态执行的过程，它也有一个从产生到死亡的过程。 下图显示了一个线程完整的生命周期。 新建状态: 使用 new 关键字和 Thread 类或其子类建立一个线程对象后，该线程对象就处于新建状态。它保持这个状态直到程序 start() 这个线程。 就绪状态: 当线程对象调用了start()方法之后，该线程就进入就绪状态。就绪状态的线程处于就绪队列中，要等待JVM里线程调度器的调度。 运行状态: 如果就绪状态的线程获取 CPU 资源，就可以执行 run()，此时线程便处于运行状态。处于运行状态的线程最为复杂，它可以变为阻塞状态、就绪状态和死亡状态。 阻塞状态: 如果一个线程执行了sleep（睡眠）、suspend（挂起）等方法，失去所占用资源之后，该线程就从运行状态进入阻塞状态。在睡眠时间已到或获得设备资源后可以重新进入就绪状态。可以分为三种： 等待阻塞：运行状态中的线程执行 wait() 方法，使线程进入到等待阻塞状态。 同步阻塞：线程在获取 synchronized 同步锁失败(因为同步锁被其他线程占用)。 其他阻塞：通过调用线程的 sleep() 或 join() 发出了 I/O 请求时，线程就会进入到阻塞状态。当sleep() 状态超时，join() 等待线程终止或超时，或者 I/O 处理完毕，线程重新转入就绪状态。 死亡状态: 一个运行状态的线程完成任务或者其他终止条件发生时，该线程就切换到终止状态。 线程的优先级每一个 Java 线程都有一个优先级，这样有助于操作系统确定线程的调度顺序。 Java 线程的优先级是一个整数，其取值范围是 1 （Thread.MIN_PRIORITY ） - 10 （Thread.MAX_PRIORITY ）。 默认情况下，每一个线程都会分配一个优先级 NORM_PRIORITY（5）。 具有较高优先级的线程对程序更重要，并且应该在低优先级的线程之前分配处理器资源。但是，线程优先级不能保证线程执行的顺序，而且非常依赖于平台。 创建一个线程Java 提供了三种创建线程的方法： 通过实现 Runnable 接口； 通过继承 Thread 类本身； 通过 Callable 和 Future 创建线程。 通过实现 Runnable 接口来创建线程创建一个线程，最简单的方法是创建一个实现 Runnable 接口的类。 为了实现 Runnable，一个类只需要执行一个方法调用 run()，声明如下： 1public void run() 你可以重写该方法，重要的是理解的 run() 可以调用其他方法，使用其他类，并声明变量，就像主线程一样。 在创建一个实现 Runnable 接口的类之后，你可以在类中实例化一个线程对象。 Thread 定义了几个构造方法，下面的这个是我们经常使用的： 1Thread(Runnable threadOb,String threadName); 这里，threadOb 是一个实现 Runnable 接口的类的实例，并且 threadName 指定新线程的名字。 新线程创建之后，你调用它的 start() 方法它才会运行。 1void start(); 下面是一个创建线程并开始让它执行的实例： 编译以上程序运行结果如下： 12345678910111213141516Creating Thread-1Starting Thread-1Creating Thread-2Starting Thread-2Running Thread-1Thread: Thread-1, 4Running Thread-2Thread: Thread-2, 4Thread: Thread-1, 3Thread: Thread-2, 3Thread: Thread-1, 2Thread: Thread-2, 2Thread: Thread-1, 1Thread: Thread-2, 1Thread Thread-1 exiting.Thread Thread-2 exiting. 通过继承Thread来创建线程创建一个线程的第二种方法是创建一个新的类，该类继承 Thread 类，然后创建一个该类的实例。 继承类必须重写 run() 方法，该方法是新线程的入口点。它也必须调用 start() 方法才能执行。 该方法尽管被列为一种多线程实现方式，但是本质上也是实现了 Runnable 接口的一个实例。 编译以上程序运行结果如下： 12345678910111213141516Creating Thread-1Starting Thread-1Creating Thread-2Starting Thread-2Running Thread-1Thread: Thread-1, 4Running Thread-2Thread: Thread-2, 4Thread: Thread-1, 3Thread: Thread-2, 3Thread: Thread-1, 2Thread: Thread-2, 2Thread: Thread-1, 1Thread: Thread-2, 1Thread Thread-1 exiting.Thread Thread-2 exiting. Thread 方法下表列出了Thread类的一些重要方法： 序号 方法描述 1 public void start() 使该线程开始执行；Java 虚拟机调用该线程的 run 方法。 2 public void run() 如果该线程是使用独立的 Runnable 运行对象构造的，则调用该 Runnable 对象的 run 方法；否则，该方法不执行任何操作并返回。 3 public final void setName(String name) 改变线程名称，使之与参数 name 相同。 4 public final void setPriority(int priority) 更改线程的优先级。 5 public final void setDaemon(boolean on) 将该线程标记为守护线程或用户线程。 6 public final void join(long millisec) 等待该线程终止的时间最长为 millis 毫秒。 7 public void interrupt() 中断线程。 8 public final boolean isAlive() 测试线程是否处于活动状态。 测试线程是否处于活动状态。 上述方法是被Thread对象调用的。下面的方法是Thread类的静态方法。 序号 方法描述 1 public static void yield() 暂停当前正在执行的线程对象，并执行其他线程。 2 public static void sleep(long millisec) 在指定的毫秒数内让当前正在执行的线程休眠（暂停执行），此操作受到系统计时器和调度程序精度和准确性的影响。 3 public static boolean holdsLock(Object x) 当且仅当当前线程在指定的对象上保持监视器锁时，才返回 true。 4 public static Thread currentThread() 返回对当前正在执行的线程对象的引用。 5 public static void dumpStack() 将当前线程的堆栈跟踪打印至标准错误流。 实例如下的ThreadClassDemo 程序演示了Thread类的一些方法： 运行结果如下，每一次运行的结果都不一样。 1234567891011121314Starting hello thread...Starting goodbye thread...HelloHelloHelloHelloHelloHelloGoodbyeGoodbyeGoodbyeGoodbyeGoodbye....... 通过 Callable 和 Future 创建线程 创建 Callable 接口的实现类，并实现 call() 方法，该 call() 方法将作为线程执行体，并且有返回值。 创建 Callable 实现类的实例，使用 FutureTask 类来包装 Callable 对象，该 FutureTask 对象封装了该 Callable 对象的 call() 方法的返回值。 使用 FutureTask 对象作为 Thread 对象的 target 创建并启动新线程。 调用 FutureTask 对象的 get() 方法来获得子线程执行结束后的返回值。 创建线程的三种方式的对比 采用实现 Runnable、Callable 接口的方式创建多线程时，线程类只是实现了 Runnable 接口或 Callable 接口，还可以继承其他类。 使用继承 Thread 类的方式创建多线程时，编写简单，如果需要访问当前线程，则无需使用 Thread.currentThread() 方法，直接使用 this 即可获得当前线程。 多线程的使用有效利用多线程的关键是理解程序是并发执行而不是串行执行的。例如：程序中有两个子系统需要并发执行，这时候就需要利用多线程编程。 通过对多线程的使用，可以编写出非常高效的程序。不过请注意，如果你创建太多的线程，程序执行的效率实际上是降低了，而不是提升了。 请记住，上下文的切换开销也很重要，如果你创建了太多的线程，CPU 花费在上下文的切换的时间将多于执行程序的时间！","categories":[],"tags":[{"name":"Concurrency","slug":"Concurrency","permalink":"http://dqlcr5.coding-pages.com/tags/Concurrency/"}]},{"title":"模板方法","slug":"模板方法","date":"2020-06-13T09:22:53.000Z","updated":"2020-06-13T10:28:22.963Z","comments":true,"path":"2020/06/13/模板方法/","link":"","permalink":"http://dqlcr5.coding-pages.com/2020/06/13/%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95/","excerpt":"模板方法 定义一个操作中的算法的骨架，而将一些步骤延迟到子类中，使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。","text":"模板方法 定义一个操作中的算法的骨架，而将一些步骤延迟到子类中，使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。 在模板模式（Template Pattern）中，一个抽象类公开定义了执行它的方法的方式/模板。它的子类可以按需要重写方法实现，但调用将以抽象类中定义的方式进行。这种类型的设计模式属于行为型模式。 介绍意图：定义一个操作中的算法的骨架，而将一些步骤延迟到子类中。模板方法使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。 主要解决：一些方法通用，却在每一个子类都重新写了这一方法。 何时使用：有一些通用的方法。 如何解决：将这些通用算法抽象出来。 关键代码：在抽象类实现，其他步骤在子类实现。 应用实例： 1、在造房子的时候，地基、走线、水管都一样，只有在建筑的后期才有加壁橱加栅栏等差异。 2、西游记里面菩萨定好的 81 难，这就是一个顶层的逻辑骨架。 3、spring 中对 Hibernate 的支持，将一些已经定好的方法封装起来，比如开启事务、获取 Session、关闭 Session 等，程序员不重复写那些已经规范好的代码，直接丢一个实体就可以保存。 优点： 1、封装不变部分，扩展可变部分。 2、提取公共代码，便于维护。 3、行为由父类控制，子类实现。 缺点：每一个不同的实现都需要一个子类来实现，导致类的个数增加，使得系统更加庞大。 使用场景： 1、有多个子类共有的方法，且逻辑相同。 2、重要的、复杂的方法，可以考虑作为模板方法。 注意事项：为防止恶意操作，一般模板方法都加上 final 关键词。 实现我们将创建一个定义操作的 Game 抽象类，其中，模板方法设置为 final，这样它就不会被重写。Cricket 和 Football 是扩展了 Game 的实体类，它们重写了抽象类的方法。 TemplatePatternDemo*，我们的演示类使用 *Game 来演示模板模式的用法。 步骤1创建一个抽象类，它的模板方法被设置为 final。 Game.java 123456789101112131415161718public abstract class Game &#123; abstract void initialize(); abstract void startPlay(); abstract void endPlay(); //模板 public final void play()&#123; //初始化游戏 initialize(); //开始游戏 startPlay(); //结束游戏 endPlay(); &#125;&#125; 步骤 2创建扩展了上述类的实体类。 Cricket.java 1234567891011121314151617public class Cricket extends Game &#123; @Override void endPlay() &#123; System.out.println(\"Cricket Game Finished!\"); &#125; @Override void initialize() &#123; System.out.println(\"Cricket Game Initialized! Start playing.\"); &#125; @Override void startPlay() &#123; System.out.println(\"Cricket Game Started. Enjoy the game!\"); &#125;&#125; Football.java 1234567891011121314151617public class Football extends Game &#123; @Override void endPlay() &#123; System.out.println(\"Football Game Finished!\"); &#125; @Override void initialize() &#123; System.out.println(\"Football Game Initialized! Start playing.\"); &#125; @Override void startPlay() &#123; System.out.println(\"Football Game Started. Enjoy the game!\"); &#125;&#125; 步骤 3使用 Game 的模板方法 play() 来演示游戏的定义方式。 TemplatePatternDemo.java 12345678910public class TemplatePatternDemo &#123; public static void main(String[] args) &#123; Game game = new Cricket(); game.play(); System.out.println(); game = new Football(); game.play(); &#125;&#125; 步骤 4执行程序，输出结果： 1234567Cricket Game Initialized! Start playing.Cricket Game Started. Enjoy the game!Cricket Game Finished!Football Game Initialized! Start playing.Football Game Started. Enjoy the game!Football Game Finished!","categories":[],"tags":[{"name":"DesignPatterns","slug":"DesignPatterns","permalink":"http://dqlcr5.coding-pages.com/tags/DesignPatterns/"}]},{"title":"访问者模式","slug":"访问者模式","date":"2020-06-13T09:22:33.000Z","updated":"2020-06-13T10:47:39.484Z","comments":true,"path":"2020/06/13/访问者模式/","link":"","permalink":"http://dqlcr5.coding-pages.com/2020/06/13/%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F/","excerpt":"访问者 表示一个作用于某对象结构中的各元素的操作。它使你可以在不改变各元素的类的前提下定义作用于这些元素的新操作。","text":"访问者 表示一个作用于某对象结构中的各元素的操作。它使你可以在不改变各元素的类的前提下定义作用于这些元素的新操作。 访问者模式在访问者模式（Visitor Pattern）中，我们使用了一个访问者类，它改变了元素类的执行算法。通过这种方式，元素的执行算法可以随着访问者改变而改变。这种类型的设计模式属于行为型模式。根据模式，元素对象已接受访问者对象，这样访问者对象就可以处理元素对象上的操作。 介绍意图：主要将数据结构与数据操作分离。 主要解决：稳定的数据结构和易变的操作耦合问题。 何时使用：需要对一个对象结构中的对象进行很多不同的并且不相关的操作，而需要避免让这些操作”污染”这些对象的类，使用访问者模式将这些封装到类中。 如何解决：在被访问的类里面加一个对外提供接待访问者的接口。 关键代码：在数据基础类里面有一个方法接受访问者，将自身引用传入访问者。 应用实例：您在朋友家做客，您是访问者，朋友接受您的访问，您通过朋友的描述，然后对朋友的描述做出一个判断，这就是访问者模式。 优点： 1、符合单一职责原则。 2、优秀的扩展性。 3、灵活性。 缺点： 1、具体元素对访问者公布细节，违反了迪米特原则。 2、具体元素变更比较困难。 3、违反了依赖倒置原则，依赖了具体类，没有依赖抽象。 使用场景： 1、对象结构中对象对应的类很少改变，但经常需要在此对象结构上定义新的操作。 2、需要对一个对象结构中的对象进行很多不同的并且不相关的操作，而需要避免让这些操作”污染”这些对象的类，也不希望在增加新操作时修改这些类。 注意事项：访问者可以对功能进行统一，可以做报表、UI、拦截器与过滤器。 实现我们将创建一个定义接受操作的 ComputerPart 接口。Keyboard、Mouse、Monitor 和 Computer 是实现了 ComputerPart 接口的实体类。我们将定义另一个接口 ComputerPartVisitor，它定义了访问者类的操作。Computer 使用实体访问者来执行相应的动作。 VisitorPatternDemo，我们的演示类使用 *Computer、*ComputerPartVisitor 类来演示访问者模式的用法。 步骤 1定义一个表示元素的接口。 ComputerPart.java 123public interface ComputerPart &#123; public void accept(ComputerPartVisitor computerPartVisitor);&#125; 步骤 2创建扩展了上述类的实体类。 Keyboard.java 1234567public class Keyboard implements ComputerPart &#123; @Override public void accept(ComputerPartVisitor computerPartVisitor) &#123; computerPartVisitor.visit(this); &#125;&#125; Monitor.java 1234567public class Monitor implements ComputerPart &#123; @Override public void accept(ComputerPartVisitor computerPartVisitor) &#123; computerPartVisitor.visit(this); &#125;&#125; Mouse.java 1234567public class Mouse implements ComputerPart &#123; @Override public void accept(ComputerPartVisitor computerPartVisitor) &#123; computerPartVisitor.visit(this); &#125;&#125; Computer.java 1234567891011121314151617public class Computer implements ComputerPart &#123; ComputerPart[] parts; public Computer()&#123; parts = new ComputerPart[] &#123;new Mouse(), new Keyboard(), new Monitor()&#125;; &#125; @Override public void accept(ComputerPartVisitor computerPartVisitor) &#123; for (int i = 0; i &lt; parts.length; i++) &#123; parts[i].accept(computerPartVisitor); &#125; computerPartVisitor.visit(this); &#125;&#125; 步骤 3定义一个表示访问者的接口。 ComputerPartVisitor.java 123456public interface ComputerPartVisitor &#123; public void visit(Computer computer); public void visit(Mouse mouse); public void visit(Keyboard keyboard); public void visit(Monitor monitor);&#125; 步骤 4创建实现了上述类的实体访问者。 ComputerPartDisplayVisitor.java 12345678910111213141516171819202122public class ComputerPartDisplayVisitor implements ComputerPartVisitor &#123; @Override public void visit(Computer computer) &#123; System.out.println(\"Displaying Computer.\"); &#125; @Override public void visit(Mouse mouse) &#123; System.out.println(\"Displaying Mouse.\"); &#125; @Override public void visit(Keyboard keyboard) &#123; System.out.println(\"Displaying Keyboard.\"); &#125; @Override public void visit(Monitor monitor) &#123; System.out.println(\"Displaying Monitor.\"); &#125;&#125; 步骤 5使用 ComputerPartDisplayVisitor 来显示 Computer 的组成部分。 VisitorPatternDemo.java 1234567public class VisitorPatternDemo &#123; public static void main(String[] args) &#123; ComputerPart computer = new Computer(); computer.accept(new ComputerPartDisplayVisitor()); &#125;&#125; 步骤 6执行程序，输出结果： 1234Displaying Mouse.Displaying Keyboard.Displaying Monitor.Displaying Computer.","categories":[],"tags":[{"name":"DesignPatterns","slug":"DesignPatterns","permalink":"http://dqlcr5.coding-pages.com/tags/DesignPatterns/"}]},{"title":"策略模式","slug":"策略模式","date":"2020-06-13T09:17:47.000Z","updated":"2020-06-13T09:21:11.548Z","comments":true,"path":"2020/06/13/策略模式/","link":"","permalink":"http://dqlcr5.coding-pages.com/2020/06/13/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/","excerpt":"策略 定义一系列的算法，把它们一个个封装起来，并且使它们可相互替换。本模式使得算法可独立于使用它的客户而变化。","text":"策略 定义一系列的算法，把它们一个个封装起来，并且使它们可相互替换。本模式使得算法可独立于使用它的客户而变化。 策略模式：Strategy，是指，定义一组算法，并把其封装到一个对象中。然后在运行时，可以灵活的使用其中的一个算法。 策略模式在Java标准库中应用非常广泛，我们以排序为例，看看如何通过Arrays.sort()实现忽略大小写排序： 12345678import java.util.Arrays; `public class Main &#123; public static void main(String[] args) throws InterruptedException &#123; String[] array = &#123; \"apple\", \"Pear\", \"Banana\", \"orange\" &#125;; Arrays.sort(array, String::compareToIgnoreCase); System.out.println(Arrays.toString(array)); &#125;&#125; 如果我们想忽略大小写排序，就传入String::compareToIgnoreCase，如果我们想倒序排序，就传入(s1, s2) -&gt; -s1.compareTo(s2)，这个比较两个元素大小的算法就是策略。 我们观察Arrays.sort(T[] a, Comparator c)这个排序方法，它在内部实现了TimSort排序，但是，排序算法在比较两个元素大小的时候，需要借助我们传入的Comparator对象，才能完成比较。因此，这里的策略是指比较两个元素大小的策略，可以是忽略大小写比较，可以是倒序比较，也可以根据字符串长度比较。 因此，上述排序使用到了策略模式，它实际上指，在一个方法中，流程是确定的，但是，某些关键步骤的算法依赖调用方传入的策略，这样，传入不同的策略，即可获得不同的结果，大大增强了系统的灵活性。 如果我们自己实现策略模式的排序，用冒泡法编写如下： 12345678910111213141516171819public class Main &#123; public static void main(String[] args) throws InterruptedException &#123; String[] array = &#123; \"apple\", \"Pear\", \"Banana\", \"orange\" &#125;; sort(array, String::compareToIgnoreCase); System.out.println(Arrays.toString(array)); &#125; static &lt;T&gt; void sort(T[] a, Comparator&lt;? super T&gt; c) &#123; for (int i = 0; i &lt; a.length - 1; i++) &#123; for (int j = 0; j &lt; a.length - 1 - i; j++) &#123; if (c.compare(a[j], a[j + 1]) &gt; 0) &#123; // 注意这里比较两个元素的大小依赖传入的策略 T temp = a[j]; a[j] = a[j + 1]; a[j + 1] = temp; &#125; &#125; &#125; &#125;&#125; 一个完整的策略模式要定义策略以及使用策略的上下文。我们以购物车结算为例，假设网站针对普通会员、Prime会员有不同的折扣，同时活动期间还有一个满100减20的活动，这些就可以作为策略实现。先定义打折策略接口： 1234public interface DiscountStrategy &#123; // 计算折扣额度: BigDecimal getDiscount(BigDecimal total);&#125; 接下来，就是实现各种策略。普通用户策略如下： 123456public class UserDiscountStrategy implements DiscountStrategy &#123; public BigDecimal getDiscount(BigDecimal total) &#123; // 普通会员打九折: return total.multiply(new BigDecimal(\"0.1\")).setScale(2, RoundingMode.DOWN); &#125;&#125; 满减策略如下： 123456public class OverDiscountStrategy implements DiscountStrategy &#123; public BigDecimal getDiscount(BigDecimal total) &#123; // 满100减20优惠: return total.compareTo(BigDecimal.valueOf(100)) &gt;= 0 ? BigDecimal.valueOf(20) : BigDecimal.ZERO; &#125;&#125; 最后，要应用策略，我们需要一个DiscountContext： 12345678910111213public class DiscountContext &#123; // 持有某个策略: private DiscountStrategy strategy = new UserDiscountStrategy(); // 允许客户端设置新策略: public void setStrategy(DiscountStrategy strategy) &#123; this.strategy = strategy; &#125; public BigDecimal calculatePrice(BigDecimal total) &#123; return total.subtract(this.strategy.getDiscount(total)).setScale(2); &#125;&#125; 调用方必须首先创建一个DiscountContext，并指定一个策略（或者使用默认策略），即可获得折扣后的价格： 123456789101112131415DiscountContext ctx = new DiscountContext();// 默认使用普通会员折扣:BigDecimal pay1 = ctx.calculatePrice(BigDecimal.valueOf(105));System.out.println(pay1);// 使用满减折扣:ctx.setStrategy(new OverDiscountStrategy());BigDecimal pay2 = ctx.calculatePrice(BigDecimal.valueOf(105));System.out.println(pay2);// 使用Prime会员折扣:ctx.setStrategy(new PrimeDiscountStrategy());BigDecimal pay3 = ctx.calculatePrice(BigDecimal.valueOf(105));System.out.println(pay3); 上述完整的策略模式如下图所示： 12345678910111213┌───────────────┐ ┌─────────────────┐│DiscountContext│─ ─ ─&gt;│DiscountStrategy │└───────────────┘ └─────────────────┘ ▲ │ ┌─────────────────────┐ ├─│UserDiscountStrategy │ │ └─────────────────────┘ │ ┌─────────────────────┐ ├─│PrimeDiscountStrategy│ │ └─────────────────────┘ │ ┌─────────────────────┐ └─│OverDiscountStrategy │ └─────────────────────┘ 策略模式的核心思想是在一个计算方法中把容易变化的算法抽出来作为“策略”参数传进去，从而使得新增策略不必修改原有逻辑。","categories":[],"tags":[{"name":"DesignPatterns","slug":"DesignPatterns","permalink":"http://dqlcr5.coding-pages.com/tags/DesignPatterns/"}]},{"title":"状态模式","slug":"状态模式","date":"2020-06-13T08:14:10.000Z","updated":"2020-06-13T13:24:22.122Z","comments":true,"path":"2020/06/13/状态模式/","link":"","permalink":"http://dqlcr5.coding-pages.com/2020/06/13/%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/","excerpt":"状态 允许一个对象在其内部状态改变时改变它的行为。对象看起来似乎修改了它的类。","text":"状态 允许一个对象在其内部状态改变时改变它的行为。对象看起来似乎修改了它的类。 状态模式（State）经常用在带有状态的对象中。 什么是状态？我们以QQ聊天为例，一个用户的QQ有几种状态： 离线状态（尚未登录）； 正在登录状态； 在线状态； 忙状态（暂时离开）。 如何表示状态？我们定义一个enum就可以表示不同的状态。但不同的状态需要对应不同的行为，比如收到消息时： 12345if (state == ONLINE) &#123; // 闪烁图标&#125; else if (state == BUSY) &#123; reply(\"现在忙，稍后回复\");&#125; else if ... 状态模式的目的是为了把上述一大串if...else...的逻辑给分拆到不同的状态类中，使得将来增加状态比较容易。 例如，我们设计一个聊天机器人，它有两个状态： 未连线； 已连线。 对于未连线状态，我们收到消息也不回复： 123456789public class DisconnectedState implements State &#123; public String init() &#123; return \"Bye!\"; &#125; public String reply(String input) &#123; return \"\"; &#125;&#125; 对于已连线状态，我们回应收到的消息： 123456789101112131415public class ConnectedState implements State &#123; public String init() &#123; return \"Hello, I'm Bob.\"; &#125; public String reply(String input) &#123; if (input.endsWith(\"?\")) &#123; return \"Yes. \" + input.substring(0, input.length() - 1) + \"!\"; &#125; if (input.endsWith(\".\")) &#123; return input.substring(0, input.length() - 1) + \"!\"; &#125; return input.substring(0, input.length() - 1) + \"?\"; &#125;&#125; 状态模式的关键设计思想在于状态切换，我们引入一个BotContext完成状态切换： 12345678910111213141516public class BotContext &#123; private State state = new DisconnectedState(); public String chat(String input) &#123; if (\"hello\".equalsIgnoreCase(input)) &#123; // 收到hello切换到在线状态: state = new ConnectedState(); return state.init(); &#125; else if (\"bye\".equalsIgnoreCase(input)) &#123; / 收到bye切换到离线状态: state = new DisconnectedState(); return state.init(); &#125; return state.reply(input); &#125;&#125; 这样，一个价值千万的AI聊天机器人就诞生了： 12345678Scanner scanner = new Scanner(System.in);BotContext bot = new BotContext();for (;;) &#123; System.out.print(\"&gt; \"); String input = scanner.nextLine(); String output = bot.chat(input); System.out.println(output.isEmpty() ? \"(no reply)\" : \"&lt; \" + output);&#125; 试试效果： 12345678&gt; hello&lt; Hello, I'm Bob.&gt; Nice to meet you.&lt; Nice to meet you!&gt; Today is cold?&lt; Yes. Today is cold!&gt; bye&lt; Bye!","categories":[],"tags":[{"name":"DesignPatterns","slug":"DesignPatterns","permalink":"http://dqlcr5.coding-pages.com/tags/DesignPatterns/"}]},{"title":"观察者模式","slug":"观察者模式","date":"2020-06-13T08:07:09.000Z","updated":"2020-06-13T08:11:49.749Z","comments":true,"path":"2020/06/13/观察者模式/","link":"","permalink":"http://dqlcr5.coding-pages.com/2020/06/13/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/","excerpt":"观察者 定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新。","text":"观察者 定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新。 观察者模式（Observer）又称发布-订阅模式（Publish-Subscribe：Pub/Sub）。它是一种通知机制，让发送通知的一方（被观察方）和接收通知的一方（观察者）能彼此分离，互不影响。 要理解观察者模式，我们还是看例子。 假设一个电商网站，有多种Product（商品），同时，Customer（消费者）和Admin（管理员）对商品上架、价格改变都感兴趣，希望能第一时间获得通知。于是，Store（商场）可以这么写： 123456789101112131415161718192021222324public class Store &#123; Customer customer; Admin admin; private Map&lt;String, Product&gt; products = new HashMap&lt;&gt;(); public void addNewProduct(String name, double price) &#123; Product p = new Product(name, price); products.put(p.getName(), p); // 通知用户: customer.onPublished(p); // 通知管理员: admin.onPublished(p); &#125; public void setProductPrice(String name, double price) &#123; Product p = products.get(name); p.setPrice(price); // 通知用户: customer.onPriceChanged(p); // 通知管理员: admin.onPriceChanged(p); &#125;&#125; 我们观察上述Store类的问题：它直接引用了Customer和Admin。先不考虑多个Customer或多个Admin的问题，上述Store类最大的问题是，如果要加一个新的观察者类型，例如工商局管理员，Store类就必须继续改动。 因此，上述问题的本质是Store希望发送通知给那些关心Product的对象，但Store并不想知道这些人是谁。观察者模式就是要分离被观察者和观察者之间的耦合关系。 要实现这一目标也很简单，Store不能直接引用Customer和Admin，相反，它引用一个ProductObserver接口，任何人想要观察Store，只要实现该接口，并且把自己注册到Store即可： 12345678910111213141516171819202122232425262728public class Store &#123; private List&lt;ProductObserver&gt; observers = new ArrayList&lt;&gt;(); private Map&lt;String, Product&gt; products = new HashMap&lt;&gt;(); // 注册观察者: public void addObserver(ProductObserver observer) &#123; this.observers.add(observer); &#125; // 取消注册: public void removeObserver(ProductObserver observer) &#123; this.observers.remove(observer); &#125; public void addNewProduct(String name, double price) &#123; Product p = new Product(name, price); products.put(p.getName(), p); // 通知观察者: observers.forEach(o -&gt; o.onPublished(p)); &#125; public void setProductPrice(String name, double price) &#123; Product p = products.get(name); p.setPrice(price); // 通知观察者: observers.forEach(o -&gt; o.onPriceChanged(p)); &#125;&#125; 就是这么一个小小的改动，使得观察者类型就可以无限扩充，而且，观察者的定义可以放到客户端： 12345678// observer:Admin a = new Admin();Customer c = new Customer();// store:Store store = new Store();// 注册观察者:store.addObserver(a);store.addObserver(c); 甚至可以注册匿名观察者： 123456789store.addObserver(new ProductObserver() &#123; public void onPublished(Product product) &#123; System.out.println(\"[Log] on product published: \" + product); &#125; public void onPriceChanged(Product product) &#123; System.out.println(\"[Log] on product price changed: \" + product); &#125;&#125;); 用一张图画出观察者模式： 12345678910┌─────────┐ ┌───────────────┐│ Store │─ ─ ─&gt;│ProductObserver│└─────────┘ └───────────────┘ │ ▲ │ │ ┌─────┴─────┐ ▼ │ │┌─────────┐ ┌─────────┐ ┌─────────┐│ Product │ │ Admin │ │Customer │ ...└─────────┘ └─────────┘ └─────────┘ 观察者模式也有很多变体形式。有的观察者模式把被观察者也抽象出接口： 1234public interface ProductObservable &#123; // 注意此处拼写是Observable不是Observer! void addObserver(ProductObserver observer); void removeObserver(ProductObserver observer);&#125; 对应的实体被观察者就要实现该接口： 123public class Store implements ProductObservable &#123; ...&#125; 有些观察者模式把通知变成一个Event对象，从而不再有多种方法通知，而是统一成一种： 123public interface ProductObserver &#123; void onEvent(ProductEvent event);&#125; 让观察者自己从Event对象中读取通知类型和通知数据。 广义的观察者模式包括所有消息系统。所谓消息系统，就是把观察者和被观察者完全分离，通过消息系统本身来通知： 12345678910111213 ┌ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┐ Messaging System │ │ ┌──────────────────┐ ┌──┼&gt;│Topic:newProduct │──┼─┐ ┌─────────┐ │ └──────────────────┘ ├───&gt;│ConsumerA│┌─────────┐ │ │ ┌──────────────────┐ │ │ └─────────┘│Producer │───┼───&gt;│Topic:priceChanged│────┘└─────────┘ │ │ └──────────────────┘ │ │ ┌──────────────────┐ ┌─────────┐ └──┼&gt;│Topic:soldOut │──┼─────&gt;│ConsumerB│ └──────────────────┘ └─────────┘ └ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┘ 消息发送方称为Producer，消息接收方称为Consumer，Producer发送消息的时候，必须选择发送到哪个Topic。Consumer可以订阅自己感兴趣的Topic，从而只获得特定类型的消息。 使用消息系统实现观察者模式时，Producer和Consumer甚至经常不在同一台机器上，并且双方对对方完全一无所知，因为注册观察者这个动作本身都在消息系统中完成，而不是在Producer内部完成。 此外，注意到我们在编写观察者模式的时候，通知Observer是依靠语句： 1observers.forEach(o -&gt; o.onPublished(p)); 这说明各个观察者是依次获得的同步通知，如果上一个观察者处理太慢，会导致下一个观察者不能及时获得通知。此外，如果观察者在处理通知的时候，发生了异常，还需要被观察者处理异常，才能保证继续通知下一个观察者。 思考：如何改成异步通知，使得所有观察者可以并发同时处理？ 有的童鞋可能发现Java标准库有个java.util.Observable类和一个Observer接口，用来帮助我们实现观察者模式。但是，这个类非常不！好！用！实现观察者模式的时候，也不推荐借助这两个东东。","categories":[],"tags":[{"name":"DesignPatterns","slug":"DesignPatterns","permalink":"http://dqlcr5.coding-pages.com/tags/DesignPatterns/"}]},{"title":"备忘录模式","slug":"备忘录模式","date":"2020-06-13T07:20:47.000Z","updated":"2020-06-13T07:23:32.686Z","comments":true,"path":"2020/06/13/备忘录模式/","link":"","permalink":"http://dqlcr5.coding-pages.com/2020/06/13/%E5%A4%87%E5%BF%98%E5%BD%95%E6%A8%A1%E5%BC%8F/","excerpt":"备忘录模式 在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。","text":"备忘录模式 在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。 备忘录模式（Memento），主要用于捕获一个对象的内部状态，以便在将来的某个时候恢复此状态。 其实我们使用的几乎所有软件都用到了备忘录模式。最简单的备忘录模式就是保存到文件，打开文件。对于文本编辑器来说，保存就是把TextEditor类的字符串存储到文件，打开就是恢复TextEditor类的状态。对于图像编辑器来说，原理是一样的，只是保存和恢复的数据格式比较复杂而已。Java的序列化也可以看作是备忘录模式。 在使用文本编辑器的时候，我们还经常使用Undo、Redo这些功能。这些其实也可以用备忘录模式实现，即不定期地把TextEditor类的字符串复制一份存起来，这样就可以Undo或Redo。 标准的备忘录模式有这么几种角色： Memonto：存储的内部状态； Originator：创建一个备忘录并设置其状态； Caretaker：负责保存备忘录。 实际上我们在使用备忘录模式的时候，不必设计得这么复杂，只需要对类似TextEditor的类，增加getState()和setState()就可以了。 我们以一个文本编辑器TextEditor为例，它内部使用StringBuilder允许用户增删字符： 1234567891011121314151617public class TextEditor &#123; private StringBuilder buffer = new StringBuilder(); public void add(char ch) &#123; buffer.append(ch); &#125; public void add(String s) &#123; buffer.append(s); &#125; public void delete() &#123; if (buffer.length() &gt; 0) &#123; buffer.deleteCharAt(buffer.length() - 1); &#125; &#125;&#125; 为了支持这个TextEditor能保存和恢复状态，我们增加getState()和setState()两个方法： 1234567891011121314public class TextEditor &#123; ... // 获取状态: public String getState() &#123; return buffer.toString(); &#125; // 恢复状态: public void setState(String state) &#123; this.buffer.delete(0, this.buffer.length()); this.buffer.append(state); &#125;&#125; 对这个简单的文本编辑器，用一个String就可以表示其状态，对于复杂的对象模型，通常我们会使用JSON、XML等复杂格式。","categories":[],"tags":[{"name":"DesignPatterns","slug":"DesignPatterns","permalink":"http://dqlcr5.coding-pages.com/tags/DesignPatterns/"}]},{"title":"中介者模式","slug":"中介者模式","date":"2020-06-13T06:46:55.000Z","updated":"2020-06-13T07:20:55.223Z","comments":true,"path":"2020/06/13/中介者模式/","link":"","permalink":"http://dqlcr5.coding-pages.com/2020/06/13/%E4%B8%AD%E4%BB%8B%E8%80%85%E6%A8%A1%E5%BC%8F/","excerpt":"中介者模式 中介者模式（Mediator Pattern）是用来降低多个对象和类之间的通信复杂性。这种模式提供了一个中介类，该类通常处理不同类之间的通信，并支持松耦合，使代码易于维护。中介者模式属于行为型模式。","text":"中介者模式 中介者模式（Mediator Pattern）是用来降低多个对象和类之间的通信复杂性。这种模式提供了一个中介类，该类通常处理不同类之间的通信，并支持松耦合，使代码易于维护。中介者模式属于行为型模式。 介绍意图：用一个中介对象来封装一系列的对象交互，中介者使各对象不需要显式地相互引用，从而使其耦合松散，而且可以独立地改变它们之间的交互。 主要解决：对象与对象之间存在大量的关联关系，这样势必会导致系统的结构变得很复杂，同时若一个对象发生改变，我们也需要跟踪与之相关联的对象，同时做出相应的处理。 何时使用：多个类相互耦合，形成了网状结构。 如何解决：将上述网状结构分离为星型结构。 关键代码：对象 Colleague 之间的通信封装到一个类中单独处理。 应用实例： 1、中国加入 WTO 之前是各个国家相互贸易，结构复杂，现在是各个国家通过 WTO 来互相贸易。 2、机场调度系统。 3、MVC 框架，其中C（控制器）就是 M（模型）和 V（视图）的中介者。 优点： 1、降低了类的复杂度，将一对多转化成了一对一。 2、各个类之间的解耦。 3、符合迪米特原则。 缺点：中介者会庞大，变得复杂难以维护。 使用场景： 1、系统中对象之间存在比较复杂的引用关系，导致它们之间的依赖关系结构混乱而且难以复用该对象。 2、想通过一个中间类来封装多个类中的行为，而又不想生成太多的子类。 注意事项：不应当在职责混乱的时候使用。 实现我们通过聊天室实例来演示中介者模式。实例中，多个用户可以向聊天室发送消息，聊天室向所有的用户显示消息。我们将创建两个类 ChatRoom 和 User。User 对象使用 ChatRoom 方法来分享他们的消息。 MediatorPatternDemo*，我们的演示类使用 *User 对象来显示他们之间的通信。 步骤 1创建中介类。 ChatRoom.java 步骤 2创建 user 类。 User.java 步骤 3使用 User 对象来显示他们之间的通信。 MediatorPatternDemo.java 步骤 4执行程序，输出结果： 12Thu Jan 31 16:05:46 IST 2013 [Robert] : Hi! John!Thu Jan 31 16:05:46 IST 2013 [John] : Hello! Robert!","categories":[],"tags":[{"name":"DesignPatterns","slug":"DesignPatterns","permalink":"http://dqlcr5.coding-pages.com/tags/DesignPatterns/"}]},{"title":"迭代器模式","slug":"迭代器模式","date":"2020-06-13T05:26:48.000Z","updated":"2020-06-13T05:29:25.593Z","comments":true,"path":"2020/06/13/迭代器模式/","link":"","permalink":"http://dqlcr5.coding-pages.com/2020/06/13/%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F/","excerpt":"迭代器 提供一种方法顺序访问一个聚合对象中的各个元素，而又不需要暴露该对象的内部表示。","text":"迭代器 提供一种方法顺序访问一个聚合对象中的各个元素，而又不需要暴露该对象的内部表示。 迭代器模式（Iterator）实际上在Java的集合类中已经广泛使用了。我们以List为例，要遍历ArrayList，即使我们知道它的内部存储了一个Object[]数组，也不应该直接使用数组索引去遍历，因为这样需要了解集合内部的存储结构。如果使用Iterator遍历，那么，ArrayList和LinkedList都可以以一种统一的接口来遍历： 1234List&lt;String&gt; list = ...for (Iterator&lt;String&gt; it = list.iterator(); it.hasNext(); ) &#123; String s = it.next();&#125; 实际上，因为Iterator模式十分有用，因此，Java允许我们直接把任何支持Iterator的集合对象用foreach循环写出来： 1234List&lt;String&gt; list = ...for (String s : list) &#123;&#125; 然后由Java编译器完成Iterator模式的所有循环代码。 虽然我们对如何使用Iterator有了一定了解，但如何实现一个Iterator模式呢？我们以一个自定义的集合为例，通过Iterator模式实现倒序遍历： 123456789101112public class ReverseArrayCollection&lt;T&gt; implements Iterable&lt;T&gt; &#123; // 以数组形式持有集合: private T[] array; public ReverseArrayCollection(T... objs) &#123; this.array = Arrays.copyOfRange(objs, 0, objs.length); &#125; public Iterator&lt;T&gt; iterator() &#123; return ???; &#125;&#125; 实现Iterator模式的关键是返回一个Iterator对象，该对象知道集合的内部结构，因为它可以实现倒序遍历。我们使用Java的内部类实现这个Iterator： 1234567891011121314151617181920212223242526272829303132public class ReverseArrayCollection&lt;T&gt; implements Iterable&lt;T&gt; &#123; private T[] array; public ReverseArrayCollection(T... objs) &#123; this.array = Arrays.copyOfRange(objs, 0, objs.length); &#125; public Iterator&lt;T&gt; iterator() &#123; return new ReverseIterator(); &#125; class ReverseIterator implements Iterator&lt;T&gt; &#123; // 索引位置: int index; public ReverseIterator() &#123; // 创建Iterator时,索引在数组末尾: this.index = ReverseArrayCollection.this.array.length; &#125; public boolean hasNext() &#123; // 如果索引大于0,那么可以移动到下一个元素(倒序往前移动): return index &gt; 0; &#125; public T next() &#123; // 将索引移动到下一个元素并返回(倒序往前移动): index--; return array[index]; &#125; &#125;&#125; 使用内部类的好处是内部类隐含地持有一个它所在对象的this引用，可以通过ReverseArrayCollection.this引用到它所在的集合。上述代码实现的逻辑非常简单，但是实际应用时，如果考虑到多线程访问，当一个线程正在迭代某个集合，而另一个线程修改了集合的内容时，是否能继续安全地迭代，还是抛出ConcurrentModificationException，就需要更仔细地设计。","categories":[],"tags":[{"name":"DesignPatterns","slug":"DesignPatterns","permalink":"http://dqlcr5.coding-pages.com/tags/DesignPatterns/"}]},{"title":"解释器模式","slug":"解释器模式","date":"2020-06-12T13:31:18.000Z","updated":"2020-06-13T05:26:03.274Z","comments":true,"path":"2020/06/12/解释器模式/","link":"","permalink":"http://dqlcr5.coding-pages.com/2020/06/12/%E8%A7%A3%E9%87%8A%E5%99%A8%E6%A8%A1%E5%BC%8F/","excerpt":"解释器模式 解释器模式（Interpreter Pattern）提供了评估语言的语法或表达式的方式，它属于行为型模式。这种模式实现了一个表达式接口，该接口解释一个特定的上下文。这种模式被用在 SQL 解析、符号处理引擎等。","text":"解释器模式 解释器模式（Interpreter Pattern）提供了评估语言的语法或表达式的方式，它属于行为型模式。这种模式实现了一个表达式接口，该接口解释一个特定的上下文。这种模式被用在 SQL 解析、符号处理引擎等。 介绍意图：给定一个语言，定义它的文法表示，并定义一个解释器，这个解释器使用该标识来解释语言中的句子。 主要解决：对于一些固定文法构建一个解释句子的解释器。 何时使用：如果一种特定类型的问题发生的频率足够高，那么可能就值得将该问题的各个实例表述为一个简单语言中的句子。这样就可以构建一个解释器，该解释器通过解释这些句子来解决该问题。 如何解决：构建语法树，定义终结符与非终结符。 关键代码：构建环境类，包含解释器之外的一些全局信息，一般是 HashMap。 应用实例：编译器、运算表达式计算。 优点： 1、可扩展性比较好，灵活。 2、增加了新的解释表达式的方式。 3、易于实现简单文法。 缺点： 1、可利用场景比较少。 2、对于复杂的文法比较难维护。 3、解释器模式会引起类膨胀。 4、解释器模式采用递归调用方法。 使用场景： 1、可以将一个需要解释执行的语言中的句子表示为一个抽象语法树。 2、一些重复出现的问题可以用一种简单的语言来进行表达。 3、一个简单语法需要解释的场景。 注意事项：可利用场景比较少，JAVA 中如果碰到可以用 expression4J 代替。 实现我们将创建一个接口 Expression 和实现了 Expression 接口的实体类。定义作为上下文中主要解释器的 TerminalExpression 类。其他的类 OrExpression、AndExpression 用于创建组合式表达式。 InterpreterPatternDemo*，我们的演示类使用 *Expression 类创建规则和演示表达式的解析。 步骤 1创建一个表达式接口。 步骤 2创建实现了上述接口的实体类。 步骤 3InterpreterPatternDemo 使用 Expression 类来创建规则，并解析它们。 步骤 4执行程序，输出结果： 12John is male? trueJulie is a married women? true","categories":[],"tags":[{"name":"DesignPatterns","slug":"DesignPatterns","permalink":"http://dqlcr5.coding-pages.com/tags/DesignPatterns/"}]},{"title":"命令模式","slug":"命令模式","date":"2020-06-12T10:12:06.000Z","updated":"2020-06-12T10:27:07.909Z","comments":true,"path":"2020/06/12/命令模式/","link":"","permalink":"http://dqlcr5.coding-pages.com/2020/06/12/%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/","excerpt":"命令模式 命令模式（Command Pattern）是一种数据驱动的设计模式，它属于行为型模式。请求以命令的形式包裹在对象中，并传给调用对象。调用对象寻找可以处理该命令的合适的对象，并把该命令传给相应的对象，该对象执行命令。","text":"命令模式 命令模式（Command Pattern）是一种数据驱动的设计模式，它属于行为型模式。请求以命令的形式包裹在对象中，并传给调用对象。调用对象寻找可以处理该命令的合适的对象，并把该命令传给相应的对象，该对象执行命令。 介绍意图：将一个请求封装成一个对象，从而使您可以用不同的请求对客户进行参数化。 主要解决：在软件系统中，行为请求者与行为实现者通常是一种紧耦合的关系，但某些场合，比如需要对行为进行记录、撤销或重做、事务等处理时，这种无法抵御变化的紧耦合的设计就不太合适。 何时使用：在某些场合，比如要对行为进行”记录、撤销/重做、事务”等处理，这种无法抵御变化的紧耦合是不合适的。在这种情况下，如何将”行为请求者”与”行为实现者”解耦？将一组行为抽象为对象，可以实现二者之间的松耦合。 如何解决：通过调用者调用接受者执行命令，顺序：调用者→接受者→命令。 关键代码：定义三个角色：1、received 真正的命令执行对象 2、Command 3、invoker 使用命令对象的入口 应用实例：struts 1 中的 action 核心控制器 ActionServlet 只有一个，相当于 Invoker，而模型层的类会随着不同的应用有不同的模型类，相当于具体的 Command。 优点： 1、降低了系统耦合度。 ​ 2、新的命令可以很容易添加到系统中去。 缺点： 使用命令模式可能会导致某些系统有过多的具体命令类。 使用场景：认为是命令的地方都可以使用命令模式， 比如： ​ 1、GUI 中每一个按钮都是一条命令。 ​ 2、模拟 CMD。 注意事项：系统需要支持命令的撤销(Undo)操作和恢复(Redo)操作，也可以考虑使用命令模式，见命令模式的扩展。 实现我们首先创建作为命令的接口 Order*，然后创建作为请求的 *Stock 类。实体命令类 BuyStock 和 SellStock*，实现了 *Order 接口，将执行实际的命令处理。创建作为调用对象的类 Broker，它接受订单并能下订单。 Broker 对象使用命令模式，基于命令的类型确定哪个对象执行哪个命令。CommandPatternDemo*，我们的演示类使用 *Broker 类来演示命令模式。 步骤1创建一个命令接口。 Order.java123public interface Order &#123; void execute();&#125; 步骤 2创建一个请求类。 Stock.java1234567891011121314public class Stock &#123; private String name = \"ABC\"; private int quantity = 10; public void buy()&#123; System.out.println(\"Stock [ Name: \"+name+\", Quantity: \" + quantity +\" ] bought\"); &#125; public void sell()&#123; System.out.println(\"Stock [ Name: \"+name+\", Quantity: \" + quantity +\" ] sold\"); &#125;&#125; 步骤 3创建实现了 Order 接口的实体类。 BuyStock.java1234567891011public class BuyStock implements Order &#123; private Stock abcStock; public BuyStock(Stock abcStock)&#123; this.abcStock = abcStock; &#125; public void execute() &#123; abcStock.buy(); &#125;&#125; SellStock.java1234567891011public class SellStock implements Order &#123; private Stock abcStock; public SellStock(Stock abcStock)&#123; this.abcStock = abcStock; &#125; public void execute() &#123; abcStock.sell(); &#125;&#125; 步骤 4创建命令调用类。 Broker.java1234567891011121314151617import java.util.ArrayList;import java.util.List; public class Broker &#123; private List&lt;Order&gt; orderList = new ArrayList&lt;Order&gt;(); public void takeOrder(Order order)&#123; orderList.add(order); &#125; public void placeOrders()&#123; for (Order order : orderList) &#123; order.execute(); &#125; orderList.clear(); &#125;&#125; 使用 Broker 类来接受并执行命令。 CommandPatternDemo.java1234567891011121314public class CommandPatternDemo &#123; public static void main(String[] args) &#123; Stock abcStock = new Stock(); BuyStock buyStockOrder = new BuyStock(abcStock); SellStock sellStockOrder = new SellStock(abcStock); Broker broker = new Broker(); broker.takeOrder(buyStockOrder); broker.takeOrder(sellStockOrder); broker.placeOrders(); &#125;&#125; 步骤 6执行程序，输出结果： 12Stock [ Name: ABC, Quantity: 10 ] boughtStock [ Name: ABC, Quantity: 10 ] sold","categories":[],"tags":[{"name":"DesignPatterns","slug":"DesignPatterns","permalink":"http://dqlcr5.coding-pages.com/tags/DesignPatterns/"}]},{"title":"责任链模式","slug":"责任链模式","date":"2020-06-11T11:48:35.000Z","updated":"2020-06-11T12:30:16.009Z","comments":true,"path":"2020/06/11/责任链模式/","link":"","permalink":"http://dqlcr5.coding-pages.com/2020/06/11/%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F/","excerpt":"责任链模式 责任链模式（Chain of Responsibility Pattern）为请求创建了一个接收者对象的链。这种模式给予请求的类型，对请求的发送者和接收者进行解耦。这种类型的设计模式属于行为型模式。","text":"责任链模式 责任链模式（Chain of Responsibility Pattern）为请求创建了一个接收者对象的链。这种模式给予请求的类型，对请求的发送者和接收者进行解耦。这种类型的设计模式属于行为型模式。 介绍意图：避免请求发送者与接收者耦合在一起，让多个对象都有可能接收请求，将这些对象连接成一条链，并且沿着这条链传递请求，直到有对象处理它为止。 主要解决：职责链上的处理者负责处理请求，客户只需要将请求发送到职责链上即可，无须关心请求的处理细节和请求的传递，所以职责链将请求的发送者和请求的处理者解耦了。 何时使用：在处理消息的时候以过滤很多道。 如何解决：拦截的类都实现统一接口。 关键代码：Handler 里面聚合它自己，在 HandlerRequest 里判断是否合适，如果没达到条件则向下传递，向谁传递之前 set 进去。 应用实例： 1、红楼梦中的”击鼓传花”。 2、JS 中的事件冒泡。 3、JAVA WEB 中 Apache Tomcat 对 Encoding 的处理，Struts2 的拦截器，jsp servlet 的 Filter。 优点： 1、降低耦合度。它将请求的发送者和接收者解耦。 2、简化了对象。使得对象不需要知道链的结构。 3、增强给对象指派职责的灵活性。通过改变链内的成员或者调动它们的次序，允许动态地新增或者删除责任。 4、增加新的请求处理类很方便。 缺点： 1、不能保证请求一定被接收。 2、系统性能将受到一定影响，而且在进行代码调试时不太方便，可能会造成循环调用。 3、可能不容易观察运行时的特征，有碍于除错。 使用场景： 1、有多个对象可以处理同一个请求，具体哪个对象处理该请求由运行时刻自动确定。 2、在不明确指定接收者的情况下，向多个对象中的一个提交一个请求。 3、可动态指定一组对象处理请求。 注意事项：在 JAVA WEB 中遇到很多应用。 实现我们创建抽象类 AbstractLogger，带有详细的日志记录级别。然后我们创建三种类型的记录器，都扩展了 AbstractLogger。每个记录器消息的级别是否属于自己的级别，如果是则相应地打印出来，否则将不打印并把消息传给下一个记录器。 步骤1创建抽象的记录器类。 AbstractLogger.java1234567891011121314151617181920212223242526public abstract class AbstractLogger &#123; public static int INFO = 1; public static int DEBUG = 2; public static int ERROR = 3; protected int level; //责任链中的下一个元素 protected AbstractLogger nextLogger; public void setNextLogger(AbstractLogger nextLogger)&#123; this.nextLogger = nextLogger; &#125; public void logMessage(int level, String message)&#123; if(this.level &lt;= level)&#123; write(message); &#125; if(nextLogger !=null)&#123; nextLogger.logMessage(level, message); &#125; &#125; abstract protected void write(String message); &#125; 步骤 2创建扩展了该记录器类的实体类。 ConsoleLogger.java1234567891011public class ConsoleLogger extends AbstractLogger &#123; public ConsoleLogger(int level)&#123; this.level = level; &#125; @Override protected void write(String message) &#123; System.out.println(\"Standard Console::Logger: \" + message); &#125;&#125; ErrorLogger.java1234567891011public class ErrorLogger extends AbstractLogger &#123; public ErrorLogger(int level)&#123; this.level = level; &#125; @Override protected void write(String message) &#123; System.out.println(\"Error Console::Logger: \" + message); &#125;&#125; FileLogger.java1234567891011public class FileLogger extends AbstractLogger &#123; public FileLogger(int level)&#123; this.level = level; &#125; @Override protected void write(String message) &#123; System.out.println(\"File::Logger: \" + message); &#125;&#125; 步骤 3创建不同类型的记录器。赋予它们不同的错误级别，并在每个记录器中设置下一个记录器。每个记录器中的下一个记录器代表的是链的一部分。 ChainPatternDemo.java1234567891011121314151617181920212223242526public class ChainPatternDemo &#123; private static AbstractLogger getChainOfLoggers()&#123; AbstractLogger errorLogger = new ErrorLogger(AbstractLogger.ERROR); AbstractLogger fileLogger = new FileLogger(AbstractLogger.DEBUG); AbstractLogger consoleLogger = new ConsoleLogger(AbstractLogger.INFO); errorLogger.setNextLogger(fileLogger); fileLogger.setNextLogger(consoleLogger); return errorLogger; &#125; public static void main(String[] args) &#123; AbstractLogger loggerChain = getChainOfLoggers(); loggerChain.logMessage(AbstractLogger.INFO, \"This is an information.\"); loggerChain.logMessage(AbstractLogger.DEBUG, \"This is a debug level information.\"); loggerChain.logMessage(AbstractLogger.ERROR, \"This is an error information.\"); &#125;&#125; 步骤 4执行程序，输出结果： 123456Standard Console::Logger: This is an information.File::Logger: This is a debug level information.Standard Console::Logger: This is a debug level information.Error Console::Logger: This is an error information.File::Logger: This is an error information.Standard Console::Logger: This is an error information.","categories":[],"tags":[{"name":"DesignPatterns","slug":"DesignPatterns","permalink":"http://dqlcr5.coding-pages.com/tags/DesignPatterns/"}]},{"title":"RESUME","slug":"简历","date":"2020-06-11T01:48:15.000Z","updated":"2020-06-11T10:13:59.981Z","comments":true,"path":"2020/06/11/简历/","link":"","permalink":"http://dqlcr5.coding-pages.com/2020/06/11/%E7%AE%80%E5%8E%86/","excerpt":"RESUME","text":"RESUME","categories":[],"tags":[{"name":"resume","slug":"resume","permalink":"http://dqlcr5.coding-pages.com/tags/resume/"}]},{"title":"代理模式","slug":"代理模式","date":"2020-06-09T12:46:15.000Z","updated":"2020-06-11T05:32:42.211Z","comments":true,"path":"2020/06/09/代理模式/","link":"","permalink":"http://dqlcr5.coding-pages.com/2020/06/09/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/","excerpt":"代理模式 为其他对象提供一种代理以控制对这个对象的访问。","text":"代理模式 为其他对象提供一种代理以控制对这个对象的访问。 在代理模式（Proxy Pattern）中，一个类代表另一个类的功能。这种类型的设计模式属于结构型模式。 在代理模式中，我们创建具有现有对象的对象，以便向外界提供功能接口。 介绍意图：为其他对象提供一种代理以控制对这个对象的访问。 主要解决：在直接访问对象时带来的问题，比如说：要访问的对象在远程的机器上。在面向对象系统中，有些对象由于某些原因（比如对象创建开销很大，或者某些操作需要安全控制，或者需要进程外的访问），直接访问会给使用者或者系统结构带来很多麻烦，我们可以在访问此对象时加上一个对此对象的访问层。 何时使用：想在访问一个类时做一些控制。 如何解决：增加中间层。 关键代码：实现与被代理类组合。 应用实例： 1、Windows 里面的快捷方式。 2、猪八戒去找高翠兰结果是孙悟空变的，可以这样理解：把高翠兰的外貌抽象出来，高翠兰本人和孙悟空都实现了这个接口，猪八戒访问高翠兰的时候看不出来这个是孙悟空，所以说孙悟空是高翠兰代理类。 3、买火车票不一定在火车站买，也可以去代售点。 4、一张支票或银行存单是账户中资金的代理。支票在市场交易中用来代替现金，并提供对签发人账号上资金的控制。 5、spring aop。 优点： 1、职责清晰。 2、高扩展性。 3、智能化。 缺点： 1、由于在客户端和真实主题之间增加了代理对象，因此有些类型的代理模式可能会造成请求的处理速度变慢。 2、实现代理模式需要额外的工作，有些代理模式的实现非常复杂。 使用场景：按职责来划分，通常有以下使用场景： 1、远程代理。 2、虚拟代理。 3、Copy-on-Write 代理。 4、保护（Protect or Access）代理。 5、Cache代理。 6、防火墙（Firewall）代理。 7、同步化（Synchronization）代理。 8、智能引用（Smart Reference）代理。 注意事项： 1、和适配器模式的区别：适配器模式主要改变所考虑对象的接口，而代理模式不能改变所代理类的接口。 2、和装饰器模式的区别：装饰器模式为了增强功能，而代理模式是为了加以控制。 实现我们将创建一个 Image 接口和实现了 Image 接口的实体类。ProxyImage 是一个代理类，减少 RealImage 对象加载的内存占用。 ProxyPatternDemo*，我们的演示类使用 *ProxyImage 来获取要加载的 Image 对象，并按照需求进行显示。 代理模式，即Proxy，它和Adapter模式很类似。我们先回顾Adapter模式，它用于把A接口转换为B接口： 123456789public BAdapter implements B &#123; private A a; public BAdapter(A a) &#123; this.a = a; &#125; public void b() &#123; a.a(); &#125;&#125; 而Proxy模式不是把A接口转换成B接口，它还是转换成A接口： 123456789public AProxy implements A &#123; private A a; public AProxy(A a) &#123; this.a = a; &#125; public void a() &#123; this.a.a(); &#125;&#125; 合着Proxy就是为了给A接口再包一层，这不是脱了裤子放屁吗？ 当然不是。我们观察Proxy的实现A接口的方法： 123public void a() &#123; this.a.a();&#125; 这样写当然没啥卵用。但是，如果我们在调用a.a()的前后，加一些额外的代码： 1234567public void a() &#123; if (getCurrentUser().isRoot()) &#123; this.a.a(); &#125; else &#123; throw new SecurityException(\"Forbidden\"); &#125;&#125; 这样一来，我们就实现了权限检查，只有符合要求的用户，才会真正调用目标方法，否则，会直接抛出异常。 有的童鞋会问，为啥不把权限检查的功能直接写到目标实例A的内部？ 因为我们编写代码的原则有： 职责清晰：一个类只负责一件事； 易于测试：一次只测一个功能。 用Proxy实现这个权限检查，我们可以获得更清晰、更简洁的代码： A接口：只定义接口； ABusiness类：只实现A接口的业务逻辑； APermissionProxy类：只实现A接口的权限检查代理。 如果我们希望编写其他类型的代理，可以继续增加类似ALogProxy，而不必对现有的A接口、ABusiness类进行修改。 实际上权限检查只是代理模式的一种应用。Proxy还广泛应用在： 远程代理远程代理即Remote Proxy，本地的调用者持有的接口实际上是一个代理，这个代理负责把对接口的方法访问转换成远程调用，然后返回结果。Java内置的RMI机制就是一个完整的远程代理模式。 虚代理虚代理即Virtual Proxy，它让调用者先持有一个代理对象，但真正的对象尚未创建。如果没有必要，这个真正的对象是不会被创建的，直到客户端需要真的必须调用时，才创建真正的对象。JDBC的连接池返回的JDBC连接（Connection对象）就可以是一个虚代理，即获取连接时根本没有任何实际的数据库连接，直到第一次执行JDBC查询或更新操作时，才真正创建实际的JDBC连接。 保护代理保护代理即Protection Proxy，它用代理对象控制对原始对象的访问，常用于鉴权。 智能引用智能引用即Smart Reference，它也是一种代理对象，如果有很多客户端对它进行访问，通过内部的计数器可以在外部调用者都不使用后自动释放它。 我们来看一下如何应用代理模式编写一个JDBC连接池（DataSource）。我们首先来编写一个虚代理，即如果调用者获取到Connection后，并没有执行任何SQL操作，那么这个Connection Proxy实际上并不会真正打开JDBC连接。调用者代码如下： 123456789101112131415DataSource lazyDataSource = new LazyDataSource(jdbcUrl, jdbcUsername, jdbcPassword);System.out.println(\"get lazy connection...\");try (Connection conn1 = lazyDataSource.getConnection()) &#123; // 并没有实际打开真正的Connection&#125;System.out.println(\"get lazy connection...\");try (Connection conn2 = lazyDataSource.getConnection()) &#123; try (PreparedStatement ps = conn2.prepareStatement(\"SELECT * FROM students\")) &#123; // 打开了真正的Connection try (ResultSet rs = ps.executeQuery()) &#123; while (rs.next()) &#123; System.out.println(rs.getString(\"name\")); &#125; &#125; &#125;&#125; 现在我们来思考如何实现这个LazyConnectionProxy。为了简化代码，我们首先针对Connection接口做一个抽象的代理类： 12345678910111213141516public abstract class AbstractConnectionProxy implements Connection &#123; // 抽象方法获取实际的Connection: protected abstract Connection getRealConnection(); // 实现Connection接口的每一个方法: public Statement createStatement() throws SQLException &#123; return getRealConnection().createStatement(); &#125; public PreparedStatement prepareStatement(String sql) throws SQLException &#123; return getRealConnection().prepareStatement(sql); &#125; ...其他代理方法...&#125; 这个AbstractConnectionProxy代理类的作用是把Connection接口定义的方法全部实现一遍，因为Connection接口定义的方法太多了，后面我们要编写的LazyConnectionProxy只需要继承AbstractConnectionProxy，就不必再把Connection接口方法挨个实现一遍。 LazyConnectionProxy实现如下： 123456789101112131415161718192021222324public class LazyConnectionProxy extends AbstractConnectionProxy &#123; private Supplier&lt;Connection&gt; supplier; private Connection target = null; public LazyConnectionProxy(Supplier&lt;Connection&gt; supplier) &#123; this.supplier = supplier; &#125; // 覆写close方法：只有target不为null时才需要关闭: public void close() throws SQLException &#123; if (target != null) &#123; System.out.println(\"Close connection: \" + target); super.close(); &#125; &#125; @Override protected Connection getRealConnection() &#123; if (target == null) &#123; target = supplier.get(); &#125; return target; &#125;&#125; 如果调用者没有执行任何SQL语句，那么target字段始终为null。只有第一次执行SQL语句时（即调用任何类似prepareStatement()方法时，触发getRealConnection()调用），才会真正打开实际的JDBC Connection。 最后，我们还需要编写一个LazyDataSource来支持这个LazyConnecitonProxy： 123456789101112131415161718192021222324public class LazyDataSource implements DataSource &#123; private String url; private String username; private String password; public LazyDataSource(String url, String username, String password) &#123; this.url = url; this.username = username; this.password = password; &#125; public Connection getConnection(String username, String password) throws SQLException &#123; return new LazyConnectionProxy(() -&gt; &#123; try &#123; Connection conn = DriverManager.getConnection(url, username, password); System.out.println(\"Open connection: \" + conn); return conn; &#125; catch (SQLException e) &#123; throw new RuntimeException(e); &#125; &#125;); &#125; ...&#125; 我们执行代码，输出如下： 123456789get lazy connection...get lazy connection...Open connection: com.mysql.jdbc.JDBC4Connection@7a36aefa小明小红小军小白...Close connection: com.mysql.jdbc.JDBC4Connection@7a36aefa 可见第一个getConnection()调用获取到的LazyConnectionProxy并没有实际打开真正的JDBC Connection。 使用连接池的时候，我们更希望能重复使用连接。如果调用方编写这样的代码： 123456789DataSource pooledDataSource = new PooledDataSource(jdbcUrl, jdbcUsername, jdbcPassword);try (Connection conn = pooledDataSource.getConnection()) &#123;&#125;try (Connection conn = pooledDataSource.getConnection()) &#123; // 获取到的是同一个Connection&#125;try (Connection conn = pooledDataSource.getConnection()) &#123; // 获取到的是同一个Connection&#125; 调用方并不关心是否复用了Connection，但从PooledDataSource获取的Connection确实自带这个优化功能。如何实现可复用Connection的连接池？答案仍然是使用代理模式。 12345678910111213141516171819202122public class PooledConnectionProxy extends AbstractConnectionProxy &#123; // 实际的Connection: Connection target; // 空闲队列: Queue&lt;PooledConnectionProxy&gt; idleQueue; public PooledConnectionProxy(Queue&lt;PooledConnectionProxy&gt; idleQueue, Connection target) &#123; this.idleQueue = idleQueue; this.target = target; &#125; public void close() throws SQLException &#123; System.out.println(\"Fake close and released to idle queue for future reuse: \" + target); // 并没有调用实际Connection的close()方法, // 而是把自己放入空闲队列: idleQueue.offer(this); &#125; protected Connection getRealConnection() &#123; return target; &#125;&#125; 复用连接的关键在于覆写close()方法，它并没有真正关闭底层JDBC连接，而是把自己放回一个空闲队列，以便下次使用。 空闲队列由PooledDataSource负责维护： 123456789101112131415161718192021222324252627282930313233public class PooledDataSource implements DataSource &#123; private String url; private String username; private String password; // 维护一个空闲队列: private Queue&lt;PooledConnectionProxy&gt; idleQueue = new ArrayBlockingQueue&lt;&gt;(100); public PooledDataSource(String url, String username, String password) &#123; this.url = url; this.username = username; this.password = password; &#125; public Connection getConnection(String username, String password) throws SQLException &#123; // 首先试图获取一个空闲连接: PooledConnectionProxy conn = idleQueue.poll(); if (conn == null) &#123; // 没有空闲连接时，打开一个新连接: conn = openNewConnection(); &#125; else &#123; System.out.println(\"Return pooled connection: \" + conn.target); &#125; return conn; &#125; private PooledConnectionProxy openNewConnection() throws SQLException &#123; Connection conn = DriverManager.getConnection(url, username, password); System.out.println(\"Open new connection: \" + conn); return new PooledConnectionProxy(idleQueue, conn); &#125; ...&#125; 我们执行调用方代码，输出如下： 123456Open new connection: com.mysql.jdbc.JDBC4Connection@61ca2dfaFake close and released to idle queue for future reuse: com.mysql.jdbc.JDBC4Connection@61ca2dfaReturn pooled connection: com.mysql.jdbc.JDBC4Connection@61ca2dfaFake close and released to idle queue for future reuse: com.mysql.jdbc.JDBC4Connection@61ca2dfaReturn pooled connection: com.mysql.jdbc.JDBC4Connection@61ca2dfaFake close and released to idle queue for future reuse: com.mysql.jdbc.JDBC4Connection@61ca2dfa 除了第一次打开了一个真正的JDBC Connection，后续获取的Connection实际上是同一个JDBC Connection。但是，对于调用方来说，完全不需要知道底层做了哪些优化。 我们实际使用的DataSource，例如HikariCP，都是基于代理模式实现的，原理同上，但增加了更多的如动态伸缩的功能（一个连接空闲一段时间后自动关闭）。 有的童鞋会发现Proxy模式和Decorator模式有些类似。确实，这两者看起来很像，但区别在于：Decorator模式让调用者自己创建核心类，然后组合各种功能，而Proxy模式决不能让调用者自己创建再组合，否则就失去了代理的功能。Proxy模式让调用者认为获取到的是核心类接口，但实际上是代理类。","categories":[],"tags":[{"name":"DesignPatterns","slug":"DesignPatterns","permalink":"http://dqlcr5.coding-pages.com/tags/DesignPatterns/"}]},{"title":"享元模式","slug":"享元模式","date":"2020-06-09T10:05:02.000Z","updated":"2020-06-09T12:51:44.443Z","comments":true,"path":"2020/06/09/享元模式/","link":"","permalink":"http://dqlcr5.coding-pages.com/2020/06/09/%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/","excerpt":"享元 运用共享技术有效地支持大量细粒度的对象。","text":"享元 运用共享技术有效地支持大量细粒度的对象。 享元（Flyweight）的核心思想很简单：如果一个对象实例一经创建就不可变，那么反复创建相同的实例就没有必要，直接向调用方返回一个共享的实例就行，这样即节省内存，又可以减少创建对象的过程，提高运行速度。 享元模式在Java标准库中有很多应用。我们知道，包装类型如Byte、Integer都是不变类，因此，反复创建同一个值相同的包装类型是没有必要的。以Integer为例，如果我们通过Integer.valueOf()这个静态工厂方法创建Integer实例，当传入的int范围在-128~+127之间时，会直接返回缓存的Integer实例： 1234567public class Main &#123; public static void main(String[] args) throws InterruptedException &#123; Integer n1 = Integer.valueOf(100); Integer n2 = Integer.valueOf(100); System.out.println(n1 == n2); // true &#125;&#125; 对于Byte来说，因为它一共只有256个状态，所以，通过Byte.valueOf()创建的Byte实例，全部都是缓存对象。 因此，享元模式就是通过工厂方法创建对象，在工厂方法内部，很可能返回缓存的实例，而不是新创建实例，从而实现不可变实例的复用。 总是使用工厂方法而不是new操作符创建实例，可获得享元模式的好处。 在实际应用中，享元模式主要应用于缓存，即客户端如果重复请求某些对象，不必每次查询数据库或者读取文件，而是直接返回内存中缓存的数据。 我们以Student为例，设计一个静态工厂方法，它在内部可以返回缓存的对象： 123456789101112131415161718192021222324252627282930public class Student &#123; // 持有缓存: private static final Map&lt;String, Student&gt; cache = new HashMap&lt;&gt;(); // 静态工厂方法: public static Student create(int id, String name) &#123; String key = id + \"\\n\" + name; // 先查找缓存: Student std = cache.get(key); if (std == null) &#123; // 未找到,创建新对象: System.out.println(String.format(\"create new Student(%s, %s)\", id, name)); std = new Student(id, name); // 放入缓存: cache.put(key, std); &#125; else &#123; // 缓存中存在: System.out.println(String.format(\"return cached Student(%s, %s)\", std.id, std.name)); &#125; return std; &#125; private final int id; private final String name; public Student(int id, String name) &#123; this.id = id; this.name = name; &#125;&#125; 在实际应用中，我们经常使用成熟的缓存库，例如Guava的Cache，因为它提供了最大缓存数量限制、定时过期等实用功能。","categories":[],"tags":[{"name":"DesignPatterns","slug":"DesignPatterns","permalink":"http://dqlcr5.coding-pages.com/tags/DesignPatterns/"}]},{"title":"外观模式","slug":"外观模式","date":"2020-06-09T07:37:54.000Z","updated":"2020-06-09T10:03:24.401Z","comments":true,"path":"2020/06/09/外观模式/","link":"","permalink":"http://dqlcr5.coding-pages.com/2020/06/09/%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F/","excerpt":"外观模式 为子系统中的一组接口提供一个一致的界面。Facade模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。","text":"外观模式 为子系统中的一组接口提供一个一致的界面。Facade模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。 外观模式，即Facade，是一个比较简单的模式。它的基本思想如下： 如果客户端要跟许多子系统打交道，那么客户端需要了解各个子系统的接口，比较麻烦。如果有一个统一的“中介”，让客户端只跟中介打交道，中介再去跟各个子系统打交道，对客户端来说就比较简单。所以Facade就相当于搞了一个中介。 我们以注册公司为例，假设注册公司需要三步： 向工商局申请公司营业执照； 在银行开设账户； 在税务局开设纳税号。 以下是三个系统的接口： 1234567891011121314151617181920// 工商注册:public class AdminOfIndustry &#123; public Company register(String name) &#123; ... &#125;&#125;// 银行开户:public class Bank &#123; public String openAccount(String companyId) &#123; ... &#125;&#125;// 纳税登记:public class Taxation &#123; public String applyTaxCode(String companyId) &#123; ... &#125;&#125; 如果子系统比较复杂，并且客户对流程也不熟悉，那就把这些流程全部委托给中介： 12345678910public class Facade &#123; public Company openCompany(String name) &#123; Company c = this.admin.register(name); String bankAccount = this.bank.openAccount(c.getId()); c.setBankAccount(bankAccount); String taxCode = this.taxation.applyTaxCode(c.getId()); c.setTaxCode(taxCode); return c; &#125;&#125; 这样，客户端只跟Facade打交道，一次完成公司注册的所有繁琐流程： 1Company c = facade.openCompany(\"Facade Software Ltd.\"); 很多Web程序，内部有多个子系统提供服务，经常使用一个统一的Facade入口，例如一个RestApiController，使得外部用户调用的时候，只关心Facade提供的接口，不用管内部到底是哪个子系统处理的。 更复杂的Web程序，会有多个Web服务，这个时候，经常会使用一个统一的网关入口来自动转发到不同的Web服务，这种提供统一入口的网关就是Gateway，它本质上也是一个Facade，但可以附加一些用户认证、限流限速的额外服务。","categories":[],"tags":[{"name":"DesignPatterns","slug":"DesignPatterns","permalink":"http://dqlcr5.coding-pages.com/tags/DesignPatterns/"}]},{"title":"装饰器模式","slug":"装饰器模式","date":"2020-06-09T07:10:41.000Z","updated":"2020-06-09T07:38:40.531Z","comments":true,"path":"2020/06/09/装饰器模式/","link":"","permalink":"http://dqlcr5.coding-pages.com/2020/06/09/%E8%A3%85%E9%A5%B0%E5%99%A8%E6%A8%A1%E5%BC%8F/","excerpt":"装饰器模式 动态地给一个对象添加一些额外的职责。就增加功能来说，相比生成子类更为灵活。","text":"装饰器模式 动态地给一个对象添加一些额外的职责。就增加功能来说，相比生成子类更为灵活。 装饰器（Decorator）模式，是一种在运行期动态给某个对象的实例增加功能的方法。 我们在IO的Filter模式一节中其实已经讲过装饰器模式了。在Java标准库中，InputStream是抽象类，FileInputStream、ServletInputStream、Socket.getInputStream()这些InputStream都是最终数据源。 现在，如果要给不同的最终数据源增加缓冲功能、计算签名功能、加密解密功能，那么，3个最终数据源、3种功能一共需要9个子类。如果继续增加最终数据源，或者增加新功能，子类会爆炸式增长，这种设计方式显然是不可取的。 Decorator模式的目的就是把一个一个的附加功能，用Decorator的方式给一层一层地累加到原始数据源上，最终，通过组合获得我们想要的功能。 例如：给FileInputStream增加缓冲和解压缩功能，用Decorator模式写出来如下： 123456// 创建原始的数据源:InputStream fis = new FileInputStream(\"test.gz\");// 增加缓冲功能:InputStream bis = new BufferedInputStream(fis);// 增加解压缩功能:InputStream gis = new GZIPInputStream(bis); 或者一次性写成这样： 1234InputStream input = new GZIPInputStream( // 第二层装饰 new BufferedInputStream( // 第一层装饰 new FileInputStream(\"test.gz\") // 核心功能 )); 观察BufferedInputStream和GZIPInputStream，它们实际上都是从FilterInputStream继承的，这个FilterInputStream就是一个抽象的Decorator。我们用图把Decorator模式画出来如下： 123456789101112131415 ┌───────────┐ │ Component │ └───────────┘ ▲ ┌────────────┼─────────────────┐ │ │ │┌───────────┐┌───────────┐ ┌───────────┐│ComponentA ││ComponentB │... │ Decorator │└───────────┘└───────────┘ └───────────┘ ▲ ┌──────┴──────┐ │ │ ┌───────────┐ ┌───────────┐ │DecoratorA │ │DecoratorB │... └───────────┘ └───────────┘ 最顶层的Component是接口，对应到IO的就是InputStream这个抽象类。ComponentA、ComponentB是实际的子类，对应到IO的就是FileInputStream、ServletInputStream这些数据源。Decorator是用于实现各个附加功能的抽象装饰器，对应到IO的就是FilterInputStream。而从Decorator派生的就是一个一个的装饰器，它们每个都有独立的功能，对应到IO的就是BufferedInputStream、GZIPInputStream等。 Decorator模式有什么好处？它实际上把核心功能和附加功能给分开了。核心功能指FileInputStream这些真正读数据的源头，附加功能指加缓冲、压缩、解密这些功能。如果我们要新增核心功能，就增加Component的子类，例如ByteInputStream。如果我们要增加附加功能，就增加Decorator的子类，例如CipherInputStream。两部分都可以独立地扩展，而具体如何附加功能，由调用方自由组合，从而极大地增强了灵活性。 如果我们要自己设计完整的Decorator模式，应该如何设计？ 我们还是举个栗子：假设我们需要渲染一个HTML的文本，但是文本还可以附加一些效果，比如加粗、变斜体、加下划线等。为了实现动态附加效果，可以采用Decorator模式。 首先，仍然需要定义顶层接口TextNode： 123456public interface TextNode &#123; // 设置text: void setText(String text); // 获取text: String getText();&#125; 对于核心节点，例如``，它需要从TextNode直接继承： 1234567891011public class SpanNode implements TextNode &#123; private String text; public void setText(String text) &#123; this.text = text; &#125; public String getText() &#123; return \"&lt;span&gt;\" + text + \"&lt;/span&gt;\"; &#125;&#125; 紧接着，为了实现Decorator模式，需要有一个抽象的Decorator类： 1234567891011public abstract class NodeDecorator implements TextNode &#123; protected final TextNode target; protected NodeDecorator(TextNode target) &#123; this.target = target; &#125; public void setText(String text) &#123; this.target.setText(text); &#125;&#125; 这个NodeDecorator类的核心是持有一个TextNode，即将要把功能附加到的TextNode实例。接下来就可以写一个加粗功能： 123456789public class BoldDecorator extends NodeDecorator &#123; public BoldDecorator(TextNode target) &#123; super(target); &#125; public String getText() &#123; return \"&lt;b&gt;\" + target.getText() + \"&lt;/b&gt;\"; &#125;&#125; 类似的，可以继续加ItalicDecorator、UnderlineDecorator等。客户端可以自由组合这些Decorator： 1234567891011121314TextNode n1 = new SpanNode();TextNode n2 = new BoldDecorator(new UnderlineDecorator(new SpanNode()));TextNode n3 = new ItalicDecorator(new BoldDecorator(new SpanNode()));n1.setText(\"Hello\");n2.setText(\"Decorated\");n3.setText(\"World\");System.out.println(n1.getText());// 输出&lt;span&gt;Hello&lt;/span&gt;System.out.println(n2.getText());// 输出&lt;b&gt;&lt;u&gt;&lt;span&gt;Decorated&lt;/span&gt;&lt;/u&gt;&lt;/b&gt;System.out.println(n3.getText());// 输出&lt;i&gt;&lt;b&gt;&lt;span&gt;World&lt;/span&gt;&lt;/b&gt;&lt;/i&gt;","categories":[],"tags":[{"name":"DesignPatterns","slug":"DesignPatterns","permalink":"http://dqlcr5.coding-pages.com/tags/DesignPatterns/"}]},{"title":"组合模式","slug":"组合模式","date":"2020-06-09T06:39:48.000Z","updated":"2020-06-09T07:09:48.175Z","comments":true,"path":"2020/06/09/组合模式/","link":"","permalink":"http://dqlcr5.coding-pages.com/2020/06/09/%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/","excerpt":"组合模式 将对象组合成树形结构以表示“部分-整体”的层次结构，使得用户对单个对象和组合对象的使用具有一致性。","text":"组合模式 将对象组合成树形结构以表示“部分-整体”的层次结构，使得用户对单个对象和组合对象的使用具有一致性。 组合模式（Composite）经常用于树形结构，为了简化代码，使用Composite可以把一个叶子节点与一个父节点统一起来处理。 我们来看一个具体的例子。在XML或HTML中，从根节点开始，每个节点都可能包含任意个其他节点，这些层层嵌套的节点就构成了一颗树。 要以树的结构表示XML，我们可以先抽象出节点类型Node： 12345678public interface Node &#123; // 添加一个节点为子节点: Node add(Node node); // 获取子节点: List&lt;Node&gt; children(); // 输出为XML: String toXml();&#125; 对于一个这样的节点，我们称之为 ElementNode，它可以作为容器包含多个子节点： 123456789101112131415161718192021222324252627public class ElementNode implements Node &#123; private String name; private List&lt;Node&gt; list = new ArrayList&lt;&gt;(); public ElementNode(String name) &#123; this.name = name; &#125; public Node add(Node node) &#123; list.add(node); return this; &#125; public List&lt;Node&gt; children() &#123; return list; &#125; public String toXml() &#123; String start = \"&lt;\" + name + \"&gt;\\n\"; String end = \"&lt;/\" + name + \"&gt;\\n\"; StringJoiner sj = new StringJoiner(\"\", start, end); list.forEach(node -&gt; &#123; sj.add(node.toXml() + \"\\n\"); &#125;); return sj.toString(); &#125;&#125; 对于普通文本，我们把它看作TextNode，它没有子节点： 12345678910111213141516171819public class TextNode implements Node &#123; private String text; public TextNode(String text) &#123; this.text = text; &#125; public Node add(Node node) &#123; throw new UnsupportedOperationException(); &#125; public List&lt;Node&gt; children() &#123; return List.of(); &#125; public String toXml() &#123; return text; &#125;&#125; 此外，还可以有注释节点： 12345678910111213141516171819public class CommentNode implements Node &#123; private String text; public CommentNode(String text) &#123; this.text = text; &#125; public Node add(Node node) &#123; throw new UnsupportedOperationException(); &#125; public List&lt;Node&gt; children() &#123; return List.of(); &#125; public String toXml() &#123; return \"&lt;!-- \" + text + \" --&gt;\"; &#125;&#125; 通过ElementNode、TextNode和CommentNode，我们就可以构造出一颗树： 123456789Node root = new ElementNode(\"school\");root.add(new ElementNode(\"classA\") .add(new TextNode(\"Tom\")) .add(new TextNode(\"Alice\")));root.add(new ElementNode(\"classB\") .add(new TextNode(\"Bob\")) .add(new TextNode(\"Grace\")) .add(new CommentNode(\"comment...\")));System.out.println(root.toXml()); 最后通过root节点输出的XML如下： 1234567891011&lt;school&gt;&lt;classA&gt;TomAlice&lt;/classA&gt;&lt;classB&gt;BobGrace&lt;!-- comment... --&gt;&lt;/classB&gt;&lt;/school&gt; 可见，使用Composite模式时，需要先统一单个节点以及“容器”节点的接口： 123456789 ┌───────────┐ │ Node │ └───────────┘ ▲ ┌────────────┼────────────┐ │ │ │┌───────────┐┌───────────┐┌───────────┐│ElementNode││ TextNode ││CommentNode│└───────────┘└───────────┘└───────────┘ 作为容器节点的ElementNode又可以添加任意个Node，这样就可以构成层级结构。 类似的，像文件夹和文件、GUI窗口的各种组件，都符合Composite模式的定义，因为它们的结构天生就是层级结构。","categories":[],"tags":[{"name":"DesignPatterns","slug":"DesignPatterns","permalink":"http://dqlcr5.coding-pages.com/tags/DesignPatterns/"}]},{"title":"桥接模式","slug":"桥接模式","date":"2020-06-09T06:04:02.000Z","updated":"2020-06-09T06:39:23.024Z","comments":true,"path":"2020/06/09/桥接模式/","link":"","permalink":"http://dqlcr5.coding-pages.com/2020/06/09/%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/","excerpt":"桥接模式 将抽象部分与它的实现部分分离，使它们都可以独立地变化。","text":"桥接模式 将抽象部分与它的实现部分分离，使它们都可以独立地变化。 假设某个汽车厂商生产三种品牌的汽车：Big、Tiny和Boss，每种品牌又可以选择燃油、纯电和混合动力。如果用传统的继承来表示各个最终车型，一共有3个抽象类加9个最终子类： 1234567891011121314151617181920 ┌───────┐ │ Car │ └───────┘ ▲ ┌──────────────────┼───────────────────┐ │ │ │┌───────┐ ┌───────┐ ┌───────┐│BigCar │ │TinyCar│ │BossCar│└───────┘ └───────┘ └───────┘ ▲ ▲ ▲ │ │ │ │ ┌───────────────┐│ ┌───────────────┐│ ┌───────────────┐ ├─│ BigFuelCar │├─│ TinyFuelCar │├─│ BossFuelCar │ │ └───────────────┘│ └───────────────┘│ └───────────────┘ │ ┌───────────────┐│ ┌───────────────┐│ ┌───────────────┐ ├─│BigElectricCar │├─│TinyElectricCar│├─│BossElectricCar│ │ └───────────────┘│ └───────────────┘│ └───────────────┘ │ ┌───────────────┐│ ┌───────────────┐│ ┌───────────────┐ └─│ BigHybridCar │└─│ TinyHybridCar │└─│ BossHybridCar │ └───────────────┘ └───────────────┘ └───────────────┘ 如果要新增一个品牌，或者加一个新的引擎（比如核动力），那么子类的数量增长更快。 所以，桥接模式就是为了避免直接继承带来的子类爆炸。 我们来看看桥接模式如何解决上述问题。 在桥接模式中，首先把Car按品牌进行子类化，但是，每个品牌选择什么发动机，不再使用子类扩充，而是通过一个抽象的“修正”类，以组合的形式引入。我们来看看具体的实现。 首先定义抽象类Car，它引用一个Engine： 12345678910public abstract class Car &#123; // 引用Engine: protected Engine engine; public Car(Engine engine) &#123; this.engine = engine; &#125; public abstract void drive();&#125; Engine的定义如下： 123public interface Engine &#123; void start();&#125; 紧接着，在一个“修正”的抽象类RefinedCar中定义一些额外操作： 123456789101112public abstract class RefinedCar extends Car &#123; public RefinedCar(Engine engine) &#123; super(engine); &#125; public void drive() &#123; this.engine.start(); System.out.println(\"Drive \" + getBrand() + \" car...\"); &#125; public abstract String getBrand();&#125; 这样一来，最终的不同品牌继承自RefinedCar，例如BossCar： 123456789public class BossCar extends RefinedCar &#123; public BossCar(Engine engine) &#123; super(engine); &#125; public String getBrand() &#123; return \"Boss\"; &#125;&#125; 而针对每一种引擎，继承自Engine，例如HybridEngine： 12345public class HybridEngine implements Engine &#123; public void start() &#123; System.out.println(\"Start Hybrid Engine...\"); &#125;&#125; 客户端通过自己选择一个品牌，再配合一种引擎，得到最终的Car： 12RefinedCar car = new BossCar(new HybridEngine());car.drive(); 使用桥接模式的好处在于，如果要增加一种引擎，只需要针对Engine派生一个新的子类，如果要增加一个品牌，只需要针对RefinedCar派生一个子类，任何RefinedCar的子类都可以和任何一种Engine自由组合，即一辆汽车的两个维度：品牌和引擎都可以独立地变化。 123456789101112131415161718 ┌───────────┐ │ Car │ └───────────┘ ▲ │ ┌───────────┐ ┌─────────┐ │RefinedCar │ ─ ─ ─&gt;│ Engine │ └───────────┘ └─────────┘ ▲ ▲ ┌────────┼────────┐ │ ┌──────────────┐ │ │ │ ├─│ FuelEngine │┌───────┐┌───────┐┌───────┐ │ └──────────────┘│BigCar ││TinyCar││BossCar│ │ ┌──────────────┐└───────┘└───────┘└───────┘ ├─│ElectricEngine│ │ └──────────────┘ │ ┌──────────────┐ └─│ HybridEngine │ └──────────────┘ 桥接模式实现比较复杂，实际应用也非常少，但它提供的设计思想值得借鉴，即不要过度使用继承，而是优先拆分某些部件，使用组合的方式来扩展功能。","categories":[],"tags":[{"name":"DesignPatterns","slug":"DesignPatterns","permalink":"http://dqlcr5.coding-pages.com/tags/DesignPatterns/"}]},{"title":"HTTP协议","slug":"HTTP协议","date":"2020-06-09T06:02:07.000Z","updated":"2020-06-09T06:02:07.197Z","comments":true,"path":"2020/06/09/HTTP协议/","link":"","permalink":"http://dqlcr5.coding-pages.com/2020/06/09/HTTP%E5%8D%8F%E8%AE%AE/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"适配器模式","slug":"适配器模式","date":"2020-06-08T06:28:13.000Z","updated":"2020-06-08T10:02:43.483Z","comments":true,"path":"2020/06/08/适配器模式/","link":"","permalink":"http://dqlcr5.coding-pages.com/2020/06/08/%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/","excerpt":"适配器模式 将一个类的接口转换成客户希望的另外一个接口，使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。","text":"适配器模式 将一个类的接口转换成客户希望的另外一个接口，使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。 适配器模式是Adapter，也称Wrapper，是指如果一个接口需要B接口，但是待传入的对象却是A接口，怎么办？ 我们举个例子。如果去美国，我们随身带的电器是无法直接使用的，因为美国的插座标准和中国不同，所以，我们需要一个适配器： 123456789101112131415public class Task implements Callable&lt;Long&gt; &#123; private long num; public Task(long num) &#123; this.num = num; &#125; public Long call() throws Exception &#123; long r = 0; for (long n = 1; n &lt;= this.num; n++) &#123; r = r + n; &#125; System.out.println(\"Result: \" + r); return r; &#125;&#125; 现在，我们想通过一个线程去执行它： 123Callable&lt;Long&gt; callable = new Task(123450000L);Thread thread = new Thread(callable); // compile error!thread.start(); 发现编译不过！因为Thread接收Runnable接口，但不接收Callable接口，肿么办？ 一个办法是改写Task类，把实现的Callable改为Runnable，但这样做不好，因为Task很可能在其他地方作为Callable被引用，改写Task的接口，会导致其他正常工作的代码无法编译。 另一个办法不用改写Task类，而是用一个Adapter，把这个Callable接口“变成”Runnable接口，这样，就可以正常编译： 123Callable&lt;Long&gt; callable = new Task(123450000L);Thread thread = new Thread(new RunnableAdapter(callable));thread.start(); 这个RunnableAdapter类就是Adapter，它接收一个Callable，输出一个Runnable。怎么实现这个RunnableAdapter呢？我们先看完整的代码： 123456789101112131415161718public class RunnableAdapter implements Runnable &#123; // 引用待转换接口: private Callable&lt;?&gt; callable; public RunnableAdapter(Callable&lt;?&gt; callable) &#123; this.callable = callable; &#125; // 实现指定接口: public void run() &#123; // 将指定接口调用委托给转换接口调用: try &#123; callable.call(); &#125; catch (Exception e) &#123; throw new RuntimeException(e); &#125; &#125;&#125; 编写一个Adapter的步骤如下： 实现目标接口，这里是Runnable； 内部持有一个待转换接口的引用，这里是通过字段持有Callable接口； 在目标接口的实现方法内部，调用待转换接口的方法。 这样一来，Thread就可以接收这个RunnableAdapter，因为它实现了Runnable接口。Thread作为调用方，它会调用RunnableAdapter的run()方法，在这个run()方法内部，又调用了Callable的call()方法，相当于Thread通过一层转换，间接调用了Callable的call()方法。 适配器模式在Java标准库中有广泛应用。比如我们持有数据类型是String[]，但是需要List接口时，可以用一个Adapter： 12String[] exist = new String[] &#123;\"Good\", \"morning\", \"Bob\", \"and\", \"Alice\"&#125;;Set&lt;String&gt; set = new HashSet&lt;&gt;(Arrays.asList(exist)); 注意到List Arrays.asList(T[])就相当于一个转换器，它可以把数组转换为List。 我们再看一个例子：假设我们持有一个InputStream，希望调用readText(Reader)方法，但它的参数类型是Reader而不是InputStream，怎么办？ 当然是使用适配器，把InputStream“变成”Reader： 123InputStream input = Files.newInputStream(Paths.get(\"/path/to/file\"));Reader reader = new InputStreamReader(input, \"UTF-8\");readText(reader); InputStreamReader就是Java标准库提供的Adapter，它负责把一个InputStream适配为Reader。类似的还有OutputStreamWriter。 如果我们把readText(Reader)方法参数从Reader改为FileReader，会有什么问题？这个时候，因为我们需要一个FileReader类型，就必须把InputStream适配为FileReader： 1FileReader reader = new InputStreamReader(input, \"UTF-8\"); // compile error! 直接使用InputStreamReader这个Adapter是不行的，因为它只能转换出Reader接口。事实上，要把InputStream转换为FileReader也不是不可能，但需要花费十倍以上的功夫。这时，面向抽象编程这一原则就体现出了威力：持有高层接口不但代码更灵活，而且把各种接口组合起来也更容易。一旦持有某个具体的子类类型，要想做一些改动就非常困难。","categories":[],"tags":[{"name":"DesignPatterns","slug":"DesignPatterns","permalink":"http://dqlcr5.coding-pages.com/tags/DesignPatterns/"}]},{"title":"原型","slug":"原型","date":"2020-06-08T01:43:14.000Z","updated":"2020-06-08T01:48:58.795Z","comments":true,"path":"2020/06/08/原型/","link":"","permalink":"http://dqlcr5.coding-pages.com/2020/06/08/%E5%8E%9F%E5%9E%8B/","excerpt":"原型 用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象。","text":"原型 用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象。 原型模式，即Prototype，是指创建新对象的时候，根据现有的一个原型来创建。 我们举个例子：如果我们已经有了一个String[]数组，想再创建一个一模一样的String[]数组，怎么写？ 实际上创建过程很简单，就是把现有数组的元素复制到新数组。如果我们把这个创建过程封装一下，就成了原型模式。用代码实现如下： 1234// 原型:String[] original = &#123; \"Apple\", \"Pear\", \"Banana\" &#125;;// 新对象:String[] copy = Arrays.copyOf(original, original.length); 对于普通类，我们如何实现原型拷贝？Java的Object提供了一个clone()方法，它的意图就是复制一个新的对象出来，我们需要实现一个Cloneable接口来标识一个对象是“可复制”的： 1234567891011121314public class Employee implements Cloneable &#123; private int id; private String name; private int score; // 复制新对象并返回: public Object clone() &#123; Employee employee = new Employee(); employee.id = this.id; employee.name = this.name; employee.score = this.score; return employee; &#125;&#125; 使用的时候，因为clone()的方法签名是定义在Object中，返回类型也是Object，所以要强制转型，比较麻烦： 123456789Employee employee = new Employee();employee.setId(123);employee.setName(\"Bob\");employee.setScore(88);// 复制新对象:Employee employee2 = (Employee) employee.clone();System.out.println(employee);System.out.println(employee2);System.out.println(employee == employee2); // false 实际上，使用原型模式更好的方式是定义一个copy()方法，返回明确的类型： 12345678910111213public class Employee &#123; private int id; private String name; private int score; public Employee copy() &#123; Student employee = new Employee(); employee.id = this.id; employee.name = this.name; employee.score = this.score; return employee; &#125;&#125; 原型模式应用不是很广泛，因为很多实例会持有类似文件、Socket这样的资源，而这些资源是无法复制给另一个对象共享的，只有存储简单类型的“值”对象可以复制。","categories":[],"tags":[{"name":"DesignPatterns","slug":"DesignPatterns","permalink":"http://dqlcr5.coding-pages.com/tags/DesignPatterns/"}]},{"title":"生成器","slug":"生成器","date":"2020-06-08T01:39:43.000Z","updated":"2020-06-08T01:49:07.345Z","comments":true,"path":"2020/06/08/生成器/","link":"","permalink":"http://dqlcr5.coding-pages.com/2020/06/08/%E7%94%9F%E6%88%90%E5%99%A8/","excerpt":"生成器 将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。","text":"生成器 将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。 生成器模式（Builder）是使用多个“小型”工厂来最终创建出一个完整对象。 当我们使用Builder的时候，一般来说，是因为创建这个对象的步骤比较多，每个步骤都需要一个零部件，最终组合成一个完整的对象。 使用Builder模式时，适用于创建的对象比较复杂，最好一步一步创建出“零件”，最后再装配起来。JavaMail的MimeMessage就可以看作是一个Builder模式，只不过Builder和最终产品合二为一，都是MimeMessage： 1234567891011121314151617181920Multipart multipart &#x3D; new MimeMultipart();&#x2F;&#x2F; 添加text:BodyPart textpart &#x3D; new MimeBodyPart();textpart.setContent(body, &quot;text&#x2F;html;charset&#x3D;utf-8&quot;);multipart.addBodyPart(textpart);&#x2F;&#x2F; 添加image:BodyPart imagepart &#x3D; new MimeBodyPart();imagepart.setFileName(fileName);imagepart.setDataHandler(new DataHandler(new ByteArrayDataSource(input, &quot;application&#x2F;octet-stream&quot;)));multipart.addBodyPart(imagepart);MimeMessage message &#x3D; new MimeMessage(session);&#x2F;&#x2F; 设置发送方地址:message.setFrom(new InternetAddress(&quot;me@example.com&quot;));&#x2F;&#x2F; 设置接收方地址:message.setRecipient(Message.RecipientType.TO, new InternetAddress(&quot;xiaoming@somewhere.com&quot;));&#x2F;&#x2F; 设置邮件主题:message.setSubject(&quot;Hello&quot;, &quot;UTF-8&quot;);&#x2F;&#x2F; 设置邮件内容为multipart:message.setContent(multipart); 很多时候，我们可以简化Builder模式，以链式调用的方式来创建对象。例如，我们经常编写这样的代码：123456StringBuilder builder &#x3D; new StringBuilder();builder.append(secure ? &quot;https:&#x2F;&#x2F;&quot; : &quot;http:&#x2F;&#x2F;&quot;) .append(&quot;www.liaoxuefeng.com&quot;) .append(&quot;&#x2F;&quot;) .append(&quot;?t&#x3D;0&quot;);String url &#x3D; builder.toString(); 由于我们经常需要构造URL字符串，可以使用Builder模式编写一个URLBuilder，调用方式如下：123456String url &#x3D; URLBuilder.builder() &#x2F;&#x2F; 创建Builder .setDomain(&quot;www.liaoxuefeng.com&quot;) &#x2F;&#x2F; 设置domain .setScheme(&quot;https&quot;) &#x2F;&#x2F; 设置scheme .setPath(&quot;&#x2F;&quot;) &#x2F;&#x2F; 设置路径 .setQuery(Map.of(&quot;a&quot;, &quot;123&quot;, &quot;q&quot;, &quot;K&amp;R&quot;)) &#x2F;&#x2F; 设置query .build(); &#x2F;&#x2F; 完成build","categories":[],"tags":[{"name":"DesignPatterns","slug":"DesignPatterns","permalink":"http://dqlcr5.coding-pages.com/tags/DesignPatterns/"}]},{"title":"工厂设计模式","slug":"工厂设计模式","date":"2020-06-06T12:42:10.000Z","updated":"2020-06-08T01:49:25.791Z","comments":true,"path":"2020/06/06/工厂设计模式/","link":"","permalink":"http://dqlcr5.coding-pages.com/2020/06/06/%E5%B7%A5%E5%8E%82%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/","excerpt":"工厂设计模式工厂方法工厂方法即Factory Method，是一种对象创建型模式。","text":"工厂设计模式工厂方法工厂方法即Factory Method，是一种对象创建型模式。 工厂方法的目的是使得创建对象和使用对象是分离的，并且客户端总是引用抽象工厂和抽象产品： 12345678┌─────────────┐ ┌─────────────┐│ Product │ │ Factory │└─────────────┘ └─────────────┘ ▲ ▲ │ │┌─────────────┐ ┌─────────────┐│ ProductImpl │&lt;─ ─ ─│ FactoryImpl │└─────────────┘ └─────────────┘ 例如实现一个解析字符串到Number的Factory，可以定义如下： 12345public class NumberFactoryImpl implements NumberFactory &#123; public Number parse(String s) &#123; return new BigDecimal(s); &#125;&#125; 而产品接口是Number，NumberFactoryImpl返回的实际产品是BigDecimal。 那么客户端如何创建NumberFactoryImpl呢？通常我们会在接口Factory中定义一个静态方法getFactory()来返回真正的子类： 123456789public interface NumberFactory &#123; // 创建方法: Number parse(String s); // 获取工厂实例: static NumberFactory getFactory() &#123; return impl; &#125; static NumberFactory impl = new NumberFactoryImpl();&#125; 在客户端中，我们只需要和工厂接口NumberFactory以及抽象产品Number打交道： 12NumberFactory factory = NumberFactory.getFactory();Number result = factory.parse(\"123.456\"); 调用方可以完全忽略真正的工厂NumberFactoryImpl和实际的产品BigDecimal，这样做的好处是允许创建产品的代码独立地变换，而不会影响到调用方。 实际上大多数情况下我们并不需要抽象工厂，而是通过静态方法直接返回产品，即： 12345public class NumberFactory &#123; public static Number parse(String s) &#123; return new BigDecimal(s); &#125;&#125; 这种简化的使用静态方法创建产品的方式称为静态工厂方法（Static Factory Method）。静态工厂方法广泛地应用在Java标准库中。例如： 1Integer n = Integer.valueOf(100); Integer既是产品又是静态工厂。它提供了静态方法valueOf()来创建Integer。那么这种方式和直接写new Integer(100)有何区别呢？我们观察valueOf()方法： 12345678public final class Integer &#123; public static Integer valueOf(int i) &#123; if (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high) return IntegerCache.cache[i + (-IntegerCache.low)]; return new Integer(i); &#125; ...&#125; 它的好处在于，valueOf()内部可能会使用new创建一个新的Integer实例，但也可能直接返回一个缓存的Integer实例。对于调用方来说，没必要知道Integer创建的细节。 工厂方法可以隐藏创建产品的细节，且不一定每次都会真正创建产品，完全可以返回缓存的产品，从而提升速度并减少内存消耗。 如果调用方直接使用Integer n = new Integer(100)，那么就失去了使用缓存优化的可能性。 我们经常使用的另一个静态工厂方法是List.of()： 1List&lt;String&gt; list = List.of(\"A\", \"B\", \"C\"); 这个静态工厂方法接收可变参数，然后返回List接口。需要注意的是，调用方获取的产品总是List接口，而且并不关心它的实际类型。即使调用方知道List产品的实际类型是java.util.ImmutableCollections$ListN，也不要去强制转型为子类，因为静态工厂方法List.of()保证返回List，但也完全可以修改为返回java.util.ArrayList。这就是里氏替换原则：返回实现接口的任意子类都可以满足该方法的要求，且不影响调用方。 总是引用接口而非实现类，能允许变换子类而不影响调用方，即尽可能面向抽象编程。 和List.of()类似，我们使用MessageDigest时，为了创建某个摘要算法，总是使用静态工厂方法getInstance(String)： 12MessageDigest md5 = MessageDigest.getInstance(\"MD5\");MessageDigest sha1 = MessageDigest.getInstance(\"SHA-1\"); 调用方通过产品名称获得产品实例，不但调用简单，而且获得的引用仍然是MessageDigest这个抽象类。 抽象工厂 提供一个创建一系列相关或相互依赖对象的接口，而无需指定它们具体的类。 抽象工厂模式（Abstract Factory）是一个比较复杂的创建型模式。 抽象工厂模式和工厂方法不太一样，它要解决的问题比较复杂，不但工厂是抽象的，产品是抽象的，而且有多个产品需要创建，因此，这个抽象工厂会对应到多个实际工厂，每个实际工厂负责创建多个实际产品： 1234567891011121314151617 ┌────────┐ ─ &gt;│ProductA│┌────────┐ ┌─────────┐ │ └────────┘│ Client │─ ─&gt;│ Factory │─ ─└────────┘ └─────────┘ │ ┌────────┐ ▲ ─ &gt;│ProductB│ ┌───────┴───────┐ └────────┘ │ │ ┌─────────┐ ┌─────────┐ │Factory1 │ │Factory2 │ └─────────┘ └─────────┘ │ ┌─────────┐ │ ┌─────────┐ ─ &gt;│ProductA1│ ─ &gt;│ProductA2│ │ └─────────┘ │ └─────────┘ ┌─────────┐ ┌─────────┐ └ ─&gt;│ProductB1│ └ ─&gt;│ProductB2│ └─────────┘ └─────────┘ 这种模式有点类似于多个供应商负责提供一系列类型的产品。我们举个例子： 假设我们希望为用户提供一个Markdown文本转换为HTML和Word的服务，它的接口定义如下： 123456public interface AbstractFactory &#123; // 创建Html文档: HtmlDocument createHtml(String md); // 创建Word文档: WordDocument createWord(String md);&#125; 注意到上面的抽象工厂仅仅是一个接口，没有任何代码。同样的，因为HtmlDocument和WordDocument都比较复杂，现在我们并不知道如何实现它们，所以只有接口： 12345678910// Html文档接口:public interface HtmlDocument &#123; String toHtml(); void save(Path path) throws IOException;&#125;// Word文档接口:public interface WordDocument &#123; void save(Path path) throws IOException;&#125; 这样，我们就定义好了抽象工厂（AbstractFactory）以及两个抽象产品（HtmlDocument和WordDocument）。因为实现它们比较困难，我们决定让供应商来完成。 现在市场上有两家供应商：FastDoc Soft的产品便宜，并且转换速度快，而GoodDoc Soft的产品贵，但转换效果好。我们决定同时使用这两家供应商的产品，以便给免费用户和付费用户提供不同的服务。 我们先看看FastDoc Soft的产品是如何实现的。首先，FastDoc Soft必须要有实际的产品，即FastHtmlDocument和FastWordDocument： 1234567891011121314public class FastHtmlDocument implements HtmlDocument &#123; public String toHtml() &#123; ... &#125; public void save(Path path) throws IOException &#123; ... &#125;&#125;public class FastWordDocument implements WordDocument &#123; public void save(Path path) throws IOException &#123; ... &#125;&#125; 然后，FastDoc Soft必须提供一个实际的工厂来生产这两种产品，即FastFactory： 12345678public class FastFactory implements AbstractFactory &#123; public HtmlDocument createHtml(String md) &#123; return new FastHtmlDocument(md); &#125; public WordDocument createWord(String md) &#123; return new FastWordDocument(md); &#125;&#125; 这样，我们就可以使用FastDoc Soft的服务了。客户端编写代码如下： 12345678// 创建AbstractFactory，实际类型是FastFactory:AbstractFactory factory = new FastFactory();// 生成Html文档:HtmlDocument html = factory.createHtml(\"#Hello\\nHello, world!\");html.save(Paths.get(\".\", \"fast.html\"));// 生成Word文档:WordDocument word = fastFactory.createWord(\"#Hello\\nHello, world!\");word.save(Paths.get(\".\", \"fast.doc\")); 如果我们要同时使用GoodDoc Soft的服务怎么办？因为用了抽象工厂模式，GoodDoc Soft只需要根据我们定义的抽象工厂和抽象产品接口，实现自己的实际工厂和实际产品即可： 123456789101112131415161718// 实际工厂:public class GoodFactory implements AbstractFactory &#123; public HtmlDocument createHtml(String md) &#123; return new GoodHtmlDocument(md); &#125; public WordDocument createWord(String md) &#123; return new GoodWordDocument(md); &#125;&#125;// 实际产品:public class GoodHtmlDocument implements HtmlDocument &#123; ...&#125;public class GoodWordDocument implements HtmlDocument &#123; ...&#125; 客户端要使用GoodDoc Soft的服务，只需要把原来的new FastFactory()切换为new GoodFactory()即可。 注意到客户端代码除了通过new创建了FastFactory或GoodFactory外，其余代码只引用了产品接口，并未引用任何实际产品（例如，FastHtmlDocument），如果把创建工厂的代码放到AbstractFactory中，就可以连实际工厂也屏蔽了： 1234567891011public interface AbstractFactory &#123; public static AbstractFactory createFactory(String name) &#123; if (name.equalsIgnoreCase(\"fast\")) &#123; return new FastFactory(); &#125; else if (name.equalsIgnoreCase(\"good\")) &#123; return new GoodFactory(); &#125; else &#123; throw new IllegalArgumentException(\"Invalid factory name\"); &#125; &#125;&#125;","categories":[],"tags":[{"name":"DesignPatterns","slug":"DesignPatterns","permalink":"http://dqlcr5.coding-pages.com/tags/DesignPatterns/"}]},{"title":"单例模式","slug":"单例模式","date":"2020-06-06T06:05:04.000Z","updated":"2020-06-06T12:58:46.909Z","comments":true,"path":"2020/06/06/单例模式/","link":"","permalink":"http://dqlcr5.coding-pages.com/2020/06/06/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/","excerpt":"单例设计模式所谓类的单例设计模式，就是采用一定的方法保证在整个软件系统中，对某个类只能存在一个对象实例，并且该类只提供一个取得对象实例的方法(静态方法)。","text":"单例设计模式所谓类的单例设计模式，就是采用一定的方法保证在整个软件系统中，对某个类只能存在一个对象实例，并且该类只提供一个取得对象实例的方法(静态方法)。 比如Hibernate的SessionFactory，它充当数据存储源的代理，并负责创建Session 对象。SessionFactory并不是轻量级的，一般情况下，一个项目通常只需要一个 SessionFactory就够，这是就会使用到单例模式。 单例模式有八种方式： 饿汉式(静态常量) 饿汉式（静态代码块） 懒汉式(线程不安全) 懒汉式(线程安全，同步方法) 懒汉式(线程安全，同步代码块) 双重检查 静态内部类 枚举 饿汉式(静态变量) 123456789101112131415161718192021222324/** * @Author: Wizard * @Date: 2020/6/6 14:13 */public class Singleton1 &#123; public static void main(String[] args) &#123; //Test SingleTon instance1 = SingleTon.getInstance(); SingleTon instance2 = SingleTon.getInstance(); System.out.println(instance1==instance2);//true &#125;&#125;//饿汉式(静态变量)class SingleTon1 &#123; //1.构造器私有化, 外部不能new private SingleTon1() &#123; &#125; //2.在本类内部创建对象实例 private final static SingleTon1 instance = new SingleTon1(); //3.提供一个公有的静态方法，返回实例对象 public static SingleTon1 getInstance() &#123; return instance; &#125;&#125; 优缺点： 优点：这种写法比较简单，就是在类装载的时候就完成实例化。避免了线程同 步问题。 缺点：在类装载的时候就完成实例化，没有达到Lazy Loading的效果。如果从始 至终从未使用过这个实例，则会造成内存的浪费 这种方式基于classloder机制避免了多线程的同步问题，不过，instance在类装载 时就实例化，在单例模式中大多数都是调用getInstance方法， 但是导致类装载 的原因有很多种，因此不能确定有其他的方式（或者其他的静态方法）导致类 装载，这时候初始化instance就没有达到 lazy loading的效果 结论：这种单例模式可用，可能造成内存浪费 饿汉式(静态代码块) 1234567891011121314151617181920212223/** * @Author: Wizard * @Date: 2020/6/6 14:13 *///饿汉式(静态代码块)class SingleTon2 &#123; //1.构造器私有化, 外部不能new private SingleTon2() &#123; &#125; //2.在本类内部创建对象实例 private static SingleTon2 instance; static &#123; //在静态代码块中，创建单例对象,静态代码块只执行一次 instance = new SingleTon2(); &#125; //3.提供一个公有的静态方法，返回实例对象 public static SingleTon2 getInstance() &#123; return instance; &#125;&#125; 优缺点和静态变量相同 懒汉式(线程不安全) 1234567891011121314//懒汉式class SingleTon3 &#123; private static SingleTon3 instance; private SingleTon3() &#123; &#125; //提供一个静态的公有方法,当使用到该方法时，才去创建instance public static SingleTon3 getInstance()&#123; if (instance==null)&#123; instance = new SingleTon3(); &#125; return instance; &#125;&#125; 优缺点： 起到了Lazy Loading的效果，但是只能在单线程下使用。 如果在多线程下，一个线程进入了if (singleton == null)判断语句块，还未来得及 往下执行，另一个线程也通过了这个判断语句，这时便会产生多个实例。所以 在多线程环境下不可使用这种方式 结论：在实际开发中，不要使用这种方式. 懒汉式(线程安全，同步方法) 1234567891011121314//懒汉式(线程安全，同步方法)class SingleTon4 &#123; private static SingleTon4 instance; private SingleTon4() &#123; &#125; //提供一个静态的公有方法,加入同步处理的代码，解决线程安全问题 public static synchronized SingleTon4 getInstance()&#123; if (instance==null)&#123; instance = new SingleTon4(); &#125; return instance; &#125;&#125; 优缺点说明： 解决了线程不安全问题 效率太低了，每个线程在想获得类的实例时候，执行getInstance()方法都要进行 同步。而其实这个方法只执行一次实例化代码就够了，后面的想获得该类实例， 直接return就行了。方法进行同步效率太低 结论：在实际开发中，不推荐使用这种方式 懒汉式(线程安全，同步代码块) 123456789101112131415//懒汉式(线程安全，同步代码块)class SingleTon5 &#123; private static SingleTon5 instance; private SingleTon5() &#123; &#125; //提供一个静态的公有方法,加入同步处理的代码，解决线程安全问题 public static SingleTon5 getInstance() &#123; if (instance == null) &#123; synchronized (SingleTon5.class) &#123; instance = new SingleTon5(); &#125; &#125; return instance; &#125;&#125; 优缺点说明： 这种方式，本意是想对第四种实现方式的改进，因为前面同步方法效率太低， 改为同步产生实例化的的代码块 但是这种同步并不能起到线程同步的作用。跟第3种实现方式遇到的情形一 致，假如一个线程进入了if (singleton == null)判断语句块，还未来得及往下执行， 另一个线程也通过了这个判断语句，这时便会产生多个实例 结论：在实际开发中，不能使用这种方式 双重检查 1234567891011121314151617181920//懒汉式(线程安全,双重检查)class SingleTon6 &#123; //必须加volatile关键字的原因：new对象分为3步:1.分配空间 2.初始化对象 3.指向对象内存地址 // 2和3可能被编译器自动重排序,导致判断非空但是实际拿的对象还未完成初始化 private static volatile SingleTon6 instance; private SingleTon6() &#123; &#125; //提供一个静态的公有方法,加入双重检查代码，解决线程安全问题,同时解决懒加载的问题 public static SingleTon6 getInstance() &#123; if (instance == null) &#123; synchronized (SingleTon6.class) &#123; if (instance == null) &#123; instance = new SingleTon6(); &#125; &#125; &#125; return instance; &#125;&#125; 优缺点说明： Double-Check概念是多线程开发中常使用到的，如代码中所示，我们进行了两 次if (singleton == null)检查，这样就可以保证线程安全了。 这样，实例化代码只用执行一次，后面再次访问时，判断if (singleton == null)， 直接return实例化对象，也避免的反复进行方法同步 线程安全；延迟加载；效率较高 结论：在实际开发中，推荐使用这种单例设计模式 静态内部类 12345678910111213141516171819//静态内部类class SingleTon7 &#123; private static volatile SingleTon7 instance; private SingleTon7() &#123; &#125; //写一个静态内部类,该类中有一个静态属性SingleTon7 //静态内部类SingletonInstance在外部类SingleTon7在类装载的时候,并不会马上执行,不会导致静态内部类SingletonInstance马上装载 //在JVM中，类的转载是线程安全的，导致了INSTANCE的初始化是线程安全的 private static class SingletonInstance &#123; private static final SingleTon7 INSTANCE = new SingleTon7(); &#125; public static SingleTon7 getInstance() &#123; //当调用getInstance这个方法时,会去取静态内部类SingletonInstance里的INSTANCE属性,这时会导致SingletonInstance会被装载 return SingletonInstance.INSTANCE; &#125;&#125; 优缺点说明： 这种方式采用了类装载的机制来保证初始化实例时只有一个线程。 静态内部类方式在Singleton类被装载时并不会立即实例化，而是在需要实例化 时，调用getInstance方法，才会装载SingletonInstance类，从而完成Singleton的 实例化。 类的静态属性只会在第一次加载类的时候初始化，所以在这里，JVM帮助我们 保证了线程的安全性，在类进行初始化时，别的线程是无法进入的。 优点：避免了线程不安全，利用静态内部类特点实现延迟加载，效率高 结论：推荐使用. 枚举 123456789101112131415161718192021/** * @Author: Wizard * @Date: 2020/6/6 14:38 */public class Singleton8 &#123; public static void main(String[] args) &#123; Singleton instance = Singleton.INSTANCE; Singleton instance2 = Singleton.INSTANCE; System.out.println(instance == instance2);//true System.out.println(instance.hashCode()); System.out.println(instance2.hashCode()); &#125;&#125;//枚举enum Singleton &#123; INSTANCE; public void ok() &#123; System.out.println(\"ok\"); &#125;&#125; 优缺点说明： 这借助JDK1.5中添加的枚举来实现单例模式。不仅能避免多线程同步问题，而 且还能防止反序列化重新创建新的对象。 这种方式是Effective Java作者Josh Bloch 提倡的方式 结论：推荐使用 单例模式在JDK 应用的源码分析单例模式在JDK 应用的源码分析 JDK中，java.lang.Runtime就是经典的单例模式(饿汉式) 单例模式注意事项和细节说明 单例模式保证了 系统内存中该类只存在一个对象，节省了系统资源，对于一些需 要频繁创建销毁的对象，使用单例模式可以提高系统性能 当想实例化一个单例类的时候，必须要记住使用相应的获取对象的方法，而不是使用new 单例模式使用的场景：需要频繁的进行创建和销毁的对象、创建对象时耗时过多或 耗费资源过多(即：重量级对象)，但又经常用到的对象、工具类对象、频繁访问数 据库或文件的对象(比如数据源、session工厂等)","categories":[],"tags":[{"name":"DesignPatterns","slug":"DesignPatterns","permalink":"http://dqlcr5.coding-pages.com/tags/DesignPatterns/"}]},{"title":"合成复用原则","slug":"合成复用原则","date":"2020-06-05T07:42:54.000Z","updated":"2020-06-06T09:19:06.090Z","comments":true,"path":"2020/06/05/合成复用原则/","link":"","permalink":"http://dqlcr5.coding-pages.com/2020/06/05/%E5%90%88%E6%88%90%E5%A4%8D%E7%94%A8%E5%8E%9F%E5%88%99/","excerpt":"合成复用原则 Composite Resue Principle","text":"合成复用原则 Composite Resue Principle 基本介绍原则是尽量使用合成/聚合的方式，而不是使用继承。 123456不使用继承的方法：使用: 1.依赖(参数传递) 2.聚合(set) 3.组合(new) 设计原则核心思想 找出应用中可能需要变化之处，把他们独立出来，不要和那些不需要变化的代码混在一起。 针对接口编程，而不是针对实现编程 为了交互对象之间的松耦合设计而努力","categories":[],"tags":[{"name":"DesignPatterns","slug":"DesignPatterns","permalink":"http://dqlcr5.coding-pages.com/tags/DesignPatterns/"}]},{"title":"迪米特法则","slug":"迪米特法则","date":"2020-06-05T03:09:31.000Z","updated":"2020-06-06T09:08:03.719Z","comments":true,"path":"2020/06/05/迪米特法则/","link":"","permalink":"http://dqlcr5.coding-pages.com/2020/06/05/%E8%BF%AA%E7%B1%B3%E7%89%B9%E6%B3%95%E5%88%99/","excerpt":"基本介绍 Demeter Principle","text":"基本介绍 Demeter Principle 一个对象应该对其他对象保持最少的了解 类与类关系越密切，耦合度越大 迪米特法则又叫最少知道原则，即一个类对自己依赖的类知道的 越少越好。也就是说，对于被依赖的类不管多么复杂，都尽量将逻辑封装在类的内 部。对外除了提供的public 方法，不对外泄露任何信息 迪米特法则还有个更简单的定义：只与直接的朋友通信 直接的朋友：每个对象都会与其他对象有耦合关系，只要两个对象之间有耦合关系， 我们就说这两个对象之间是朋友关系。耦合的方式很多，依赖，关联，组合，聚合 等。其中，我们称出现成员变量，方法参数，方法返回值中的类为直接的朋友，而 出现在局部变量中的类不是直接的朋友。也就是说，陌生的类最好不要以局部变量 的形式出现在类的内部。 细节： 迪米特法则的核心是降低类之间的耦合 注意：由于每个类都减少了不必要的依赖，因此迪米特法则只是要求降低 类间(对象间)耦合关系， 并不是要求完全没有依赖关系","categories":[],"tags":[{"name":"DesignPatterns","slug":"DesignPatterns","permalink":"http://dqlcr5.coding-pages.com/tags/DesignPatterns/"}]},{"title":"开闭原则","slug":"开闭原则","date":"2020-06-05T01:07:12.000Z","updated":"2020-06-05T01:51:47.697Z","comments":true,"path":"2020/06/05/开闭原则/","link":"","permalink":"http://dqlcr5.coding-pages.com/2020/06/05/%E5%BC%80%E9%97%AD%E5%8E%9F%E5%88%99/","excerpt":"开闭原则 Open Closed Principle 基本介绍","text":"开闭原则 Open Closed Principle 基本介绍 开闭原则是编程中最基础、最重要的设计原则 一个软件实体如类，模块和函数应该对扩展开放，对修改关闭。用抽象构建框架，用实体扩展细节。 当软件需要变化时，尽量通过扩展软件实体的行为来实现变化，而不是通过修改已有的代码来实现变化。 编程中遵循其他原则，以及使用设计模式的目的就是遵循开闭原则。 12345678910111213141516171819202122232425262728293031323334public class Ocp&#123; public status void main(String[] args)&#123; GraphicEditor graphicEditor = new GraphicEditor(); graphicEditor.drawShape(new Rectangle()); &#125;&#125;class GraphicEditor&#123; public void drawShape(Shape shape)&#123; shape.draw(); &#125;&#125;//Shape类，基类abstract class Shape&#123; int m_type; public abstract void draw();//抽象方法&#125;class Rectangle extends Shape&#123; Rectangle()&#123; super.m_type = 1; &#125; @Override public void draw()&#123; System.out.println(\"绘制矩形\") &#125;&#125;class Circle extends Shape&#123; Circle()&#123; super.m_type = 2; &#125; @Override public void draw()&#123; System.out.println(\"绘制圆形\") &#125;&#125;","categories":[],"tags":[{"name":"DesignPatterns","slug":"DesignPatterns","permalink":"http://dqlcr5.coding-pages.com/tags/DesignPatterns/"}]},{"title":"里氏替换原则","slug":"里氏替换原则","date":"2020-06-04T10:13:11.000Z","updated":"2020-06-05T01:52:00.733Z","comments":true,"path":"2020/06/04/里氏替换原则/","link":"","permalink":"http://dqlcr5.coding-pages.com/2020/06/04/%E9%87%8C%E6%B0%8F%E6%9B%BF%E6%8D%A2%E5%8E%9F%E5%88%99/","excerpt":"里氏替换原则 Liskov Substitution Principle 里氏替换原则在1988年，由麻省理工学院的一位姓里的女士提出的。","text":"里氏替换原则 Liskov Substitution Principle 里氏替换原则在1988年，由麻省理工学院的一位姓里的女士提出的。 如果对每个类型为T1的对象o1，都有类型为T2的对象o2，使得以T1定义的所有程序P在所有的对象o1都代换成o2时，程序P的行为没有发生变化，那么类型T2是类型T1的子类型。所有引用基类的地方必须能透明地使用其子类的对象。换句话说，既然抽象出来当作共同的实现方法就不应再具体实现类中重写。 在使用继承时，遵守里氏替换原则，在子类中尽量不要重写父类的方法 里氏替换原则告诉我们，继承实际上让两个类耦合性增强了，在适当的情况下，可以通过聚合，组合，依赖来解决问题。 1234567891011121314151617//A类class A&#123; //返回两个数的差 public in func1(int num1,int num2)&#123; return num1 - num2; &#125;&#125;//B类继承了A类class B extends A&#123; // ↓重写了A的方法 public int func1(int a,int b)&#123; return a + b; &#125; public int func2(int a,int b)&#123; return func1(a,b)+9; &#125;&#125; 改进： 12345678910111213141516171819202122232425262728class Base&#123; //把更加基础的方法和成员写到Base类&#125;//A类class A extends Base&#123; //返回两个数的差 public in func1(int num1,int num2)&#123; return num1 - num2; &#125;&#125;//B类继承了A类class B extends Base&#123; //如果B需要使用A类的方法，使用组合关系 private A a = new A(); // ↓重写了A的方法 public int func1(int a,int b)&#123; return a + b; &#125; public int func2(int a,int b)&#123; return func1(a,b)+9; &#125; //使用A的方法 public int func3(int a,int b)&#123; return this.a.func1(a,b); &#125;&#125;","categories":[],"tags":[{"name":"DesignPatterns","slug":"DesignPatterns","permalink":"http://dqlcr5.coding-pages.com/tags/DesignPatterns/"}]},{"title":"依赖倒转原则","slug":"依赖倒转原则","date":"2020-06-03T12:29:20.000Z","updated":"2020-06-04T01:38:21.708Z","comments":true,"path":"2020/06/03/依赖倒转原则/","link":"","permalink":"http://dqlcr5.coding-pages.com/2020/06/03/%E4%BE%9D%E8%B5%96%E5%80%92%E8%BD%AC%E5%8E%9F%E5%88%99/","excerpt":"依赖倒转原则 Dependence Inversion Priciple","text":"依赖倒转原则 Dependence Inversion Priciple 基本介绍 高层模块不应该依赖低层模块，二者都应该依赖其抽象 抽象不应该依赖细节，细节应该依赖抽象 依赖倒转的中心思想是面向接口编程 依赖倒转原则是基于这样的设计理念：相对于细节的多变性，抽象的东西要稳定的多。以抽象为基础搭建的架构比细节为基础的架构要稳定的多。在java中，抽象指的是接口或抽象类，细节就是具体的实现类 使用接口或抽象类的目的是制定好规范，而不涉及任何具体的操作，把展现细节的任务交给他们的实现类去完成 细节 低层模块尽量都要有抽象类或接口，或者两者都有，程序稳定性更好 变量的声明类型尽量是抽象类或接口，这样我们的变量引用和实际对象间，就存在一个缓冲层。利于程序扩展和优化 继承时遵循里氏替换原则 1通过接口传递实现依赖123456789101112131415161718192021interface IOpenAndClose&#123; //抽象方法 public void open(ITV tv);&#125;interface ITV&#123; //ITV接口 public void play();&#125;class Htc implements ITV&#123; @Override public void play() &#123; System.out.println(\"htc电视机，打开\"); &#125;&#125;//实现接口class OpenAndClose implements IOpenAndClose&#123; public void open(ITV tv)&#123; tv.play(); &#125;&#125; 2.通过构造方法依赖传递1234567891011121314151617181920212223242526interface IOpenAndClose&#123; //抽象方法 public void open(ITV tv);&#125;interface ITV&#123; //ITV接口 public void play();&#125;class Htc implements ITV&#123; @Override public void play() &#123; System.out.println(\"htc电视机，打开\"); &#125;&#125;//实现接口class OpenAndClose implements IOpenAndClose&#123; public ITV tv; public OpenAndClose(ITV tv)&#123; //构造器 this.tv = tv; &#125; public void open()&#123; tv.play(); &#125;&#125; 3.通过setter方法传递123456789101112131415161718192021222324252627interface IOpenAndClose&#123; //抽象方法 public void open(ITV tv); public void name(ITV tv);&#125;interface ITV&#123; //ITV接口 public void play();&#125;class Htc implements ITV&#123; @Override public void play() &#123; System.out.println(\"htc电视机，打开\"); &#125;&#125;//实现接口class OpenAndClose implements IOpenAndClose&#123; public ITV tv; public setTv(ITV tv)&#123; //构造器 this.tv = tv; &#125; public void open()&#123; tv.play(); &#125;&#125;","categories":[],"tags":[{"name":"DesignPatterns","slug":"DesignPatterns","permalink":"http://dqlcr5.coding-pages.com/tags/DesignPatterns/"}]},{"title":"接口隔离原则","slug":"接口隔离原则","date":"2020-06-03T09:56:04.000Z","updated":"2020-06-04T01:39:09.487Z","comments":true,"path":"2020/06/03/接口隔离原则/","link":"","permalink":"http://dqlcr5.coding-pages.com/2020/06/03/%E6%8E%A5%E5%8F%A3%E9%9A%94%E7%A6%BB%E5%8E%9F%E5%88%99/","excerpt":"接口隔离原则 Interface Segregation Principle","text":"接口隔离原则 Interface Segregation Principle 基本介绍 客户端不应该依赖它不需要的接口，即一个类对另一个类的依赖应该建立在最小的接口上。 类A通过接口Interface依赖类D，类C通过接口Interface依赖类D，如果接口Interface对于类A和来说不是最小接口那么类B和类D必须去实现他们不需要的方法。 按隔离原则应当这样处理： 将接口Interface拆分为独立的几个接口，类A和类C分别与他们需要的接口建立依赖关系。也就是采用接口隔离原则。","categories":[],"tags":[{"name":"DesignPatterns","slug":"DesignPatterns","permalink":"http://dqlcr5.coding-pages.com/tags/DesignPatterns/"}]},{"title":"单一职责原则","slug":"单一职责原则","date":"2020-06-03T08:57:48.000Z","updated":"2020-06-05T03:16:28.003Z","comments":true,"path":"2020/06/03/单一职责原则/","link":"","permalink":"http://dqlcr5.coding-pages.com/2020/06/03/%E5%8D%95%E4%B8%80%E8%81%8C%E8%B4%A3%E5%8E%9F%E5%88%99/","excerpt":"单一职责原则","text":"单一职责原则 基本介绍 对类来说，即一个类应该只负责一个原则。如果A负责两个不同的原则：职责1，职责2。当职责1需求变更而改变A时，可能导致职责2执行错误。所以需要将类A的粒度分解为A1，A2 细节 降低类的复杂度，一个类只负责一项职责。 降低类的可读性，可维护性。 降低变更引起的风险。 通常情况下，我们应当遵守单一职责原则，只有逻辑足够简单，才可以在代码级违反单一职责原则；只有类中方法数量足够少，可以在方法级别保持单一原则。","categories":[],"tags":[{"name":"DesignPatterns","slug":"DesignPatterns","permalink":"http://dqlcr5.coding-pages.com/tags/DesignPatterns/"}]},{"title":"XSS跨站脚本攻击","slug":"XSS跨站脚本攻击","date":"2020-05-31T12:58:53.000Z","updated":"2020-05-31T13:24:08.307Z","comments":true,"path":"2020/05/31/XSS跨站脚本攻击/","link":"","permalink":"http://dqlcr5.coding-pages.com/2020/05/31/XSS%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB/","excerpt":"XSS跨站脚本攻击在做社区项目的时候，发现了一个XSS漏洞。","text":"XSS跨站脚本攻击在做社区项目的时候，发现了一个XSS漏洞。 什么是XSS跨站脚本攻击？ XSS攻击全称跨站脚本攻击，是一种在web应用中的计算机安全漏洞，它允许恶意web用户将代码植入到提供给其它用户使用的页面中。 在点击回复二级评论时，JavaScript脚本会注入页面: 示例： 然后客户端就调用脚本alert导致无限弹窗。 还可以使用 1&lt;script&gt;alert(document.cookie)&lt;/script&gt; 获取页面cookie，比如登录的token。 解决办法： Jsoup使用标签白名单的机制用来进行防止XSS攻击 参考： [XSS跨站脚本攻击]","categories":[],"tags":[{"name":"safe","slug":"safe","permalink":"http://dqlcr5.coding-pages.com/tags/safe/"}]},{"title":"SQL注入式攻击","slug":"SQL注入式攻击","date":"2020-05-30T13:13:52.000Z","updated":"2020-05-31T13:11:37.890Z","comments":true,"path":"2020/05/30/SQL注入式攻击/","link":"","permalink":"http://dqlcr5.coding-pages.com/2020/05/30/SQL%E6%B3%A8%E5%85%A5%E5%BC%8F%E6%94%BB%E5%87%BB/","excerpt":"SQL注入式攻击 攻击者把SQL命令插入到Web表单的输入域或页面请求的查询字符串，欺骗服务器执行恶意的SQL命令。在某些表单中，用户输入的内容直接用来构造（或者影响）动态SQL命令，或作为存储过程的输入参数，这类表单特别容易受到SQL注入式攻击。","text":"SQL注入式攻击 攻击者把SQL命令插入到Web表单的输入域或页面请求的查询字符串，欺骗服务器执行恶意的SQL命令。在某些表单中，用户输入的内容直接用来构造（或者影响）动态SQL命令，或作为存储过程的输入参数，这类表单特别容易受到SQL注入式攻击。 常见的SQL注入式攻击主要是利用Statement的缺陷，服务端验证： 12345678910111213141516171819@Override public void login(Account account) throws SQLException &#123; String sql = \"insert into account values(null,\" + account.userName + \",\" + account.password + \")\"; try (Connection conn = DriverManager.getConnection(\"jdbc:mysql://127.0.0.1:3306/account?characterEncoding=UTF-8\", \"root\", \"password\")) &#123; try (Statement stmt = conn.createStatement()) &#123; try (ResultSet rs = stmt.executeQuery(\"SELECT id, grade, name, gender FROM students WHERE gender=1\")) &#123; while (rs.next()) &#123; int id = rs.getInt(1); String username = rs.getString(2); String password = rs.getString(3); &#125; &#125; &#125; &#125; &#125; 客户端 1234567891011121314151617181920212223242526&lt;link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/bootstrap@3.3.7/dist/css/bootstrap.min.css\" integrity=\"sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u\" crossorigin=\"anonymous\"&gt;&lt;link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/bootstrap@3.3.7/dist/css/bootstrap-theme.min.css\" integrity=\"sha384-rHyoN1iRsVXV4nD0JutlnGaslCJuC7uwjduW9SVrLvRYooPp2bWYgmgJQIXwl/Sp\" crossorigin=\"anonymous\"&gt;&lt;script src=\"https://cdn.jsdelivr.net/npm/bootstrap@3.3.7/dist/js/bootstrap.min.js\" integrity=\"sha384-Tc5IQib027qvyjSMfHjOMaLkfuWVxZxUPnCJA7l2mCWNIpG9mGCD8wGNIcPD7Txa\" crossorigin=\"anonymous\"&gt;&lt;/script&gt;&lt;div class=\"col-xs-8 col-sm-8 col-md-8 jumbotron\"&gt; &lt;form&gt; &lt;div class=\"form-group\"&gt; &lt;label for=\"exampleInputEmail1\"&gt;Username&lt;/label&gt; &lt;input type=\"email\" class=\"form-control\" id=\"exampleInputEmail1\" placeholder=\"Email\"&gt; &lt;/div&gt; &lt;div class=\"form-group\"&gt; &lt;label for=\"exampleInputPassword1\"&gt;Password&lt;/label&gt; &lt;input type=\"password\" class=\"form-control\" id=\"exampleInputPassword1\" placeholder=\"Password\"&gt; &lt;/div&gt; &lt;div class=\"form-group\"&gt; &lt;label for=\"exampleInputFile\"&gt;File input&lt;/label&gt; &lt;input type=\"file\" id=\"exampleInputFile\"&gt; &lt;p class=\"help-block\"&gt;Example block-level help text here.&lt;/p&gt; &lt;/div&gt; &lt;div class=\"checkbox\"&gt; &lt;label&gt; &lt;input type=\"checkbox\"&gt; Check me out &lt;/label&gt; &lt;/div&gt; &lt;button type=\"submit\" class=\"btn btn-default\"&gt;Submit&lt;/button&gt; &lt;/form&gt;&lt;/div&gt; 如果是客户端精心构造的字符串，例如 12name = \"kayleh' OR pass=\", pass = \" OR pass='\"' or 1= ' 1 命令行永远为真，导致注入成功。 所以使用JDBC时，尽量使用速度比较快且安全的 PreparedStatement ，PreparedStatement 使用的是预编译机制。","categories":[],"tags":[{"name":"safe","slug":"safe","permalink":"http://dqlcr5.coding-pages.com/tags/safe/"}]},{"title":"01面试题","slug":"01面试题","date":"2020-05-23T12:45:07.000Z","updated":"2020-05-31T12:59:24.457Z","comments":true,"path":"2020/05/23/01面试题/","link":"","permalink":"http://dqlcr5.coding-pages.com/2020/05/23/01%E9%9D%A2%E8%AF%95%E9%A2%98/","excerpt":"面试题(updateing)","text":"面试题(updateing) ArrayList和LinkedList的区别？(链表和数组的优缺点) ArrayList是一个动态的数组结构，而LinkedList是双向链表结构；存取数据的时候，ArrayList更适合按位随机存取，而LinkedList更适合顺序读存取；插入\\删除数据时，ArrayList的开销比LinkedList更大，因为对于ArrayList插入\\删除一个数据时，需要移动其后的所有数据。而LinkedList只需要修改几个指针。 HashMap的本质仍然是数组，不过数据中储存的不是数据，而是一个链表的头节点。所有准确的说，其实就是链表数组。HashMap保存的是一个键值对，插入对象必须提供一个键对象；查找对象的时候必须给定一个键对象(因此必须记住键)，键对象是不允许重复的，但是允许null空键的存在。 HashMap插入对象时，根据给定的键key计算hashcode，然后再与数组长度进行求余运算得到数据下标。然后与该位置上的链表中已存储的键进行比较，对于以存在的键，则覆盖；对于不存在的键，添加至链表尾。","categories":[],"tags":[]},{"title":"维护2","slug":"维护2","date":"2020-05-21T11:12:06.000Z","updated":"2020-06-08T08:10:38.140Z","comments":true,"path":"2020/05/21/维护2/","link":"","permalink":"http://dqlcr5.coding-pages.com/2020/05/21/%E7%BB%B4%E6%8A%A42/","excerpt":"","text":"维护2fixed 12 bugs. 1 网站成功双线部署GitHub、Coding 境外： https://kayleh.github.io/ 境内访问： http://dqlcr5.coding-pages.com/ 2 完善标签tags功能 3 完善搜索功能 4 修复3处页面重定向","categories":[],"tags":[{"name":"maintain","slug":"maintain","permalink":"http://dqlcr5.coding-pages.com/tags/maintain/"}]},{"title":"二叉排序树","slug":"二叉排序树","date":"2020-05-20T12:42:23.000Z","updated":"2020-06-08T06:27:32.073Z","comments":true,"path":"2020/05/20/二叉排序树/","link":"","permalink":"http://dqlcr5.coding-pages.com/2020/05/20/%E4%BA%8C%E5%8F%89%E6%8E%92%E5%BA%8F%E6%A0%91/","excerpt":"二叉排序树二叉排序树：BST: (Binary Sort(Search) Tree), 对于二叉排序树的任何一个非叶子节点，要求左子节点的值比当前节点的值小，右子节点的值比当前节点的值大。 如果有相同的值，可以将该节点放在左子节点或右子节点","text":"二叉排序树二叉排序树：BST: (Binary Sort(Search) Tree), 对于二叉排序树的任何一个非叶子节点，要求左子节点的值比当前节点的值小，右子节点的值比当前节点的值大。 如果有相同的值，可以将该节点放在左子节点或右子节点 ​ 数据 (7, 3, 10, 12, 5, 1, 9) ，对应的二叉排序树为 ​ ​ ↓ ​ 二叉排序树的删除情况比较复杂，有下面三种情况需要考虑 1)删除叶子节点 (比如：2, 5, 9, 12) 2)删除只有一颗子树的节点 (比如：1) 3)删除有两颗子树的节点. (比如：7, 3，10 ) 1234567891011121314151617181920212223242526272829303132333435第一种情况:删除叶子节点 (比如：2, 5, 9, 12)思路(1) 需求先去找到要删除的结点 targetNode(2) 找到targetNode 的 父结点 parent (3) 确定 targetNode 是 parent的左子结点 还是右子结点(4) 根据前面的情况来对应删除左子结点 parent.left = null右子结点 parent.right = null;第二种情况: 删除只有一颗子树的节点 比如 1思路(1) 需求先去找到要删除的结点 targetNode(2) 找到targetNode 的 父结点 parent (3) 确定targetNode 的子结点是左子结点还是右子结点(4) targetNode 是 parent 的左子结点还是右子结点(5) 如果targetNode 有左子结点5. 1 如果 targetNode 是 parent 的左子结点parent.left = targetNode.left;5.2 如果 targetNode 是 parent 的右子结点parent.right = targetNode.left;(6) 如果targetNode 有右子结点6.1 如果 targetNode 是 parent 的左子结点parent.left = targetNode.right;6.2 如果 targetNode 是 parent 的右子结点parent.right = targetNode.right情况三 ： 删除有两颗子树的节点. (比如：7, 3，10 )思路(1) 需求先去找到要删除的结点 targetNode(2) 找到targetNode 的 父结点 parent (3) 从targetNode 的右子树找到最小的结点(4) 用一个临时变量，将 最小结点的值保存 temp = 11(5) 删除该最小结点(6) targetNode.value = temp 代码实现package binarysorttree;/** * @Author: Wizard * @Date: 2020/5/20 11:42 */public class BinarySortTreeDemo &#123; public static void main(String[] args) &#123;// int[] arr = &#123;7, 3, 10, 12, 5, 1, 9&#125;; int[] arr = &#123;7,3&#125;; BinarySortTree binarySortTree = new BinarySortTree(); for (int i = 0; i &lt; arr.length; i++) &#123; binarySortTree.add(new Node(arr[i])); &#125; binarySortTree.infixOrder(); binarySortTree.delNode(7); System.out.println(\"删除后\"); binarySortTree.infixOrder(); &#125;&#125;//创建二叉排序树class BinarySortTree &#123; private Node root; //查找要删除的结点 public Node search(int value) &#123; if (root == null) &#123; return null; &#125; else &#123; return root.search(value); &#125; &#125; //查找父结点 public Node searchParent(int value) &#123; if (root == null) &#123; return null; &#125; else &#123; return root.searchParent(value); &#125; &#125; /** * 右边找最小的 * 左边找最大的 * * 返回的 以node为根结点的最小结点的值 * 删除以node为根结点的最小结点的值 * * @param node 传入的结点（当做二叉排序树的根结点） * @return 返回的 以node为根结点的最小结点的值 */ public int delRightTreeMin(Node node) &#123; Node target = node; //循环的查找左子节点，就会找到最小值 while (target.left != null) &#123; target = target.left; &#125; //这是target就指向了最小结点 //删除最小结点 delNode(target.value); return target.value; &#125; //删除结点 public void delNode(int value) &#123; if (root == null) &#123; return; &#125; else &#123; //需要先去找到要删除的结点 targetNode Node targetNode = search(value); //如果没有找到要删除的结点 if (targetNode == null) &#123; return; &#125; //如果发现targetNode没有父结点（就是根结点）(只有一个结点) if (root.left == null &amp;&amp; root.right == null) &#123; root = null; return; &#125; //去找到targetNode的父结点 Node parent = searchParent(value); //如果要删除的结点是叶子结点 if (targetNode.left == null &amp;&amp; targetNode.right == null) &#123; //判断targetNode是父结点的左子结点还是右子结点 if (parent.left != null &amp;&amp; parent.left.value == value) &#123; parent.left = null; &#125; else if (parent.right != null &amp;&amp; parent.right.value == value) &#123; parent.right = null; &#125; &#125; else if (targetNode.left != null &amp;&amp; targetNode.right != null) &#123; //删除有两颗子树的结点 int min = delRightTreeMin(targetNode.right);//target右边最小的值 targetNode.value = min; &#125; else &#123; //删除只有一颗子树的结点 //如果要删除的结点有左子结点// System.out.println(parent); if (parent!=null) &#123; if (targetNode.left != null) &#123; //如果targetNode是parent的左子结点 if (parent.left.value == value) &#123; parent.left = targetNode.left; &#125; else &#123; //如果targetNode是parent的右子结点 parent.right = targetNode.left; &#125; &#125; else &#123; //如果要删除的结点有右子结点 if (parent.left.value == value) &#123; //如果targetNode是parent的左子结点 parent.left = targetNode.right; &#125; else &#123; //如果targetNode是parent的右子结点 parent.right = targetNode.right; &#125; &#125; &#125;else &#123; if (root.left!=null)&#123; root = root.left; &#125;else &#123; root = root.right; &#125; &#125; &#125; &#125; &#125; //添加结点的方法 public void add(Node node) &#123; if (root == null) &#123; root = node; &#125; else &#123; root.add(node); &#125; &#125; //中序遍历方法 public void infixOrder() &#123; if (root != null) &#123; root.infixOrder(); &#125; else &#123; System.out.println(\"当前二叉排序树为空，不能遍历\"); &#125; &#125;&#125;//创建Node结点class Node &#123; int value; Node left; Node right; @Override public String toString() &#123; return \"Node&#123;\" + \"value=\" + value + '&#125;'; &#125; /** * 查找要删除的结点 * * @param value 希望删除的结点的值 * @return 如果找到返回该结点，否则返回null */ public Node search(int value) &#123; if (value == this.value) &#123; //找到就是该结点 return this; &#125; else if (value &lt; this.value) &#123; //如果查找的值小于当前结点，向左子树递归查找 //如果左子结点为空 if (this.left == null) &#123; return null; &#125; return this.left.search(value); &#125; else &#123; //如果查找的值不小于当前结点，向右子树递归查找 if (this.right == null) &#123; return null; &#125; return this.right.search(value); &#125; &#125; /** * 查找要删除结点的父结点 * * @param value 要找到结点的值 * @return 返回的是要删除的结点的父结点，如果没有就返回null */ public Node searchParent(int value) &#123; //如果当前结点就是要删除的结点的父结点，就返回 if ((this.left != null &amp;&amp; this.left.value == value) || (this.right != null &amp;&amp; this.right.value == value)) &#123; return this; &#125; else &#123; //如果查找的值小于当前结点的值，并且当前结点的左子结点不为空 if (value &lt; this.value &amp;&amp; this.left != null) &#123; return this.left.search(value);//向左子树递归查找 &#125; else if (value &gt;= this.value &amp;&amp; this.right != null) &#123; return this.right.search(value);//向右子树递归查找 &#125; else &#123; return null;//没有找到父结点 &#125; &#125; &#125; public Node(int value) &#123; this.value = value; &#125; //添加结点的方式 //递归的形式添加结点，需要满足二叉排序树的要求 public void add(Node node) &#123; if (node == null) &#123; return; &#125; //判断传入的结点的值，和当前子树的根结点的值的关系 if (node.value &lt; this.value) &#123; //如果当前结点的左子结点为null if (this.left == null) &#123; //把结点挂在左子结点 this.left = node; &#125; else &#123; //如果左子结点不为空，向左子树递归添加 this.left.add(node); &#125; &#125; else &#123; //如果 添加的结点的值 大于 根结点的值 if (this.right == null) &#123; this.right = node; &#125; else &#123; this.right.add(node); &#125; &#125; &#125; //中序遍历 public void infixOrder() &#123; if (this.left != null) &#123; this.left.infixOrder(); &#125; System.out.println(this); if (this.right != null) &#123; this.right.infixOrder(); &#125; &#125;&#125;","categories":[],"tags":[{"name":"dataAlgorithm","slug":"dataAlgorithm","permalink":"http://dqlcr5.coding-pages.com/tags/dataAlgorithm/"}]},{"title":"堆排序","slug":"堆排序","date":"2020-05-18T12:40:11.000Z","updated":"2020-06-06T09:12:14.625Z","comments":true,"path":"2020/05/18/堆排序/","link":"","permalink":"http://dqlcr5.coding-pages.com/2020/05/18/%E5%A0%86%E6%8E%92%E5%BA%8F/","excerpt":"堆排序1.堆排序是利用堆这种数据结构而设计的一种算法，堆排序是一种选择排序，它的最坏，最好，平均复杂度均为O(nlogn)，它也是不稳定的排序。","text":"堆排序1.堆排序是利用堆这种数据结构而设计的一种算法，堆排序是一种选择排序，它的最坏，最好，平均复杂度均为O(nlogn)，它也是不稳定的排序。 2.堆是具有以下性质的完全二叉树：每个结点的值都大于或等于其左右孩子结点的值，称为大顶堆。没有要求结点的左孩子的值和右孩子的值大小关系。 3.每个结点的值都小于或等于其左右孩子结点的值，称为小顶堆 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687package sort;import java.util.Arrays;/** * @Author: Wizard * @Date: 2020/5/18 21:16 */public class heapSort &#123; public static void main(String[] args) &#123; //要求将数组进行升序排列 &#125; //编写一个堆排序的方法 public static void heapSort(int arr[]) &#123; int temp = 0; System.out.println(\"堆排序！\"); // i 第一个非叶子结点 // 这里的目的是把最大的数交换到堆顶，成为一个大顶堆结构 for (int i = arr.length / 2 - 1; i &gt;= 0; i--) &#123; adjustHeap(arr, i, arr.length); System.out.println(Arrays.toString(arr)); &#125; /* 将堆顶元素于末尾元素交换，将最大元素“沉”到数组末端 重新调整结构，使其满足堆定义，然后继续交换堆顶元素与当前末尾元素，反复执行调整+交换步骤，直到整个序列有序 */ //一共5个数，调整4个数就可以了 for (int j = arr.length - 1; j &gt; 0; j--) &#123; temp = arr[j]; arr[j] = arr[0];//arr[0] 是上面调整后的最大值 arr[0] = temp; adjustHeap(arr, 0, j); System.out.println(\"第\"+(arr.length-j)+\"次沉\"+Arrays.toString(arr)); &#125; System.out.println(Arrays.toString(arr)); //每次遍历把最大的数（在调整之后的父节点，第一位）沉到数组的末端 //然后 再调整 把最大的数交换到堆顶（adjustHeap），再沉到数组的末端的位置-1，随着j的递减，末尾的前几个数字逐渐确定（调整的范围减少） &#125; //将一个数组(二叉树),调整为一个大顶堆 /** * 功能：完成将以 i 对应的非叶子结点的树调整为大顶堆 * int arr[] = &#123;4,6,8,5,9&#125;; → i = 1 → adjustHeap → 得到&#123;4,9,8,5,6&#125; * 再次调用adjustHeap 传入的是 i= 0 → 得到&#123;9,6,8,5,4&#125; * * @param arr 待调整的数组 * @param i 表示非叶子结点在数组中的索引 * @param lenght 表示归多少个元素继续调整，length 是在逐渐的减少 */ public static void adjustHeap(int arr[], int i, int lenght) &#123; int temp = arr[i];//取出当前元素的值，保存在临时变量， 以 i 作为父节点（局部） //开始调整 //k = i对应的左子节点 for (int k = 2 * i + 1; k &lt; lenght; k = 2 * i + 1) &#123; if (k + 1 &lt; lenght &amp;&amp; arr[k] &lt; arr[k + 1]) &#123; //说明左子节点的值小于右子节点 k++;//让 k 指向右子节点 &#125; if (arr[k] &gt; temp) &#123; //如果子节点大于父节点 //就把较大的值赋值给当前节点 arr[i] = arr[k]; // ! i指向k 继续循环比较 i = k; //把i（父节点）指向 k（子节点）。作为父节点继续循环 &#125; else &#123; //如果子节点小于父节点 //堆排序是从左至右，从下至上 break; &#125; &#125; //当for循环结束后，已经将以i为父节点的树的最大值，放在了最顶（局部） arr[i] = temp;//将temp值放到调整后的位置 //adjustHeap()方法中依然要循环, 是因为最后在堆排序的时候是从下到上的, 排序中向上调用这个方法时 , i也会往上走, 这时再次调用adjustHeapt //这时再次调用adjustHeap方法时, i就不是最后一个非叶子节点了, 会破坏原先已经排序好的大顶堆, 所以需要循环往下将被破坏的大顶堆重新建立起来 &#125;&#125;","categories":[],"tags":[{"name":"dataAlgorithm","slug":"dataAlgorithm","permalink":"http://dqlcr5.coding-pages.com/tags/dataAlgorithm/"}]},{"title":"7种排序算法","slug":"7种排序算法","date":"2020-05-17T13:42:21.000Z","updated":"2020-06-06T09:11:55.558Z","comments":true,"path":"2020/05/17/7种排序算法/","link":"","permalink":"http://dqlcr5.coding-pages.com/2020/05/17/7%E7%A7%8D%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/","excerpt":"冒泡排序 冒泡排序（BubbleSorting)的基本思想是：通过对待排序序列从前向后（从下标较小的元素开始）,依次比较相邻元素的值，若发现逆序则交换，使值较大的元素逐渐从前移向后部。","text":"冒泡排序 冒泡排序（BubbleSorting)的基本思想是：通过对待排序序列从前向后（从下标较小的元素开始）,依次比较相邻元素的值，若发现逆序则交换，使值较大的元素逐渐从前移向后部。 代码实现 1234567891011121314151617181920212223242526// 将前面的冒泡排序算法，封装成一个方法 public static void bubbleSort(int[] arr) &#123; // 冒泡排序 的时间复杂度 O(n^2), 自己写出 int temp = 0; // 临时变量 boolean flag = false; // 标识变量，表示是否进行过交换 for (int i = 0; i &lt; arr.length - 1; i++) &#123; for (int j = 0; j &lt; arr.length - 1 - i; j++) &#123; // 如果前面的数比后面的数大，则交换 if (arr[j] &gt; arr[j + 1]) &#123; flag = true; temp = arr[j]; arr[j] = arr[j + 1]; arr[j + 1] = temp; &#125; &#125; //System.out.println(\"第\" + (i + 1) + \"趟排序后的数组\"); //System.out.println(Arrays.toString(arr)); if (!flag) &#123; // 在一趟排序中，一次交换都没有发生过 break; &#125; else &#123; flag = false; // 重置flag!!!, 进行下次判断 &#125; &#125; 插入排序 插入排序（insertSorting) 基本思想是：把n个待排序的元素看成为一个有序表和一个无序表，开始时有序表中只包含一个元素，无序表中包含有n-1个元素，排序过程中每次从无序表中取出第一个元素，把它的排序码依次与有序表元素的排序码进行比较，将它插入到有序表中的适当位置，使之成为新的有序表。 代码实现 1234567891011121314151617181920212223public static void insertSort(int attr[]) &#123; //从第2个数开始遍历 【1】 for (int i = 1; i &lt; attr.length - 1; i++) &#123; // 等待插入的数的前一个数下标 int insertIndex = i - 1; //等待插入的数的值 int insertValue = attr[i]; // insertIndex不能越界 // insertValue待插入到前面有序列表的数 // insertValue待插入的数 小于 前1个数 while (insertIndex &gt;= 0 &amp;&amp; attr[insertIndex] &gt; insertValue) &#123; // 交换 // attr[insertIndex]后移 attr[insertIndex + 1] = attr[insertIndex]; insertIndex--; &#125; //当退出while循环时，说明插入的位置找到, insertIndex + 1 if (insertIndex + 1 != i) &#123; attr[insertIndex + 1] = insertValue; &#125; &#125; &#125; 选择排序 选择排序（selectSorting)的基本思想是： 第一次从arr[0]arr[n-1]中选取最小值，与arr[0]交换，第二次从arr[1]arr[n-1]中选取最小值，与arr[1]交换，第三次从arr[2]arr[n-1]中选取最小值，与arr[2]交换，…，第i次从arr[i-1]arr[n-1]中选取最小值，与arr[i-1]交换，…,第n-1次从arr[n-2]~arr[n-1]中选取最小值，与arr[n-2]交换，总共通过n-1次，得到一个按排序码从小到大排列的有序序列。 代码实现 123456789101112131415161718192021222324public class selectSort &#123; public static void selectSort(int attr[]) &#123; for (int i = 0; i &lt; attr.length - 1; i++) &#123; //假设第一个数就是最小值 int minindex = 0; int min = attr[0]; //从1开始遍历 for (int j = 1; j &lt; attr.length - 1; j++) &#123; //如果第0个数（最小值）比第1个数 大 //说明假设的第0个并不是最小值 if (min &gt; attr[j]) &#123; min = attr[j];//重置最小值 minindex = j;//重置最小值索引 &#125; &#125; //如果最小值的索引不是0，就发生交换 if (minindex != i) &#123; //把第0个数（不是最小值）赋值到 第1个数（较小值）的位置 attr[minindex] = attr[i]; //把较小值赋值给第1个数 attr[i] = min; &#125; &#125; &#125; 希尔排序 冒泡排序（BubbleSorting)的基本思想是： 把记录按下标的一定增量分组，对每组使用直接插入排序算法排序；随着增量逐渐减少，每组包含的关键词越来越多，当增量减至1时，整个文件恰被分成一组，算法便终止 代码实现 12345678910111213141516171819202122//移动法 //增量gap，并逐步的缩小增量 for (int gap = attr.length/2;gap&gt;0;gap/=2)&#123; //从第gap个元素开始，逐个对其所在的组进行直接插入排序 for (int i =gap;i&lt;attr.length;i++)&#123; // 当前位置 int j = i; //当前位置的值赋值给temp int temp = attr[j]; // 如果 当前组的gap个步长前面的数大于当前位置的数 if(attr[j]&lt;attr[j-gap])&#123; while (j-gap &gt;= 0 &amp;&amp; temp &lt; attr[j-gap])&#123; //移动 attr[j] = attr[j-gap]; j -= gap; &#125; //当退出while循环后，就给temp找到插入的位置 attr[j] = temp; &#125; &#125; &#125; 快速排序 快速排序（QuickSorting) 是对冒泡排序的一种改进。基本思想是：通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有数据都比另外一部分的所有数据都要小，然后再按此方法对这两部分数据分别进行快速排序，整个排序过程可以递归进行，以此达到整个数据变成有序序列 代码实现 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051public static void quickSort(int[] arr,int left, int right) &#123; int l = left; //左下标 int r = right; //右下标 //pivot 中轴值 int pivot = arr[(left + right) / 2]; int temp = 0; //临时变量，作为交换时使用 //while循环的目的是让比pivot 值小放到左边 //比pivot 值大放到右边 while( l &lt; r) &#123; //在pivot的左边一直找,找到大于等于pivot值,才退出 while( arr[l] &lt; pivot) &#123; l += 1; &#125; //在pivot的右边一直找,找到小于等于pivot值,才退出 while(arr[r] &gt; pivot) &#123; r -= 1; &#125; //如果l &gt;= r说明pivot 的左右两的值，已经按照左边全部是 //小于等于pivot值，右边全部是大于等于pivot值 if( l &gt;= r) &#123; break; &#125; //交换 temp = arr[l]; arr[l] = arr[r]; arr[r] = temp; //如果交换完后，发现这个arr[l] == pivot值 相等 r--， 前移 if(arr[l] == pivot) &#123; r -= 1; &#125; //如果交换完后，发现这个arr[r] == pivot值 相等 l++， 后移 if(arr[r] == pivot) &#123; l += 1; &#125; &#125; // 如果 l == r, 必须l++, r--, 否则为出现栈溢出 if (l == r) &#123; l += 1; r -= 1; &#125; //向左递归 if(left &lt; r) &#123; quickSort(arr, left, r); &#125; //向右递归 if(right &gt; l) &#123; quickSort(arr, l, right); &#125; &#125; 归并排序 归并排序（mergeSorting)的基本思想是： 是利用归并的思想实现的排序方法，该算法采用经典的分治（divide-and-conquer）策略（分治法将问题分(divide)成一些小的问题然后递归求解，而治(conquer)的阶段则将分的阶段得到的各答案”修补”在一起，即分而治之)。 代码实现 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869//分+合方法 public static void mergeSort(int[] arr, int left, int right, int[] temp) &#123; if(left &lt; right) &#123; int mid = (left + right) / 2; //中间索引 //向左递归进行分解 mergeSort(arr, left, mid, temp); //向右递归进行分解 mergeSort(arr, mid + 1, right, temp); //合并 merge(arr, left, mid, right, temp); &#125; &#125; //合并的方法 /** * * @param arr 排序的原始数组 * @param left 左边有序序列的初始索引 * @param mid 中间索引 * @param right 右边索引 * @param temp 做中转的数组 */ public static void merge(int[] arr, int left, int mid, int right, int[] temp) &#123; int i = left; // 初始化i, 左边有序序列的初始索引 int j = mid + 1; //初始化j, 右边有序序列的初始索引 int t = 0; // 指向temp数组的当前索引 //(一) //先把左右两边(有序)的数据按照规则填充到temp数组 //直到左右两边的有序序列，有一边处理完毕为止 while (i &lt;= mid &amp;&amp; j &lt;= right) &#123;//继续 //如果左边的有序序列的当前元素，小于等于右边有序序列的当前元素 //即将左边的当前元素，填充到 temp数组 //然后 t++, i++ if(arr[i] &lt;= arr[j]) &#123; temp[t] = arr[i]; t += 1; i += 1; &#125; else &#123; //反之,将右边有序序列的当前元素，填充到temp数组 temp[t] = arr[j]; t += 1; j += 1; &#125; &#125; //(二) //把有剩余数据的一边的数据依次全部填充到temp while( i &lt;= mid) &#123; //左边的有序序列还有剩余的元素，就全部填充到temp temp[t] = arr[i]; t += 1; i += 1; &#125; while( j &lt;= right) &#123; //右边的有序序列还有剩余的元素，就全部填充到temp temp[t] = arr[j]; t += 1; j += 1; &#125; //(三) //将temp数组的元素拷贝到arr //注意，并不是每次都拷贝所有 t = 0; int tempLeft = left; // //第一次合并 tempLeft = 0 , right = 1 // tempLeft = 2 right = 3 // tL=0 ri=3 //最后一次 tempLeft = 0 right = 7 while(tempLeft &lt;= right) &#123; arr[tempLeft] = temp[t]; t += 1; tempLeft += 1; &#125; &#125; 基数排序 基数排序（mergeSorting)的基本思想是： 将所有待比较数值统一为同样的数位长度，数位较短的数前面补零。然后，从最低位开始，依次进行一次排序。这样从最低位排序一直到最高位排序完成以后, 数列就变成一个有序序列。 代码实现 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758//基数排序方法public static void radixSort(int[] arr) &#123; //根据前面的推导过程，我们可以得到最终的基数排序代码 //1. 得到数组中最大的数的位数 int max = arr[0]; //假设第一数就是最大数 for(int i = 1; i &lt; arr.length; i++) &#123; if (arr[i] &gt; max) &#123; max = arr[i]; &#125; &#125; //得到最大数是几位数 int maxLength = (max + \"\").length(); //定义一个二维数组，表示10个桶, 每个桶就是一个一维数组 //说明 //1. 二维数组包含10个一维数组 //2. 为了防止在放入数的时候，数据溢出，则每个一维数组(桶)，大小定为arr.length //3. 名明确，基数排序是使用空间换时间的经典算法 int[][] bucket = new int[10][arr.length]; //为了记录每个桶中，实际存放了多少个数据,我们定义一个一维数组来记录各个桶的每次放入的数据个数 //可以这里理解 //比如：bucketElementCounts[0] , 记录的就是 bucket[0] 桶的放入数据个数 int[] bucketElementCounts = new int[10]; //这里使用循环将代码处理 for(int i = 0 , n = 1; i &lt; maxLength; i++, n *= 10) &#123; //(针对每个元素的对应位进行排序处理)， 第一次是个位，第二次是十位，第三次是百位.. for(int j = 0; j &lt; arr.length; j++) &#123; //取出每个元素的对应位的值 int digitOfElement = arr[j] / n % 10; //放入到对应的桶中 bucket[digitOfElement][bucketElementCounts[digitOfElement]] = arr[j]; bucketElementCounts[digitOfElement]++; &#125; //按照这个桶的顺序(一维数组的下标依次取出数据，放入原来数组) int index = 0; //遍历每一桶，并将桶中是数据，放入到原数组 for(int k = 0; k &lt; bucketElementCounts.length; k++) &#123; //如果桶中，有数据，我们才放入到原数组 if(bucketElementCounts[k] != 0) &#123; //循环该桶即第k个桶(即第k个一维数组), 放入 for(int l = 0; l &lt; bucketElementCounts[k]; l++) &#123; //取出元素放入到arr arr[index++] = bucket[k][l]; &#125; &#125; //第i+1轮处理后，需要将每个 bucketElementCounts[k] = 0 ！！！！ bucketElementCounts[k] = 0; &#125; &#125;&#125; 各个算法的复杂度","categories":[],"tags":[{"name":"dataAlgorithm","slug":"dataAlgorithm","permalink":"http://dqlcr5.coding-pages.com/tags/dataAlgorithm/"}]},{"title":"计算机组成原理","slug":"计算机组成原理","date":"2020-05-14T14:04:21.000Z","updated":"2020-05-16T11:15:07.455Z","comments":true,"path":"2020/05/14/计算机组成原理/","link":"","permalink":"http://dqlcr5.coding-pages.com/2020/05/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/","excerpt":"计算机组成原理1.第一台电子计算机何时何地诞生？英文全称？1946年2月14日 美国宾夕法尼亚大学","text":"计算机组成原理1.第一台电子计算机何时何地诞生？英文全称？1946年2月14日 美国宾夕法尼亚大学 ENIAC：电子数字积分计算机 Electronic(电子的) Numerical(数字的) Integrator(综合者) And Calculator(计算机) 2.冯·诺依曼型计算机组成,思想?计算机组成: 运算器、控制器、存储器、输入设备、输出设备。 思想： 采用二进制的形式表示数据和指令，将数据和指令事先保存在存储器中，按照顺序执行程序来控制计算机工作运行。 3.现代计算机硬件系统与冯·诺依曼型计算机组成有什么不同？相同点： 现代计算机仍是冯·诺依曼体系结构。 不同点：组成形式改变很大 (1)逻辑元件组装成电路高度集成,把运算、控制器集成到一块CPU芯片上。 (2)存储器分为三级：高速缓冲存储器Cache，主存储器(内存),外部存储器; 其中Cache现在都集成在CPU里,主存由内存条实现,外部存储器主要有机械硬盘,固态硬盘等; (3)输出与输入设备主要有显示屏,鼠标,键盘. 显示器有专门显示接口(集成或独立显卡)连接CPU或主存,键盘和鼠标也通过集成接口CPU. 此外还配置集成网卡和声卡. (4)USB多种连接接口实现网络与多媒体连接.整个系统采用多级总线结构组成. 4.CPU的性能公式,性能指标,如何评价?","categories":[],"tags":[]},{"title":"队列","slug":"队列","date":"2020-05-14T08:52:39.000Z","updated":"2020-06-06T09:12:10.287Z","comments":true,"path":"2020/05/14/队列/","link":"","permalink":"http://dqlcr5.coding-pages.com/2020/05/14/%E9%98%9F%E5%88%97/","excerpt":"队列定义：遵循先进先出，就是队列。可以想象为排队，先排队的人先办理业务。","text":"队列定义：遵循先进先出，就是队列。可以想象为排队，先排队的人先办理业务。 队列是一个有序列表。 遵循先进先出的原则。即：先存入的数据先取出，后存入的数据后取出。 示意：数组模拟： 队列本身是有序列表，如使用数组的结构来存储队列的数据，因为队列的输出、输入是分别从前后端来处理，因此需要两个变量front及rear分别记录队列前后端的下标，front会随着数据输出而改变，而rear则是随着数据输入而改变，其中 maxSize是该队列的最大容量。如图所示。 用稀疏数组代替二维数组，第0行表示稀疏数组的总行，总列和所需内容的个数。 代码实现 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151package queue;import java.util.Scanner;public class CircleArrayQueueDemo &#123; public static void main(String[] args) &#123; //测试 System.out.println(\"测试数组模拟环形队列的案例~~~\"); // 创建一个环形队列 CircleArray queue = new CircleArray(4); //说明设置4, 其队列的有效数据最大是3 char key = ' '; // 接收用户输入 Scanner scanner = new Scanner(System.in);// boolean loop = true; // 输出一个菜单 while (loop) &#123; System.out.println(\"s(show): 显示队列\"); System.out.println(\"e(exit): 退出程序\"); System.out.println(\"a(add): 添加数据到队列\"); System.out.println(\"g(get): 从队列取出数据\"); System.out.println(\"h(head): 查看队列头的数据\"); key = scanner.next().charAt(0);// 接收一个字符 switch (key) &#123; case 's': queue.showQueue(); break; case 'a': System.out.println(\"输出一个数\"); int value = scanner.nextInt(); queue.addQueue(value); break; case 'g': // 取出数据 try &#123; int res = queue.getQueue(); System.out.printf(\"取出的数据是%d\\n\", res); &#125; catch (Exception e) &#123; // TODO: handle exception System.out.println(e.getMessage()); &#125; break; case 'h': // 查看队列头的数据 try &#123; int res = queue.headQueue(); System.out.printf(\"队列头的数据是%d\\n\", res); &#125; catch (Exception e) &#123; // TODO: handle exception System.out.println(e.getMessage()); &#125; break; case 'e': // 退出 scanner.close(); loop = false; break; default: break; &#125; &#125; System.out.println(\"程序退出~~\"); &#125;&#125;class CircleArray &#123; private int maxSize; // 表示数组的最大容量 //front 变量的含义做一个调整：front 就指向队列的第一个元素, 也就是说 arr[front] 就是队列的第一个元素 //front 的初始值 = 0 private int front; //rear 变量的含义做一个调整：rear 指向队列的最后一个元素的后一个位置. 因为希望空出一个空间做为约定. //rear 的初始值 = 0 private int rear; // 队列尾 private int[] arr; // 该数据用于存放数据, 模拟队列 public CircleArray(int arrMaxSize) &#123; maxSize = arrMaxSize; arr = new int[maxSize]; &#125; // 判断队列是否满 public boolean isFull() &#123; return (rear + 1) % maxSize == front; &#125; // 判断队列是否为空 public boolean isEmpty() &#123; return rear == front; &#125; // 添加数据到队列 public void addQueue(int n) &#123; // 判断队列是否满 if (isFull()) &#123; System.out.println(\"队列满，不能加入数据~\"); return; &#125; //直接将数据加入 arr[rear] = n; //将 rear 后移, 这里必须考虑取模 rear = (rear + 1) % maxSize; &#125; // 获取队列的数据, 出队列 public int getQueue() &#123; // 判断队列是否空 if (isEmpty()) &#123; // 通过抛出异常 throw new RuntimeException(\"队列空，不能取数据\"); &#125; // 这里需要分析出 front是指向队列的第一个元素 // 1. 先把 front 对应的值保留到一个临时变量 // 2. 将 front 后移, 考虑取模 // 3. 将临时保存的变量返回 int value = arr[front]; front = (front + 1) % maxSize; return value; &#125; // 显示队列的所有数据 public void showQueue() &#123; // 遍历 if (isEmpty()) &#123; System.out.println(\"队列空的，没有数据~~\"); return; &#125; // 思路：从front开始遍历，遍历多少个元素 // 动脑筋 for (int i = front; i &lt; front + size() ; i++) &#123; System.out.printf(\"arr[%d]=%d\\n\", i % maxSize, arr[i % maxSize]); &#125; &#125; // 求出当前队列有效数据的个数 public int size() &#123; // rear = 2 // front = 1 // maxSize = 3 return (rear + maxSize - front) % maxSize; &#125; // 显示队列的头数据， 注意不是取出数据 public int headQueue() &#123; // 判断 if (isEmpty()) &#123; throw new RuntimeException(\"队列空的，没有数据~~\"); &#125; return arr[front]; &#125;&#125;","categories":[],"tags":[{"name":"dataAlgorithm","slug":"dataAlgorithm","permalink":"http://dqlcr5.coding-pages.com/tags/dataAlgorithm/"}]},{"title":"Inversion of Control控制反转","slug":"Inversion-of-Control控制反转","date":"2020-05-13T08:42:55.000Z","updated":"2020-05-21T10:08:48.660Z","comments":true,"path":"2020/05/13/Inversion-of-Control控制反转/","link":"","permalink":"http://dqlcr5.coding-pages.com/2020/05/13/Inversion-of-Control%E6%8E%A7%E5%88%B6%E5%8F%8D%E8%BD%AC/","excerpt":"控制反转的定义：Inversion of Control控制反转，贯穿Spring的始终，Spring的核心。由spring来负责控制对象的生命周期和对象间的关系。","text":"控制反转的定义：Inversion of Control控制反转，贯穿Spring的始终，Spring的核心。由spring来负责控制对象的生命周期和对象间的关系。 IOC的思想是反转资源获取方向.传统的资源查找方式要求组件向容器发起请求查找资源.作为回应,容器适时的返回资源,而应用IOC之后,则是容器主动的将资源推送给它所管理的组件,组件所要做的仅仅是选择一种合适的方式来接受资源,这种行为也被称为查找的被动形式. ▼传统的方法获取： 1Pojo pojo = new Pojo( ); ▼Spring管理的bean获取： 12@AutowiredPojo pojo; ’ 对象的生命周期由Spring来管理，直接从Spring那里去获取一个对象。IOC是反转控制 (Inversion Of Control)的缩写，就像控制权从本来在自己手里，交给了Spring。‘","categories":[],"tags":[{"name":"frame","slug":"frame","permalink":"http://dqlcr5.coding-pages.com/tags/frame/"}]},{"title":"链表","slug":"链表","date":"2020-05-12T11:21:40.000Z","updated":"2020-06-06T09:12:33.874Z","comments":true,"path":"2020/05/12/链表/","link":"","permalink":"http://dqlcr5.coding-pages.com/2020/05/12/%E9%93%BE%E8%A1%A8/","excerpt":"链表是有序的列表，但它在内存里是无序的。","text":"链表是有序的列表，但它在内存里是无序的。 链表是以节点的方式来存储,是链式存储 每个节点包含data 域， next 域：指向下一个节点 各个节点不一定是连续存储. 链表分带头节点的链表和没有头节点的链表，根据实际的需求来确定 ▼单链表： 实现：package linkedlist;/** * @Author * @Date: 2020/5/11 10:59 */import java.util.Stack;public class SingleLinkedListDemo &#123; public static void main(String[] args) &#123; //进行测试 //先创建节点 HeroNode hero1 = new HeroNode(1, \"宋江\", \"及时雨\"); HeroNode hero2 = new HeroNode(2, \"卢俊义\", \"玉麒麟\"); HeroNode hero3 = new HeroNode(3, \"吴用\", \"智多星\"); HeroNode hero4 = new HeroNode(4, \"林冲\", \"豹子头\"); //创建要给链表 SingleLinkedList singleLinkedList = new SingleLinkedList(); //加入 singleLinkedList.add(hero1); singleLinkedList.add(hero4); singleLinkedList.add(hero2); singleLinkedList.add(hero3); // 测试一下单链表的反转功能 System.out.println(\"原来链表的情况~~\"); singleLinkedList.list();// System.out.println(\"反转单链表~~\");// reversetList(singleLinkedList.getHead());// singleLinkedList.list(); System.out.println(\"测试逆序打印单链表, 没有改变链表的结构~~\"); reversetList(singleLinkedList.getHead()); //加入按照编号的顺序 singleLinkedList.addByOrder(hero1); singleLinkedList.addByOrder(hero4); singleLinkedList.addByOrder(hero2); singleLinkedList.addByOrder(hero3); //显示一把 singleLinkedList.list(); //测试修改节点的代码 HeroNode newHeroNode = new HeroNode(2, \"小卢\", \"玉麒麟~~\"); singleLinkedList.update(newHeroNode); System.out.println(\"修改后的链表情况~~\"); singleLinkedList.list(); //删除一个节点 singleLinkedList.del(1); singleLinkedList.del(4); System.out.println(\"删除后的链表情况~~\"); singleLinkedList.list(); //测试一下 求单链表中有效节点的个数 System.out.println(\"有效的节点个数=\" + getLength(singleLinkedList.getHead()));//2 //测试一下看看是否得到了倒数第K个节点 HeroNode res = findLastIndexNode(singleLinkedList.getHead(), 3); System.out.println(\"res=\" + res); &#125; //将单链表反转 public static void reversetList(HeroNode head) &#123; //如果当前链表为空，或者只有一个节点，无需反转，直接返回 if(head.next == null || head.next.next == null) &#123; return ; &#125; //定义一个辅助的指针(变量)，帮助我们遍历原来的链表 HeroNode cur = head.next; HeroNode next = null;// 指向当前节点[cur]的下一个节点 HeroNode reverseHead = new HeroNode(0, \"\", \"\"); //遍历原来的链表，每遍历一个节点，就将其取出，并放在新的链表reverseHead 的最前端 //动脑筋 while(cur != null) &#123; next = cur.next;//先暂时保存当前节点的下一个节点，因为后面需要使用 cur.next = reverseHead.next;//将cur的下一个节点指向新的链表的最前端 reverseHead.next = cur; //将cur 连接到新的链表上 cur = next;//让cur后移 &#125; //将head.next 指向 reverseHead.next , 实现单链表的反转 head.next = reverseHead.next; &#125; //查找单链表中的倒数第k个结点 【新浪面试题】 //思路 //1. 编写一个方法，接收head节点，同时接收一个index //2. index 表示是倒数第index个节点 //3. 先把链表从头到尾遍历，得到链表的总的长度 getLength //4. 得到size 后，我们从链表的第一个开始遍历 (size-index)个，就可以得到 //5. 如果找到了，则返回该节点，否则返回nulll public static HeroNode findLastIndexNode(HeroNode head, int index) &#123; //判断如果链表为空，返回null if(head.next == null) &#123; return null;//没有找到 &#125; //第一个遍历得到链表的长度(节点个数) int size = getLength(head); //第二次遍历 size-index 位置，就是我们倒数的第K个节点 //先做一个index的校验 if(index &lt;=0 || index &gt; size) &#123; return null; &#125; //定义给辅助变量， for 循环定位到倒数的index HeroNode cur = head.next; //3 // 3 - 1 = 2 for(int i =0; i&lt; size - index; i++) &#123; cur = cur.next; &#125; return cur; &#125; //方法：获取到单链表的节点的个数(如果是带头结点的链表，需求不统计头节点) /** * * @param head 链表的头节点 * @return 返回的就是有效节点的个数 */ public static int getLength(HeroNode head) &#123; if(head.next == null) &#123; //空链表 return 0; &#125; int length = 0; //定义一个辅助的变量, 这里我们没有统计头节点 HeroNode cur = head.next; while(cur != null) &#123; length++; cur = cur.next; //遍历 &#125; return length; &#125;&#125;//定义SingleLinkedList 管理我们的英雄class SingleLinkedList &#123; //先初始化一个头节点, 头节点不要动, 不存放具体的数据 private HeroNode head = new HeroNode(0, \"\", \"\"); //返回头节点 public HeroNode getHead() &#123; return head; &#125; //添加节点到单向链表 //思路，当不考虑编号顺序时 //1. 找到当前链表的最后节点 //2. 将最后这个节点的next 指向 新的节点 public void add(HeroNode heroNode) &#123; //因为head节点不能动，因此我们需要一个辅助遍历 temp HeroNode temp = head; //遍历链表，找到最后 while(true) &#123; //找到链表的最后 if(temp.next == null) &#123;// break; &#125; //如果没有找到最后, 将将temp后移 temp = temp.next; &#125; //当退出while循环时，temp就指向了链表的最后 //将最后这个节点的next 指向 新的节点 temp.next = heroNode; &#125; //第二种方式在添加英雄时，根据排名将英雄插入到指定位置 //(如果有这个排名，则添加失败，并给出提示) public void addByOrder(HeroNode heroNode) &#123; //因为头节点不能动，因此我们仍然通过一个辅助指针(变量)来帮助找到添加的位置 //因为单链表，因为我们找的temp 是位于 添加位置的前一个节点，否则插入不了 HeroNode temp = head; boolean flag = false; // flag标志添加的编号是否存在，默认为false while(true) &#123; if(temp.next == null) &#123;//说明temp已经在链表的最后 break; // &#125; if(temp.next.no &gt; heroNode.no) &#123; //位置找到，就在temp的后面插入 break; &#125; else if (temp.next.no == heroNode.no) &#123;//说明希望添加的heroNode的编号已然存在 flag = true; //说明编号存在 break; &#125; temp = temp.next; //后移，遍历当前链表 &#125; //判断flag 的值 if(flag) &#123; //不能添加，说明编号存在 System.out.printf(\"准备插入的英雄的编号 %d 已经存在了, 不能加入\\n\", heroNode.no); &#125; else &#123; //插入到链表中, temp的后面 heroNode.next = temp.next; temp.next = heroNode; &#125; &#125; //修改节点的信息, 根据no编号来修改，即no编号不能改. //说明 //1. 根据 newHeroNode 的 no 来修改即可 public void update(HeroNode newHeroNode) &#123; //判断是否空 if(head.next == null) &#123; System.out.println(\"链表为空~\"); return; &#125; //找到需要修改的节点, 根据no编号 //定义一个辅助变量 HeroNode temp = head.next; boolean flag = false; //表示是否找到该节点 while(true) &#123; if (temp == null) &#123; break; //已经遍历完链表 &#125; if(temp.no == newHeroNode.no) &#123; //找到 flag = true; break; &#125; temp = temp.next; &#125; //根据flag 判断是否找到要修改的节点 if(flag) &#123; temp.name = newHeroNode.name; temp.nickname = newHeroNode.nickname; &#125; else &#123; //没有找到 System.out.printf(\"没有找到 编号 %d 的节点，不能修改\\n\", newHeroNode.no); &#125; &#125; //删除节点 //思路 //1. head 不能动，因此我们需要一个temp辅助节点找到待删除节点的前一个节点 //2. 说明我们在比较时，是temp.next.no 和 需要删除的节点的no比较 public void del(int no) &#123; HeroNode temp = head; boolean flag = false; // 标志是否找到待删除节点的 while(true) &#123; if(temp.next == null) &#123; //已经到链表的最后 break; &#125; if(temp.next.no == no) &#123; //找到的待删除节点的前一个节点temp flag = true; break; &#125; temp = temp.next; //temp后移，遍历 &#125; //判断flag if(flag) &#123; //找到 //可以删除 temp.next = temp.next.next; &#125;else &#123; System.out.printf(\"要删除的 %d 节点不存在\\n\", no); &#125; &#125; //显示链表[遍历] public void list() &#123; //判断链表是否为空 if(head.next == null) &#123; System.out.println(\"链表为空\"); return; &#125; //因为头节点，不能动，因此我们需要一个辅助变量来遍历 HeroNode temp = head.next; while(true) &#123; //判断是否到链表最后 if(temp == null) &#123; break; &#125; //输出节点的信息 System.out.println(temp); //将temp后移， 一定小心 temp = temp.next; &#125; &#125;&#125;//定义HeroNode ， 每个HeroNode 对象就是一个节点class HeroNode &#123; public int no; public String name; public String nickname; public HeroNode next; //指向下一个节点 //构造器 public HeroNode(int no, String name, String nickname) &#123; this.no = no; this.name = name; this.nickname = nickname; &#125; //为了显示方法，我们重新toString @Override public String toString() &#123; return \"HeroNode [no=\" + no + \", name=\" + name + \", nickname=\" + nickname + \"]\"; &#125;&#125;▼双向链表：单向链表，查找的方向只能是一个方向，而双向链表可以向前或者向后查找。单向链表不能自我删除，需要靠辅助节点，而双向链表，则可以自我删除，所以前面我们单链表删除时节点，总是找到temp,temp是待删除节点的前一个节点package linkedlist;public class DoubleLinkedListDemo &#123; public static void main(String[] args) &#123; // 测试 System.out.println(\"双向链表的测试\"); // 先创建节点 HeroNode2 hero1 = new HeroNode2(1, \"宋江\", \"及时雨\"); HeroNode2 hero2 = new HeroNode2(2, \"卢俊义\", \"玉麒麟\"); HeroNode2 hero3 = new HeroNode2(3, \"吴用\", \"智多星\"); HeroNode2 hero4 = new HeroNode2(4, \"林冲\", \"豹子头\"); // 创建一个双向链表 DoubleLinkedList doubleLinkedList = new DoubleLinkedList(); doubleLinkedList.add(hero1); doubleLinkedList.add(hero2); doubleLinkedList.add(hero3); doubleLinkedList.add(hero4); doubleLinkedList.list(); // 修改 HeroNode2 newHeroNode = new HeroNode2(4, \"公孙胜\", \"入云龙\"); doubleLinkedList.update(newHeroNode); System.out.println(\"修改后的链表情况\"); doubleLinkedList.list(); // 删除 doubleLinkedList.del(3); System.out.println(\"删除后的链表情况~~\"); doubleLinkedList.list(); &#125;&#125;// 创建一个双向链表的类class DoubleLinkedList &#123; // 先初始化一个头节点, 头节点不要动, 不存放具体的数据 private HeroNode2 head = new HeroNode2(0, \"\", \"\"); // 返回头节点 public HeroNode2 getHead() &#123; return head; &#125; // 遍历双向链表的方法 // 显示链表[遍历] public void list() &#123; // 判断链表是否为空 if (head.next == null) &#123; System.out.println(\"链表为空\"); return; &#125; // 因为头节点，不能动，因此我们需要一个辅助变量来遍历 HeroNode2 temp = head.next; while (true) &#123; // 判断是否到链表最后 if (temp == null) &#123; break; &#125; // 输出节点的信息 System.out.println(temp); // 将temp后移， 一定小心 temp = temp.next; &#125; &#125; // 添加一个节点到双向链表的最后. public void add(HeroNode2 heroNode) &#123; // 因为head节点不能动，因此我们需要一个辅助遍历 temp HeroNode2 temp = head; // 遍历链表，找到最后 while (true) &#123; // 找到链表的最后 if (temp.next == null) &#123;// break; &#125; // 如果没有找到最后, 将将temp后移 temp = temp.next; &#125; // 当退出while循环时，temp就指向了链表的最后 // 形成一个双向链表 temp.next = heroNode; heroNode.pre = temp; &#125; // 修改一个节点的内容, 可以看到双向链表的节点内容修改和单向链表一样 // 只是 节点类型改成 HeroNode2 public void update(HeroNode2 newHeroNode) &#123; // 判断是否空 if (head.next == null) &#123; System.out.println(\"链表为空~\"); return; &#125; // 找到需要修改的节点, 根据no编号 // 定义一个辅助变量 HeroNode2 temp = head.next; boolean flag = false; // 表示是否找到该节点 while (true) &#123; if (temp == null) &#123; break; // 已经遍历完链表 &#125; if (temp.no == newHeroNode.no) &#123; // 找到 flag = true; break; &#125; temp = temp.next; &#125; // 根据flag 判断是否找到要修改的节点 if (flag) &#123; temp.name = newHeroNode.name; temp.nickname = newHeroNode.nickname; &#125; else &#123; // 没有找到 System.out.printf(\"没有找到 编号 %d 的节点，不能修改\\n\", newHeroNode.no); &#125; &#125; // 从双向链表中删除一个节点, // 说明 // 1 对于双向链表，我们可以直接找到要删除的这个节点 // 2 找到后，自我删除即可 public void del(int no) &#123; // 判断当前链表是否为空 if (head.next == null) &#123;// 空链表 System.out.println(\"链表为空，无法删除\"); return; &#125; HeroNode2 temp = head.next; // 辅助变量(指针) boolean flag = false; // 标志是否找到待删除节点的 while (true) &#123; if (temp == null) &#123; // 已经到链表的最后 break; &#125; if (temp.no == no) &#123; // 找到的待删除节点的前一个节点temp flag = true; break; &#125; temp = temp.next; // temp后移，遍历 &#125; // 判断flag if (flag) &#123; // 找到 // 可以删除 // temp.next = temp.next.next;[单向链表] temp.pre.next = temp.next; // 这里我们的代码有问题? // 如果是最后一个节点，就不需要执行下面这句话，否则出现空指针 if (temp.next != null) &#123; temp.next.pre = temp.pre; &#125; &#125; else &#123; System.out.printf(\"要删除的 %d 节点不存在\\n\", no); &#125; &#125;&#125;// 定义HeroNode2 ， 每个HeroNode 对象就是一个节点class HeroNode2 &#123; public int no; public String name; public String nickname; public HeroNode2 next; // 指向下一个节点, 默认为null public HeroNode2 pre; // 指向前一个节点, 默认为null // 构造器 public HeroNode2(int no, String name, String nickname) &#123; this.no = no; this.name = name; this.nickname = nickname; &#125; // 为了显示方法，我们重新toString @Override public String toString() &#123; return \"HeroNode [no=\" + no + \", name=\" + name + \", nickname=\" + nickname + \"]\"; &#125;&#125;▼循环链表：package linkedlist;public class Josepfu &#123; public static void main(String[] args) &#123; // 测试一把看看构建环形链表，和遍历是否ok CircleSingleLinkedList circleSingleLinkedList = new CircleSingleLinkedList(); circleSingleLinkedList.addBoy(125);// 加入5个小孩节点 circleSingleLinkedList.showBoy(); //测试一把小孩出圈是否正确 circleSingleLinkedList.countBoy(10, 20, 125); // 2-&gt;4-&gt;1-&gt;5-&gt;3 //String str = \"7*2*2-5+1-5+3-3\"; &#125;&#125;// 创建一个环形的单向链表class CircleSingleLinkedList &#123; // 创建一个first节点,当前没有编号 private Boy first = null; // 添加小孩节点，构建成一个环形的链表 public void addBoy(int nums) &#123; // nums 做一个数据校验 if (nums &lt; 1) &#123; System.out.println(\"nums的值不正确\"); return; &#125; Boy curBoy = null; // 辅助指针，帮助构建环形链表 // 使用for来创建我们的环形链表 for (int i = 1; i &lt;= nums; i++) &#123; // 根据编号，创建小孩节点 Boy boy = new Boy(i); // 如果是第一个小孩 if (i == 1) &#123; first = boy; first.setNext(first); // 构成环 curBoy = first; // 让curBoy指向第一个小孩 &#125; else &#123; curBoy.setNext(boy);// boy.setNext(first);// curBoy = boy; &#125; &#125; &#125; // 遍历当前的环形链表 public void showBoy() &#123; // 判断链表是否为空 if (first == null) &#123; System.out.println(\"没有任何小孩~~\"); return; &#125; // 因为first不能动，因此我们仍然使用一个辅助指针完成遍历 Boy curBoy = first; while (true) &#123; System.out.printf(\"小孩的编号 %d \\n\", curBoy.getNo()); if (curBoy.getNext() == first) &#123;// 说明已经遍历完毕 break; &#125; curBoy = curBoy.getNext(); // curBoy后移 &#125; &#125; // 根据用户的输入，计算出小孩出圈的顺序 /** * * @param startNo * 表示从第几个小孩开始数数 * @param countNum * 表示数几下 * @param nums * 表示最初有多少小孩在圈中 */ public void countBoy(int startNo, int countNum, int nums) &#123; // 先对数据进行校验 if (first == null || startNo &lt; 1 || startNo &gt; nums) &#123; System.out.println(\"参数输入有误， 请重新输入\"); return; &#125; // 创建要给辅助指针,帮助完成小孩出圈 Boy helper = first; // 需求创建一个辅助指针(变量) helper , 事先应该指向环形链表的最后这个节点 while (true) &#123; if (helper.getNext() == first) &#123; // 说明helper指向最后小孩节点 break; &#125; helper = helper.getNext(); &#125; //小孩报数前，先让 first 和 helper 移动 k - 1次 for(int j = 0; j &lt; startNo - 1; j++) &#123; first = first.getNext(); helper = helper.getNext(); &#125; //当小孩报数时，让first 和 helper 指针同时 的移动 m - 1 次, 然后出圈 //这里是一个循环操作，知道圈中只有一个节点 while(true) &#123; if(helper == first) &#123; //说明圈中只有一个节点 break; &#125; //让 first 和 helper 指针同时 的移动 countNum - 1 for(int j = 0; j &lt; countNum - 1; j++) &#123; first = first.getNext(); helper = helper.getNext(); &#125; //这时first指向的节点，就是要出圈的小孩节点 System.out.printf(\"小孩%d出圈\\n\", first.getNo()); //这时将first指向的小孩节点出圈 first = first.getNext(); helper.setNext(first); // &#125; System.out.printf(\"最后留在圈中的小孩编号%d \\n\", first.getNo()); &#125;&#125;// 创建一个Boy类，表示一个节点class Boy &#123; private int no;// 编号 private Boy next; // 指向下一个节点,默认null public Boy(int no) &#123; this.no = no; &#125; public int getNo() &#123; return no; &#125; public void setNo(int no) &#123; this.no = no; &#125; public Boy getNext() &#123; return next; &#125; public void setNext(Boy next) &#123; this.next = next; &#125;&#125;","categories":[],"tags":[{"name":"dataAlgorithm","slug":"dataAlgorithm","permalink":"http://dqlcr5.coding-pages.com/tags/dataAlgorithm/"}]},{"title":"栈Stack","slug":"栈Stack","date":"2020-05-11T07:30:11.000Z","updated":"2020-06-06T09:12:51.771Z","comments":true,"path":"2020/05/11/栈Stack/","link":"","permalink":"http://dqlcr5.coding-pages.com/2020/05/11/%E6%A0%88Stack/","excerpt":"栈(stack)1栈是一个先入后出(FILO-First In Last Out)的有序列表。","text":"栈(stack)1栈是一个先入后出(FILO-First In Last Out)的有序列表。 2栈(stack)是限制线性表中元素的插入和删除只能在线性表的同一端进行的一种特殊线性表。允许插入和删除的一端，为变化的一端，称为栈顶(Top)，另一端为固定的一端，称为栈底(Bottom)。 3.根据栈的定义可知，最先放入栈中元素在栈底，最后放入的元素在栈顶，而删除元素刚好相反，最后放入的元素最先删除，最先放入的元素最后删除 123456 ───────────────────────────────┐ (\\(\\ (\\(\\ (\\(\\ (\\(\\ (\\(\\ │ (&#x3D;&#39;.&#39;) &lt;─&gt; (&#x3D;&#39;.&#39;) (&#x3D;&#39;.&#39;) (&#x3D;&#39;.&#39;) (&#x3D;&#39;.&#39;)│O(_&quot;)&quot;) O(_&quot;)&quot;) O(_&quot;)&quot;) O(_&quot;)&quot;) O(_&quot;)&quot;)│ ───────────────────────────────┘ stack 和队列区别开 123456 ──────────────────────── (\\(\\ (\\(\\ (\\(\\ (\\(\\ (\\(\\ (&#x3D;&#39;.&#39;) ─&gt; (&#x3D;&#39;.&#39;) (&#x3D;&#39;.&#39;) (&#x3D;&#39;.&#39;) ─&gt; (&#x3D;&#39;.&#39;)O(_&quot;)&quot;) O(_&quot;)&quot;) O(_&quot;)&quot;) O(_&quot;)&quot;) O(_&quot;)&quot;) ──────────────────────── Queue 栈的结构12345678 ───────────────────────────────┐ (\\(\\ (\\(\\ (\\(\\ (\\(\\ │ (&#x3D;&#39;.&#39;) (&#x3D;&#39;.&#39;) (&#x3D;&#39;.&#39;) (&#x3D;&#39;.&#39;)│ O(_&quot;)&quot;) O(_&quot;)&quot;) O(_&quot;)&quot;) O(_&quot;)&quot;)│ ───────────────────────────────┘ ↑ ↑ Top栈顶 Bottom栈底初始化为-1 入栈12345678 ───────────────────────────────┐ (\\(\\ (\\(\\ (\\(\\ (\\(\\ │ (&#x3D;&#39;.&#39;) ─&gt; (&#x3D;&#39;.&#39;) (&#x3D;&#39;.&#39;) (&#x3D;&#39;.&#39;)│O(_&quot;)&quot;) O(_&quot;)&quot;) O(_&quot;)&quot;) O(_&quot;)&quot;)│ data ───────────────────────────────┘ push入栈 top++; stack[top]&#x3D;data 出栈123456789 ───────────────────────────────┐ (\\(\\ (\\(\\ (\\(\\ (\\(\\ │&lt;─ (&#x3D;&#39;.&#39;) (&#x3D;&#39;.&#39;) (&#x3D;&#39;.&#39;) (&#x3D;&#39;.&#39;)│ O(_&quot;)&quot;) O(_&quot;)&quot;) O(_&quot;)&quot;) O(_&quot;)&quot;)│ ───────────────────────────────┘ pop出栈 int value &#x3D; stack[top]; top--; return value;","categories":[],"tags":[{"name":"dataAlgorithm","slug":"dataAlgorithm","permalink":"http://dqlcr5.coding-pages.com/tags/dataAlgorithm/"}]},{"title":"SparseArray稀疏数组","slug":"SparseArray稀疏数组","date":"2020-05-07T13:28:41.000Z","updated":"2020-06-06T09:12:59.435Z","comments":true,"path":"2020/05/07/SparseArray稀疏数组/","link":"","permalink":"http://dqlcr5.coding-pages.com/2020/05/07/SparseArray%E7%A8%80%E7%96%8F%E6%95%B0%E7%BB%84/","excerpt":"SparseArray 稀疏数组 ​ （稀疏数组）","text":"SparseArray 稀疏数组 ​ （稀疏数组） 定义当一个数组中大部分的值未被使用，只有少部分的值的空间使用，造成了内存的浪费，这个时候就可以用到稀疏数组，保存需要的数据，节约内存空间。当记录一个棋盘时： 记录棋盘的位置，只有两个内容，其他未被使用没有意义的值浪费了内存空间 使用稀疏数组代替二维数组，第0行表示稀疏数组的总行，总列和所需内容的个数。 实现123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105package com.kayleh.tmall.controller;/** * @Author: Wizard * @Date: 2020/5/7 9:16 */public class SparseArray &#123; public static void main(String[] args) &#123; //创建一个二维数组 //0:表示没有棋子 1表示黑子 2表示蓝子 int chessArr[][] = new int[11][10]; chessArr[1][2] = 1; chessArr[2][3] = 2; for(int[] row:chessArr)&#123; for(int data:row)&#123; System.out.printf(\"%d\\t\",data); &#125; System.out.println(); &#125; int[][] array = getSparseArray(chessArr); System.out.println(\"-------\"); for(int i = 0 ; i&lt; array.length;i++)&#123; System.out.printf(\"%d\\t%d\\t%d\\t\\n\",array[i][0],array[i][1],array[i][2]); &#125; System.out.println(\"--------\"); int[][] startArr = recovery(array); for(int[] row:startArr)&#123; for(int data:row)&#123; System.out.printf(\"%d\\t\",data); &#125; System.out.println(); &#125; &#125; /** * 将普通数组转换为稀疏数组 * @param chessArr * @return */ public static int[][] getSparseArray(int[][] chessArr)&#123; if(!checkIsRight(chessArr))&#123; return null; &#125; //1.拿到数组后 首先获取元素的个数,然后才能建立稀疏数组 int sum = 0; for(int[] arr:chessArr)&#123; for(int i:arr)&#123; if(i != 0)&#123; sum++; &#125; &#125; &#125; //2.建立稀疏数组 int[][] sparseArr = new int[sum+1][3]; sparseArr[0][0] = chessArr.length; //行 sparseArr[0][1] = chessArr[0].length;//列 sparseArr[0][2] = sum; //元素个数 //3.数组存放 int count = 0; for(int i = 0; i &lt;chessArr.length; i++ )&#123; for(int j = 0; j &lt;chessArr[i].length;j++ )&#123; if(chessArr[i][j] != 0)&#123; sparseArr[++count][0] = i;//行 sparseArr[count][1] = j;//列 sparseArr[count][2] = chessArr[i][j]; &#125; &#125; &#125; return sparseArr; &#125; /** * 将稀疏数组转回普通数组 * @param sparseArr * @return */ public static int[][] recovery(int[][] sparseArr)&#123; if(!checkIsRight(sparseArr))&#123; return null; &#125; //获取原数组的 行数和列数 并创建原数组 int arr[][] = new int[sparseArr[0][0]][sparseArr[0][1]]; for(int i = 1; i &lt; sparseArr.length;i++)&#123; arr[sparseArr[i][0]][sparseArr[i][1]] = sparseArr[i][2]; &#125; return arr; &#125; public static boolean checkIsRight(int[][] arr)&#123; if(arr == null || arr.length &lt;= 1 )&#123; return false; &#125; return true; &#125;&#125; 每日学习干货 ∣一个有用的公众号 长按，识别二维码，加关注","categories":[],"tags":[{"name":"dataAlgorithm","slug":"dataAlgorithm","permalink":"http://dqlcr5.coding-pages.com/tags/dataAlgorithm/"}]},{"title":"维护1","slug":"维护1","date":"2020-05-01T10:21:32.000Z","updated":"2020-05-21T11:10:26.408Z","comments":true,"path":"2020/05/01/维护1/","link":"","permalink":"http://dqlcr5.coding-pages.com/2020/05/01/%E7%BB%B4%E6%8A%A41/","excerpt":"维护1","text":"维护1 1.添加评论功能 2.添加鼠标点击出现爱心事件","categories":[],"tags":[{"name":"maintain","slug":"maintain","permalink":"http://dqlcr5.coding-pages.com/tags/maintain/"}]},{"title":"Java memory model内存模型","slug":"Java-memory-model内存模型","date":"2020-04-30T01:40:45.000Z","updated":"2020-05-21T10:08:44.737Z","comments":true,"path":"2020/04/30/Java-memory-model内存模型/","link":"","permalink":"http://dqlcr5.coding-pages.com/2020/04/30/Java-memory-model%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/","excerpt":"Java内存模型​ jmm规范，他规范了java虚拟机与计算机内存如何协调工作，他规定了一个线程如何及何时看到其他线程修改过的变量的值，以及在必须时，如何同步的访问共享变量。","text":"Java内存模型​ jmm规范，他规范了java虚拟机与计算机内存如何协调工作，他规定了一个线程如何及何时看到其他线程修改过的变量的值，以及在必须时，如何同步的访问共享变量。 jmm内存分配概念堆heap:优点:运行时数据区,动态分配内存大小,有gc; 缺点:因为要在运行时动态分配,所以存取速度慢,对象存储在堆上,静态类型的变量跟着类的定义一起存储在堆上. 栈stack:存取速度快,仅次于寄存器, 缺点: 数据大小与生存期必须是确定的,缺乏灵活性,栈中主要存放基本类型变量(比如,int,short,byte,char,double,float,boolean和对象句柄),jmm要求,调用栈和本地变量存放在线程栈上 当一个线程可以访问一个对象时,也可以访问对象的成员变量,如果有两个线程访问对象的成员变量,则每个线程都有对象的成员变量,则每个线程都有对象的成员变量的私有拷贝.","categories":[],"tags":[{"name":"jvm","slug":"jvm","permalink":"http://dqlcr5.coding-pages.com/tags/jvm/"}]},{"title":"面向对象的特征","slug":"面向对象的特征","date":"2020-04-29T13:33:19.000Z","updated":"2020-06-05T02:31:30.970Z","comments":true,"path":"2020/04/29/面向对象的特征/","link":"","permalink":"http://dqlcr5.coding-pages.com/2020/04/29/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%89%B9%E5%BE%81/","excerpt":"面向对象的特征有哪些方面封装最常见的是把属性私有化封装在一个类里面，只能通过方法去访问","text":"面向对象的特征有哪些方面封装最常见的是把属性私有化封装在一个类里面，只能通过方法去访问 继承extends可以复用代码， 继承是面向对象编程的一种强大的代码复用方式； 子类继承父类，从而继承了父类的方法和属性； Java只允许单继承，所有类最终的根类是Object； protected允许子类访问父类的字段和方法； protected关键字可以把字段和方法的访问权限控制在继承树内部，一个protected字段和方法可以被其子类，以及子类的子类所访问。 父类没有无参构造器时，子类任何class调用父类构造器时，必须调用super父类有的构造器。 如果父类没有默认的构造方法，子类就必须显式调用super()并给出参数以便让编译器定位到父类的一个合适的构造方法。即子类不会继承任何父类的构造方法。子类默认的构造方法是编译器自动生成的，不是继承的。 向上转型类型提升。 把一个子类类型安全地变为父类类型的赋值，被称为向上转型（upcasting）。 向上转型实际上是把一个子类型安全地变为更加抽象的父类型。 向下转型 和向上转型相反，如果把一个父类类型强制转型为子类类型，就是向下转型（downcasting）。 向下转型很可能会失败。 抽象 由于多态的存在，每个子类都可以覆写父类的方法 如果一个class定义了方法，但没有具体执行代码，这个方法就是抽象方法，抽象方法用abstract修饰。 因为无法执行抽象方法，因此这个类也必须申明为抽象类（abstract class）。 使用abstract修饰的类就是抽象类。我们无法实例化一个抽象类。 通过abstract定义的方法是抽象方法，它只有定义，没有实现。抽象方法定义了子类必须实现的接口规范； 定义了抽象方法的class必须被定义为抽象类，从抽象类继承的子类必须实现抽象方法； 如果不实现抽象方法，则该子类仍是一个抽象类； 面向抽象编程使得调用者只关心抽象方法的定义，不关心子类的具体实现。 多态 在继承关系中，子类如果定义了一个与父类方法签名完全相同的方法，被称为覆写（Override）。 多态具有一个非常强大的功能，就是允许添加更多类型的子类实现功能扩展，却不需要修改基于父类的代码。 子类可以覆写父类的方法（Override），覆写在子类中改变了父类方法的行为； Java的方法调用总是作用于运行期对象的实际类型，这种行为称为多态； final修饰符有多种作用： final修饰的方法可以阻止被覆写； final修饰的class可以阻止被继承； final修饰的field必须在创建对象时初始化，随后不可修改。","categories":[],"tags":[]},{"title":"动态数组","slug":"动态数组","date":"2020-04-26T01:02:37.000Z","updated":"2020-06-06T09:12:00.000Z","comments":true,"path":"2020/04/26/动态数组/","link":"","permalink":"http://dqlcr5.coding-pages.com/2020/04/26/%E5%8A%A8%E6%80%81%E6%95%B0%E7%BB%84/","excerpt":"数组(Array)数组是一种顺序储存的线性表,所有元素的内存地址是连续.12int[] array = new int[]&#123;20, 30, 40&#125;//向内存申请了12个字节地址","text":"数组(Array)数组是一种顺序储存的线性表,所有元素的内存地址是连续.12int[] array = new int[]&#123;20, 30, 40&#125;//向内存申请了12个字节地址 在很多编程语言中，数组有个致命的缺点， 无法动态修改容量。 实际开发中我们希望数组的容量是动态变化的。 动态数组创建ArrayList类,创建size属性来管理数组中元素的个数,创建element属性来管理存取的数据. 可以对动态数组进行增删改查操作. 12345678910111213141516171819202122232425public class ArrayList&lt;E&gt; &#123; private int size; private E[] elements; // 元素的数量 int size(); // 是否为空 boolean isEmpty(); // 是否包含某个元素 boolean contains(E element); // 添加元素到最后面 void add(E element); // 返回index位置对应的元素 E get(int index); // 设置index位置的元素 E set(int index, E element); // 往index位置添加元素 void add(int index, E element); // 删除index位置对应的元素 E remove(int index); // 查看元素的位置 int indexOf(E element); // 清除所有元素 void clear(); &#125; 动态数组的实现构造方法如果构建的数组空间小于默认空间,则会以默认空间创建数组. 1234567891011121314151617181920212223242526272829303132333435public class ArrayList&lt;E&gt; &#123; /** * 元素的数量 */ private int size; /** * 所有元素 */ private E[] elements; /** * 数组的默认容量 */ private static final int DEFAULT_CAPACITY = 10; /** * 找不到元素返回-1 */ private static final int ELEMENT_NOT_FOUNT = -1; public ArrayList() &#123; // 默认容量 //elements = new int[DEFAULT_CAPACITY]; this(DEFAULT_CAPACITY); // 调用下面的构造器 &#125; public ArrayList(int capacity) &#123; // 设置默认容量为 10 capacity = (capacity &lt; DEFAULT_CAPACITY) ? DEFAULT_CAPACITY : capacity; // 因为泛型(所以传一个Object数组,然后通过强转) elements = (E[]) new Object[capacity]; &#125;&#125; 添加元素 数组添加元素分为在最后一个元素的后面添加新元素和将元素插入到某个位置（非最后面）两种情况。 第一种情况，这个新元素需要添加到的索引等于当前数组元素的个数，在ArrayList中size属性就是当前数组元素的个数，所以就是将新元素添加到数组的size位置上，然后size加1。 1234public void add(int index, E element) &#123; elements[index] = element; size++;&#125; 如果是第二种情况，只需要将插入位置后面的元素向后移动即可。 注意：需要从后向前移动元素，如果从前向后移动元素，那么会进行元素覆盖, 最后出错。 数组越界添加元素,还要注意传入的索引不能越界,即不能小于0,也不能大于size. 12345678910/** * 根据index插入元素时,判断index是否有效 * * @param index */private void rangeCheckForAdd(int index) &#123; if (index &lt; 0 || index &gt; size) &#123; indexOutOfBounds(index); &#125;&#125; 12345678/** * 封装数组越界异常 * * @param index */private void indexOutOfBounds(int index) &#123; throw new IndexOutOfBoundsException(\"Index:\" + index + \", Size:\" + size);&#125; 数组扩容动态扩容思路: 通过默认容量创建的数组,是在堆空间中随机生成的地址;如此一来再申请空间拼接到该数组后,这种方式不可能实现; 我们只能再创建一个大容量的数组,然后将之前数组中的元素移动到这个数组中;然后将引用指向新数组即可! 由于数组elements最大的容量只有10，所以当数组存满元素时，就需要对数组进行扩容。 因为数组是无法动态扩容的，所以需要创建一个新的数组，这个数组的容量要比之前数组的容量大。 然后在将原数组中的元素存放到新数组中，这样就实现了数组的扩容。 该方法确保默认容量为多少,为了验证是否超过给定的默认容量,然后进行判断是否要扩容;这里size+1为数组当前数量+1, 因为每次add都会增加一个容量。 123456789101112131415161718192021222324/** * 确保至少要有capacity个容量 * * @param capacity */private void ensureCapacity(int capacity) &#123; // 获取数组当前容量 int oldCapacity = elements.length; // 判断是否要扩容 if (oldCapacity &gt;= capacity) return; // 此时不扩容 // 这种方式是扩容1.5倍 int newCapacity = oldCapacity + (oldCapacity &gt;&gt; 1); E[] newElements = (E[]) new Object[newCapacity]; // 将原来数组中的元素移动到新数组中 for (int i = 0; i &lt; size; i++) &#123; newElements[i] = elements[i]; &#125; // 将数组引用指向新数组 elements = newElements;&#125; 实现add函数，需要在添加新元素之前，判断数组越界和扩容。 12345678910111213141516171819/** * 在index位置插入一个元素 * * @param index * @param element */public void add(int index, E element) &#123; // 在添加元素的时候,判断index是否有效 rangeCheckForAdd(index); ensureCapacity(size + 1); // 注意: 插入元素后,元素是从后开始往后挪 for (int i = size - 1; i &gt;= index; i--) &#123; elements[i + 1] = elements[i]; &#125; elements[index] = element; size++;&#125; 最终在最后一个元素的后面添加新元素，即添加元素到尾部的实现方式如下 12345678910/** * 添加元素到尾部 * * @param element */public void add(E element) &#123; // elements[size++] = element; // 传入数组数量(相当于在最后插入元素) add(size, element);&#125; 删除元素 删除元素，实际上就是移除指定位置的元素，并将后面的元素向前移动。 如下图，当删除索引为3的元素时，只需要将后面的元素向前移动，然后在去掉最后一个元素，size减1即可。 数组越界 删除元素时传入的索引不能越界, 即不能小于0, 也不能大于等于size所以我们在删除元素之前需要先进行索引检查。 123456789private void indexOutOfBounds(int index) &#123; throw new IndexOutOfBoundsException(\"Index:\" + index + \", Size:\" + size);&#125; private void rangeCheck(int index) &#123; if (index &lt; 0 || index &gt;= size) &#123; outOfBounds(index); &#125;&#125; 数组缩容 当数组中的元素删除后，数组剩余的空间可能会很大，这样就会造成内存的浪费。 所以当数组中元素删除后，我们需要对数组进行缩容。 实现方法类似于扩容，当数组中容量小于某个值时，创建新的数组，然后将原有数组中的元素存入新数组即可。 12345678910111213141516171819/** * 数组缩容 */public void trim() &#123; // 获取当前数组的容量 int capacity = elements.length; // 当size大于等于容量的一半, 或则容量已经小于默认容量(10)时, 直接返回 if (size &gt;= capacity &gt;&gt; 1 || capacity &lt; CAPACITY_DEFAULT) return; // 计算新的容量 = 原有容量的一半 int newCapacity = capacity &gt;&gt; 1; // 创建新数组 E[] newElements = (E[]) new Object[newCapacity]; // 将原数组元素存入新数组 for (int i = 0; i &lt; size; i++) &#123; newElements[i] = elements[i]; &#125; // 引用新数组 elements = newElements;&#125; 最终, remove方法实现如下 1234567891011121314151617181920212223242526272829/** * 删除index位置的元素 * * @param index * @return 被删除的元素 */public E remove(int index) &#123; rangeCheck(index); E delEle = elements[index]; // 当删除一个元素时,需要挪动后面元素的范围 for (int i = index + 1; i &lt;= size - 1; i++) &#123; elements[i - 1] = elements[i]; &#125; size--; // 同clear的细节,当从后往前以后时,最后一个的地址需要释放 elements[size] = null; // 判断数组是否需要缩容 trim(); return delEle;&#125;/** * 删除传入的元素 * @param element */public void remove(E element)&#123; remove(indexOf(element));&#125; 清空数组 清空数组时，需要将所有的元素置为null，只有这样才能真正的释放对象，然后size置为0。 123456789/** * 清除所有元素 */public void clear() &#123; for (int i = 0; i &lt; size; i++) &#123; elements[i] = null; &#125; size = 0;&#125; 修改元素 修改元素时，只需要将原有位置的元素替换掉即可，同样需要注意一下索引是否越界。 1234567891011121314/** * 设置index位置的元素 * * @param index * @param element * @return 原来的元素 */public E set(int index, E element) &#123; rangeCheck(index); E oldEle = elements[index]; elements[index] = element; return oldEle;&#125; 查询元素 查询元素，只需要将指定索引的元素返回，注意索引是否越界即可。 1234567891011/** * 获取index位置的元素 * * @param index * @return */public E get(int index) &#123; // 约束Index rangeCheck(index); return elements[index];&#125; 查看元素位置 可以通过循环, 查找元素在数组中的位置。 注意：假如数组中可以存储null，而null是不能调用equals方法的，所以需要对传入的元素进行判断，如果查找的元素是null，需要单独处理。 当元素存在时返回索引，否则返回变量ELEMENT_ON_FOUND的值。 12345678910111213141516171819202122/** * 查看元素的索引 * * @param element * @return */public int indexOf(E element) &#123; if (element == null) &#123; // 循环判断如果element为null,直接返回null的索引 for (int i = 0; i &lt; size; i++) &#123; if (elements[i] == null) return i; &#125; &#125; else &#123; for (int i = 0; i &lt; size; i++) &#123; // 因为element肯定不为null了,所以放在前面;避免空指针异常 if (element.equals(elements[i])) return i; &#125; &#125; return ELEMENT_NOT_FOUNT;&#125; 是否包含某元素 只需通过判断索引是否等于ELEMENT_ON_FOUND即可。 12345678910/** * 是否包含某个元素 * * @param element * @return */public boolean contains(E element) &#123; // 如果element元素可以找到 return indexOf(element) != ELEMENT_NOT_FOUNT;&#125; 元素的数量 size的值，即为元素的数量 12345678/** * 元素的数量 * * @return */public int size() &#123; return size;&#125; 数组是否为空 通过判断size的值是否为0即可 12345678/** * 是否为空 * * @return */public boolean inEmpty() &#123; return size == 0;&#125; 动态数组打印 可以重写toString方法, 来打印ArrayList中的元素。 123456789101112131415@Overridepublic String toString() &#123; // 打印格式: size=3, [10, 20, 30] // 使用StringBuilder 效率高一些 StringBuilder string = new StringBuilder(); string.append(\"size=\").append(size).append(\", [\"); for (int i = 0; i &lt; size; i++) &#123; string.append(elements[i]); if (i != size - 1) &#123; string.append(\", \"); &#125; &#125; string.append(\"]\"); return string.toString();&#125; 这样就实现了动态数组的基本操作。 ArrayList能否进一步优化？ 在ArrayList中，如果要删除索引0位置的元素，则需要将索引0之后的元素全部往前移一位。 如果要在索引0位置添加元素，也需要将索引0及之后的元素全部往后移一位。 在ArrayList中增加一个记录首元素位置的属性。 删除索引0位置的元素，我们只需要将first属性改为1。 -在索引0位置添加元素，则只需要将first属性改为0。 如果继续往前插入元素，则将插入的元素存放在索引8这个位置，并将first改为8。 当要获取索引8下一个元素时，对索引取模，则拿到索引0位置的元素。 如果插入元素，则可选择挪动前半段数据或后半段数据。 在索引2处插入元素99，可以选择将元素22，33左移，然后插入99即可。 扩容和缩容同样可以优化。 重点总结动态扩容思路通过默认容量创建的数组,是在堆空间中随机生成的地址;如此一来再申请空间拼接到该数组后,这种方式不可能实现;我们只能再创建一个大容量的数组,然后将之前数组中的元素移动到这个数组中;然后将引用指向新数组即可! 如何确保容量是否越界该方法确保默认容量为多少, 为了验证是否超过给定的默认容量,然后进行判断是否要扩容; 这里size+1为数组当前数量+1, 因为每次add都会增加一个容量。 1ensureCapacity(size + 1); 增加泛型使用泛型, 使动态数组可以添加任何类型的数据。 1elements = (E[]) new Object[capacity]; clear方法的过渡细节因为之前存储的都是int数据, 直接设置size=0时, 开辟的存储int类型的空间就不能被访问, 当add后, 就可以访问后面的空间, 所以此时的空间可以重复利用; 当使用泛型后, 动态数组中存储的都是对象类型, 实际存储的都是对象的地址, 每一个对象的地址又有一块空间引用着; 此时如果仍设置 size=0, 当clear后,开辟的存储空间中的地址没有被销毁, 地址仍被对象空间引用着; 这样以来存储对象的空间就不会被释放; 但是存储地址的数组可以重复利用; 所以要将地址数组都置为null, 然后size=0, 这样以来,引用该地址的对象空间也就释放了! remove、indexOf的细节remove最后一个地址也要情况, 同clear细节在indexOf方法中,不用==比较, 因为比较的是地址值,一般重写equals方法自己定义比较内容即可;null值处理: 当往数组传null的时候,indexOf的比较处理: 如果那null.equals来比较会出现空指针异常;","categories":[],"tags":[{"name":"dataAlgorithm","slug":"dataAlgorithm","permalink":"http://dqlcr5.coding-pages.com/tags/dataAlgorithm/"}]},{"title":"斐波那契数列","slug":"斐波那契数列","date":"2020-04-22T12:25:59.000Z","updated":"2020-06-06T09:12:23.104Z","comments":true,"path":"2020/04/22/斐波那契数列/","link":"","permalink":"http://dqlcr5.coding-pages.com/2020/04/22/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97/","excerpt":"斐波那契数列斐波那契数列（Fibonacci sequence），又称黄金分割数列、因数学家列昂纳多·斐波那契（Leonardoda Fibonacci）以兔子繁殖为例子而引入，故又称为“兔子数列”，指的是这样一个数列：1、1、2、3、5、8、13、21、34、……在数学上，斐波那契数列以如下被以递推的方法定义：F(1)=1，F(2)=1, F(n)=F(n - 1)+F(n - 2)（n ≥ 3，n ∈ N*）在现代物理、准晶体结构、化学等领域，斐波纳契数列都有直接的应用，为此，美国数学会从 1963 年起出版了以《斐波纳契数列季刊》为名的一份数学杂志，用于专门刊载这方面的研究成果。","text":"斐波那契数列斐波那契数列（Fibonacci sequence），又称黄金分割数列、因数学家列昂纳多·斐波那契（Leonardoda Fibonacci）以兔子繁殖为例子而引入，故又称为“兔子数列”，指的是这样一个数列：1、1、2、3、5、8、13、21、34、……在数学上，斐波那契数列以如下被以递推的方法定义：F(1)=1，F(2)=1, F(n)=F(n - 1)+F(n - 2)（n ≥ 3，n ∈ N*）在现代物理、准晶体结构、化学等领域，斐波纳契数列都有直接的应用，为此，美国数学会从 1963 年起出版了以《斐波纳契数列季刊》为名的一份数学杂志，用于专门刊载这方面的研究成果。 求：斐波那契数列的第n个数是？简单的代码就可以实现： 123456789101112131415161718/** * @Author: Wizard * @Date: 2020/4/22 20:38 */public class main &#123; /** * 斐波那契数列 * @param args */ public static void main(String[] args) &#123; System.out.println(fib(21)); &#125; public static int fib(int n) &#123; if (n &lt;= 1) return n; return fib(n - 1) + fib(n - 2); &#125;&#125; 运用递归的写法，可以实现但是有个缺点 我们可以用currentTimeMillis计算耗时 fib( 40 )： 1耗时5.16秒 换一种算法，不实现递归。 123456789101112131415161718192021/** * 0 1 2 3 4 5 6 * 0 1 1 2 4 8 16 * fr sd sum * fr sd * 思想是假设计算第3个斐波那契数时,用于计算的数是第一个数(fr)和第二个数(sd)相加,得到第三个数sum. * 那么计算第四个数是第三个数加第四个数,也就是sd和sum, 把sd和sum赋值给计算第四个数计算的时候的fr和sd * 就可以了.我们可以先把数列的第一个数first,第二个数second赋值为0,1.在进行for循环. * @param n * @return */public static int fib1(int n) &#123; if (n &lt;= 1) return n; int first = 0; int second = 1; for (int i = 0; i &lt; n - 1; i++) &#123; int sum = first + second; first = second; second = sum; &#125; return second; &#125; 当我们测试运行第123112340的数: 1耗时0.54秒 性能比递归高了不少.","categories":[],"tags":[{"name":"dataAlgorithm","slug":"dataAlgorithm","permalink":"http://dqlcr5.coding-pages.com/tags/dataAlgorithm/"}]},{"title":"Spring、SpringMVC、Mybatis整合","slug":"Spring、SpringMVC、Mybatis整合","date":"2020-04-20T13:05:31.000Z","updated":"2020-05-21T10:08:25.358Z","comments":true,"path":"2020/04/20/Spring、SpringMVC、Mybatis整合/","link":"","permalink":"http://dqlcr5.coding-pages.com/2020/04/20/Spring%E3%80%81SpringMVC%E3%80%81Mybatis%E6%95%B4%E5%90%88/","excerpt":"整合说明服务器开发分为三层,表现层、业务层、持久层表现层使用SpringMVC实现,业务程使用Spring实现,持久层使用Mybatis实现使用Spring框架来整合 SpringMVC和Mybatis框架这里使用xml配置文件+注解的方式进行搭建","text":"整合说明服务器开发分为三层,表现层、业务层、持久层表现层使用SpringMVC实现,业务程使用Spring实现,持久层使用Mybatis实现使用Spring框架来整合 SpringMVC和Mybatis框架这里使用xml配置文件+注解的方式进行搭建 最终目标最终实现通过前端页面对数据库进行查询和插入,实现用户的登录注册功能准备创建Maven工程 选择webapp 数据库准备1234567create database ssm;use ssm;create table account(id int primary key auto_increment,name varchar(20),money double); ####创建目录####导入依赖 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;groupId&gt;com.kayleh&lt;/groupId&gt; &lt;artifactId&gt;SSM&lt;/artifactId&gt; &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; &lt;packaging&gt;war&lt;/packaging&gt; &lt;name&gt;SSM Maven Webapp&lt;/name&gt; &lt;!-- FIXME change it to the project's website --&gt; &lt;url&gt;http://www.example.com&lt;/url&gt; &lt;!--版本锁定--&gt; &lt;properties&gt; &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt; &lt;maven.compiler.source&gt;1.7&lt;/maven.compiler.source&gt; &lt;maven.compiler.target&gt;1.7&lt;/maven.compiler.target&gt; &lt;spring.version&gt;5.0.2.RELEASE&lt;/spring.version&gt; &lt;slf4j.version&gt;1.6.6&lt;/slf4j.version&gt; &lt;log4j.version&gt;1.2.12&lt;/log4j.version&gt; &lt;mysql.version&gt;5.1.6&lt;/mysql.version&gt; &lt;mybatis.version&gt;3.4.5&lt;/mybatis.version&gt; &lt;/properties&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;junit&lt;/groupId&gt; &lt;artifactId&gt;junit&lt;/artifactId&gt; &lt;version&gt;4.11&lt;/version&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;!-- spring --&gt; &lt;dependency&gt; &lt;groupId&gt;org.aspectj&lt;/groupId&gt; &lt;artifactId&gt;aspectjweaver&lt;/artifactId&gt; &lt;version&gt;1.6.8&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-aop&lt;/artifactId&gt; &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-context&lt;/artifactId&gt; &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-web&lt;/artifactId&gt; &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt; &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-test&lt;/artifactId&gt; &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-tx&lt;/artifactId&gt; &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-jdbc&lt;/artifactId&gt; &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;junit&lt;/groupId&gt; &lt;artifactId&gt;junit&lt;/artifactId&gt; &lt;version&gt;4.12&lt;/version&gt; &lt;scope&gt;compile&lt;/scope&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; &lt;version&gt;$&#123;mysql.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;javax.servlet&lt;/groupId&gt; &lt;artifactId&gt;servlet-api&lt;/artifactId&gt; &lt;version&gt;2.5&lt;/version&gt; &lt;scope&gt;provided&lt;/scope&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;javax.servlet.jsp&lt;/groupId&gt; &lt;artifactId&gt;jsp-api&lt;/artifactId&gt; &lt;version&gt;2.0&lt;/version&gt; &lt;scope&gt;provided&lt;/scope&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;jstl&lt;/groupId&gt; &lt;artifactId&gt;jstl&lt;/artifactId&gt; &lt;version&gt;1.2&lt;/version&gt; &lt;/dependency&gt; &lt;!-- log start --&gt; &lt;dependency&gt; &lt;groupId&gt;log4j&lt;/groupId&gt; &lt;artifactId&gt;log4j&lt;/artifactId&gt; &lt;version&gt;$&#123;log4j.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.slf4j&lt;/groupId&gt; &lt;artifactId&gt;slf4j-api&lt;/artifactId&gt; &lt;version&gt;$&#123;slf4j.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.slf4j&lt;/groupId&gt; &lt;artifactId&gt;slf4j-log4j12&lt;/artifactId&gt; &lt;version&gt;$&#123;slf4j.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;!-- log end --&gt; &lt;dependency&gt; &lt;groupId&gt;org.mybatis&lt;/groupId&gt; &lt;artifactId&gt;mybatis&lt;/artifactId&gt; &lt;version&gt;$&#123;mybatis.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.mybatis&lt;/groupId&gt; &lt;artifactId&gt;mybatis-spring&lt;/artifactId&gt; &lt;version&gt;1.3.0&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;c3p0&lt;/groupId&gt; &lt;artifactId&gt;c3p0&lt;/artifactId&gt; &lt;version&gt;0.9.1.2&lt;/version&gt; &lt;type&gt;jar&lt;/type&gt; &lt;scope&gt;compile&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;build&gt; &lt;finalName&gt;SSM&lt;/finalName&gt; &lt;pluginManagement&gt;&lt;!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) --&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;artifactId&gt;maven-clean-plugin&lt;/artifactId&gt; &lt;version&gt;3.1.0&lt;/version&gt; &lt;/plugin&gt; &lt;!-- see http://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_war_packaging --&gt; &lt;plugin&gt; &lt;artifactId&gt;maven-resources-plugin&lt;/artifactId&gt; &lt;version&gt;3.0.2&lt;/version&gt; &lt;/plugin&gt; &lt;plugin&gt; &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt; &lt;version&gt;3.8.0&lt;/version&gt; &lt;/plugin&gt; &lt;plugin&gt; &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt; &lt;version&gt;2.22.1&lt;/version&gt; &lt;/plugin&gt; &lt;plugin&gt; &lt;artifactId&gt;maven-war-plugin&lt;/artifactId&gt; &lt;version&gt;3.2.2&lt;/version&gt; &lt;/plugin&gt; &lt;plugin&gt; &lt;artifactId&gt;maven-install-plugin&lt;/artifactId&gt; &lt;version&gt;2.5.2&lt;/version&gt; &lt;/plugin&gt; &lt;plugin&gt; &lt;artifactId&gt;maven-deploy-plugin&lt;/artifactId&gt; &lt;version&gt;2.8.2&lt;/version&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;/pluginManagement&gt; &lt;/build&gt;&lt;/project&gt; 编写实体类1234567891011121314151617181920package com.kayleh.domain;import java.io.Serializable;/** * @Author: Wizard * @Date: 2020/4/21 9:06 * * 账户 */public class Account implements Serializable &#123; private Integer id; private String name; private Double money; public Integer getId() &#123; return id; &#125; ......... public void setMoney(Double money) &#123; this.money = money; &#125;&#125; dao接口123456789101112131415package com.kayleh.dao;import com.kayleh.domain.Account;import java.util.List;/** * @Author: Wizard * @Date: 2020/4/21 9:11 * &lt;p&gt; * 账户dao接口 */public interface AccountDao &#123; //查询所有账户 public List&lt;Account&gt; findAll(); //保存账户信息 public void saveAccount(Account account);&#125; 业务service层和实现123456789101112131415161718192021222324252627282930313233package com.kayleh.service;import com.kayleh.domain.Account;import java.util.List;/** * @Author: Wizard * @Date: 2020/4/21 9:16 */public interface AccountService &#123; //查询所有账户 public List&lt;Account&gt; findAll(); //保存账户信息 public void saveAccount(Account account);&#125;-----------------------------------------------------package com.kayleh.service.impl;import com.kayleh.domain.Account;import com.kayleh.service.AccountService;import org.springframework.stereotype.Service;import java.util.List;/** * @Author: Wizard * @Date: 2020/4/21 9:18 */@Service(\"accountService\")public class AccountServiceImpl implements AccountService &#123; public List&lt;Account&gt; findAll() &#123; System.out.println(\"业务层:查询所有账户...\"); return null; &#125; public void saveAccount(Account account) &#123; System.out.println(\"业务层:保存账户...\"); &#125;&#125; Spring整合在resource下创建Spring配置文件####命名空间 12345678910111213 xmlns=\"http://www.springframework.org/schema/beans\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:context=\"http://www.springframework.org/schema/context\" xmlns:aop=\"http://www.springframework.org/schema/aop\" xmlns:tx=\"http://www.springframework.org/schema/tx\" xsi:schemaLocation=\"http://www.springframework.org/schema/beanshttp://www.springframework.org/schema/beans/spring-beans.xsdhttp://www.springframework.org/schema/contexthttp://www.springframework.org/schema/context/spring-context.xsdhttp://www.springframework.org/schema/aophttp://www.springframework.org/schema/aop/spring-aop.xsdhttp://www.springframework.org/schema/txhttp://www.springframework.org/schema/tx/spring-tx.xsd\"&gt; ####注解扫描 12345&lt;!-- 开启注解的扫描,希望处理service和dao,controller不需要Spring框架去处理,controller注解由SpringMVC处理 --&gt; &lt;context:component-scan base-package=\"com.kayleh\"&gt; &lt;!-- 配置哪些注解不扫描 --&gt; &lt;context:exclude-filter type=\"annotation\" expression=\"org.springframework.stereotype.Controller\"/&gt; &lt;/context:component-scan&gt; ####测试 1234567891011121314151617181920package com.kayleh.test;import com.kayleh.service.AccountService;import org.junit.Test;import org.springframework.context.ApplicationContext;import org.springframework.context.support.ClassPathXmlApplicationContext;/** * @Author: Wizard * @Date: 2020/4/21 9:38 */public class TestSpring &#123; @Test public void run1()&#123; //加载配置文件 ApplicationContext ac = new ClassPathXmlApplicationContext(\"classpath:applicationContext.xml\"); //获取对象 AccountService as = (AccountService) ac.getBean(\"accountService\"); //调用方法 as.findAll(); &#125;&#125; 运行测试,成功调用accountService 搭建和测试SpringMVC的开发环境1.在web.xml中配置DispatcherServlet前端控制器 12345678910111213141516&lt;!-- 配置前端控制器：服务器启动必须加载,需要加载springmvc.xml配置文件 --&gt;&lt;servlet&gt;&lt;servlet-name&gt;dispatcherServlet&lt;/servlet-name&gt;&lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;&lt;!-- 配置初始化参数,创建完DispatcherServlet对象,加载springmvc.xml配置文件 --&gt;&lt;init-param&gt;&lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;&lt;param-value&gt;classpath:springmvc.xml&lt;/param-value&gt;&lt;/init-param&gt;&lt;!-- 服务器启动的时候,让DispatcherServlet对象创建 --&gt;&lt;load-on-startup&gt;1&lt;/load-on-startup&gt;&lt;/servlet&gt;&lt;servlet-mapping&gt;&lt;servlet-name&gt;dispatcherServlet&lt;/servlet-name&gt;&lt;url-pattern&gt;/&lt;/url-pattern&gt;&lt;/servlet-mapping&gt; 2.在web.xml中配置DispatcherServlet过滤器解决中文乱码 12345678910111213&lt;!-- 配置解决中文乱码的过滤器 --&gt;&lt;filter&gt;&lt;filter-name&gt;characterEncodingFilter&lt;/filter-name&gt;&lt;filter-class&gt;org.springframework.web.filter.CharacterEncodingFilter&lt;/filter-class&gt;&lt;init-param&gt;&lt;param-name&gt;encoding&lt;/param-name&gt;&lt;param-value&gt;UTF-8&lt;/param-value&gt;&lt;/init-param&gt;&lt;/filter&gt;&lt;filter-mapping&gt;&lt;filter-name&gt;characterEncodingFilter&lt;/filter-name&gt;&lt;url-pattern&gt;/*&lt;/url-pattern&gt;&lt;/filter-mapping&gt; 3.创建springmvc.xml的配置文件,编写配置文件 12345678910111213141516171819202122232425262728293031&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;beans xmlns=\"http://www.springframework.org/schema/beans\" xmlns:mvc=\"http://www.springframework.org/schema/mvc\" xmlns:context=\"http://www.springframework.org/schema/context\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.springframework.org/schema/beanshttp://www.springframework.org/schema/beans/spring-beans.xsdhttp://www.springframework.org/schema/mvchttp://www.springframework.org/schema/mvc/spring-mvc.xsdhttp://www.springframework.org/schema/contexthttp://www.springframework.org/schema/context/spring-context.xsd\"&gt; &lt;!-- 开启注解扫描 --&gt; &lt;context:component-scan base-package=\"com.kayleh\"&gt; &lt;context:include-filter type=\"annotation\" expression=\"org.springframework.stereotype.Controller\"/&gt; &lt;/context:component-scan&gt; &lt;!--配置的视图解析器对象--&gt; &lt;bean id=\"internalResourceViewResolver\" class=\"org.springframework.web.servlet.view.InternalResourceViewResolver\"&gt; &lt;property name=\"prefix\" value=\"/WEB-INF/pages/\"/&gt; &lt;property name=\"suffix\" value=\".jsp\"/&gt; &lt;/bean&gt; &lt;!--过滤静态资源--&gt; &lt;mvc:resources mapping=\"/CSS/**\" location=\"/CSS/\"/&gt; &lt;mvc:resources mapping=\"/images/**\" location=\"/images/\"/&gt; &lt;mvc:resources mapping=\"/js/**\" location=\"/js/\"/&gt; &lt;!--开启SpringMVC的注解支持--&gt; &lt;mvc:annotation-driven/&gt;&lt;/beans&gt; 测试SpringMVC的框架搭建是否成功1.编写index.jsp和list.jsp编写,超链接 自带的index.jsp没有头部信息，需要重新创建1&lt;a href=\"account/findAll\"&gt;查询所有&lt;/a&gt; 2.创建AccountController类,编写方法,进行测试 12345678910111213141516package cn.kayleh.controller;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.RequestMapping;@Controller@RequestMapping(\"/account\")public class AccountController &#123;/*** 查询所有的数据* @return*/@RequestMapping(\"/findAll\")public String findAll() &#123;System.out.println(\"表现层：查询所有账户...\");return \"list\";&#125;&#125; ##Spring整合SpringMVC的框架 目的：在controller中能成功的调用service对象中的方法. 在项目启动的时候,就去加载applicationContext.xml的配置文件,在web.xml中配置ContextLoaderListener监听器（该监听器只能加载WEB-INF目录下的applicationContext.xml的配置文件）。123456789&lt;!-- 配置Spring的监听器 --&gt;&lt;listener&gt;&lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listenerclass&gt;&lt;/listener&gt;&lt;!-- 配置加载类路径的配置文件 --&gt;&lt;context-param&gt;&lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;&lt;param-value&gt;classpath:applicationContext.xml&lt;/param-value&gt;&lt;/context-param&gt; 在controller中注入service对象,调用service对象的方法进行测试123456789101112131415161718192021package cn.itcast.controller;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.RequestMapping;import cn.kayleh.service.AccountService;@Controller@RequestMapping(\"/account\")public class AccountController &#123; @Autowired private AccountService accoutService;/*** 查询所有的数据* @return*/@RequestMapping(\"/findAll\")public String findAll() &#123;System.out.println(\"表现层：查询所有账户...\");accoutService.findAll();return \"list\"; &#125;&#125; Spring整合MyBatis框架搭建和测试MyBatis的环境在web项目中编写SqlMapConfig.xml的配置文件，编写核心配置文件,在后面整合进applicationContext.xml后可以删除1234567891011121314151617181920212223&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;!DOCTYPE configurationPUBLIC \"-//mybatis.org//DTD Config 3.0//EN\"\"http://mybatis.org/dtd/mybatis-3-config.dtd\"&gt;&lt;configuration&gt;&lt;environments default=\"mysql\"&gt;&lt;environment id=\"mysql\"&gt;&lt;transactionManager type=\"JDBC\"/&gt;&lt;dataSource type=\"POOLED\"&gt;&lt;property name=\"driver\" value=\"com.mysql.jdbc.Driver\"/&gt;&lt;property name=\"url\" value=\"jdbc:mysql:///ssm\"/&gt;&lt;property name=\"username\" value=\"root\"/&gt;&lt;property name=\"password\" value=\"admin\"/&gt;&lt;/dataSource&gt;&lt;/environment&gt;&lt;/environments&gt;&lt;!-- 使用的是注解 --&gt;&lt;mappers&gt;&lt;!-- &lt;mapper class=\"cn.kayleh.dao.AccountDao\"/&gt; --&gt;&lt;!-- 该包下所有的dao接口都可以使用 --&gt;&lt;package name=\"cn.kayleh.dao\"/&gt;&lt;/mappers&gt;&lt;/configuration&gt; #####在AccountDao接口的方法上添加注解，编写SQL语句 123456789101112131415161718192021222324252627package com.kayleh.dao;import com.kayleh.domain.Account;import org.apache.ibatis.annotations.Insert;import org.apache.ibatis.annotations.Select;import org.springframework.stereotype.Repository;import java.util.List;/** * @Author: Wizard * @Date: 2020/4/21 9:11 * &lt;p&gt; * 账户dao接口 */@Repositorypublic interface AccountDao &#123; //查询所有账户 @Select(\"select * from account\") public List&lt;Account&gt; findAll(); //保存账户信息 @Insert(\"insert into account(name,money) values (#&#123;name&#125;,#&#123;money&#125;)\") public void saveAccount(Account account);&#125; 编写测试的方法1234567891011121314151617181920package com.kayleh.test;import com.kayleh.service.AccountService;import org.junit.Test;import org.springframework.context.ApplicationContext;import org.springframework.context.support.ClassPathXmlApplicationContext;/** * @Author: Wizard * @Date: 2020/4/21 9:38 */public class TestSpring &#123; @Test public void run1()&#123; //加载配置文件 ApplicationContext ac = new ClassPathXmlApplicationContext(\"classpath:applicationContext.xml\"); //获取对象 AccountService as = (AccountService) ac.getBean(\"accountService\"); //调用方法 as.findAll(); &#125;&#125; Spring整合MyBatis框架#####目的：把SqlMapConfig.xml配置文件中的内容配置到applicationContext.xml配置文件中 1234567891011121314151617181920 &lt;!--Srping整合MyBatis框架--&gt; &lt;!--配置连接池--&gt; &lt;!--引入外部配置文件--&gt;&lt;!-- &lt;context:property-placeholder location=\"classpath:jdbc.properties\"/&gt;--&gt; &lt;bean id=\"ds\" class=\"com.mchange.v2.c3p0.ComboPooledDataSource\"&gt; &lt;property name=\"driverClass\" value=\"com.mysql.jdbc.Driver\"/&gt; &lt;property name=\"jdbcUrl\" value=\"jdbc:mysql:///ssm\"/&gt;&lt;!--省略了localhost:3306--&gt; &lt;property name=\"user\" value=\"root\"/&gt; &lt;property name=\"password\" value=\"admin\"/&gt; &lt;/bean&gt; &lt;!--配置SqlSessionFactory工厂--&gt; &lt;bean id=\"sqlSessionFactory\" class=\"org.mybatis.spring.SqlSessionFactoryBean\"&gt; &lt;property name=\"dataSource\" ref=\"ds\"/&gt; &lt;/bean&gt; &lt;!--配置AccountDao接口所在包--&gt; &lt;bean id=\"mapperScannerConfigurer\" class=\"org.mybatis.spring.mapper.MapperScannerConfigurer\"&gt; &lt;property name=\"basePackage\" value=\"com.kayleh.dao\" /&gt; &lt;/bean&gt; 在AccountDao接口中添加@Repository注解在service中注入dao对象，进行测试123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101package com.kayleh.dao;import com.kayleh.domain.Account;import org.apache.ibatis.annotations.Insert;import org.apache.ibatis.annotations.Select;import org.springframework.stereotype.Repository;import java.util.List;/** * @Author: Wizard * @Date: 2020/4/21 9:11 * &lt;p&gt; * 账户dao接口 */@Repositorypublic interface AccountDao &#123; //查询所有账户 @Select(\"select * from account\") public List&lt;Account&gt; findAll(); //保存账户信息 @Insert(\"insert into account(name,money) values (#&#123;name&#125;,#&#123;money&#125;)\") public void saveAccount(Account account);&#125;-------------------------------------------------------------package com.kayleh.service.impl;import com.kayleh.dao.AccountDao;import com.kayleh.domain.Account;import com.kayleh.service.AccountService;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import java.util.List;/** * @Author: Wizard * @Date: 2020/4/21 9:18 */@Service(\"accountService\")public class AccountServiceImpl implements AccountService &#123; @Autowired private AccountDao accountDao; public List&lt;Account&gt; findAll() &#123; System.out.println(\"业务层:查询所有账户...\"); return accountDao.findAll(); &#125; public void saveAccount(Account account) &#123; System.out.println(\"业务层:保存账户...\"); accountDao.saveAccount(account); &#125;&#125;-------------------------------------------------------------package com.kayleh.controller;import com.kayleh.domain.Account;import com.kayleh.service.AccountService;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.ui.Model;import org.springframework.web.bind.annotation.RequestMapping;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import javax.xml.ws.RequestWrapper;import java.io.IOException;import java.util.List;/** * @Author: Wizard * @Date: 2020/4/21 9:21 * &lt;p&gt; * 用户web层 */@Controller@RequestMapping(\"/account\")public class AccountController &#123; @Autowired private AccountService accountService; @RequestMapping(\"/findAll\") public String findAll(Model model) &#123; System.out.println(\"表现层:查询所有的账户...\"); List&lt;Account&gt; list = accountService.findAll(); model.addAttribute(\"list\", list); return \"list\"; &#125; 配置Spring的声明式事务管理1234567891011121314151617181920applicationContext.xml &lt;!-- 配置Spring框架声明式事务管理 --&gt; &lt;!-- 配置事务管理器 --&gt; &lt;bean id=\"transactionManager\" class=\"org.springframework.jdbc.datasource.DataSourceTransactionManager\"&gt; &lt;property name=\"dataSource\" ref=\"ds\"/&gt; &lt;/bean&gt; &lt;!-- 配置事务通知 --&gt; &lt;tx:advice id=\"txAdvice\" transaction-manager=\"transactionManager\"&gt; &lt;tx:attributes&gt; &lt;tx:method name=\"find*\" read-only=\"true\"/&gt; &lt;tx:method name=\"*\" isolation=\"DEFAULT\"/&gt; &lt;/tx:attributes&gt; &lt;/tx:advice&gt; &lt;!-- 配置AOP增强 --&gt; &lt;aop:config&gt; &lt;aop:advisor advice-ref=\"txAdvice\" pointcut=\"execution(* com.kayleh.service.impl.*ServiceImpl.*(..))\"/&gt; &lt;/aop:config&gt; 123456789101112131415/** * 保存 * * @param account * @return */ @RequestMapping(\"/save\") public void save(Account account, HttpServletRequest request, HttpServletResponse response) throws Exception &#123; System.out.println(\"表现层:查询所有的账户...\"); accountService.saveAccount(account); response.sendRedirect(request.getContextPath() + \"/account/findAll\"); return; &#125;","categories":[],"tags":[{"name":"frame","slug":"frame","permalink":"http://dqlcr5.coding-pages.com/tags/frame/"}]},{"title":"回文数","slug":"回文数","date":"2020-04-19T13:17:57.000Z","updated":"2020-06-06T10:15:54.188Z","comments":true,"path":"2020/04/19/回文数/","link":"","permalink":"http://dqlcr5.coding-pages.com/2020/04/19/%E5%9B%9E%E6%96%87%E6%95%B0/","excerpt":"什么是回文数？回文数指的是正序和倒序读都是一样的数，例如121从左到右，从右到左读都是121。任何一个自然数与它的倒序数相加，所得的和再与和的倒序数相加，……如此反复进行下去，经过有限次步骤后，最后必定能得到一个回文数。","text":"什么是回文数？回文数指的是正序和倒序读都是一样的数，例如121从左到右，从右到左读都是121。任何一个自然数与它的倒序数相加，所得的和再与和的倒序数相加，……如此反复进行下去，经过有限次步骤后，最后必定能得到一个回文数。 问题：判断一个数是否为回文数，是返回true，否侧抛出false。1234567891011121314151617181920212223242526272829303132@题目来源lettcode利用Java的StringBuilder通过把整数转换为字符串来实现↓import java.util.Scanner;/** * @Author: Wizard * @Date: 2020/4/12 13:14 */public class palindrome &#123; public static boolean ispalindrome(int i) &#123; String str = (new StringBuilder(i + \"\")).reverse().toString(); return (i + \"\").equals(str); &#125; public static void main(String[] args) &#123; while (true) &#123; System.out.println(\"输入需要判断的整数\"); Scanner scanner = new Scanner(System.in); int str1 = scanner.nextInt(); System.out.println(ispalindrome(str1)); &#125; &#125;&#125;/** * 输入需要判断的整数：1 * false * 输入需要判断的整数：12121 * true */ 123456789101112131415161718192021222324252627进阶：不改变整数为字符串通过取整和取余获取整数中的数字进行比较/** * @Author: Wizard * @Date: 2020/4/12 13:14 */public class palindrome &#123; public static boolean ispalindrome(int i) &#123; if(i&lt;0||(i%10==0&amp;&amp;i!=0)) return false; int number = 0; while(i&gt;number)&#123; number = number * 10 + i % 10; i /=10; &#125; return i == number || i==number/10; &#125; public static void main(String[] args) &#123; while (true) &#123; System.out.println(\"输入需要判断的整数\"); Scanner scanner = new Scanner(System.in); int str1 = scanner.nextInt(); System.out.println(ispalindrome(str1)); &#125; &#125;&#125; 微信公众号:每日学习干货↓&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;","categories":[],"tags":[{"name":"dataAlgorithm","slug":"dataAlgorithm","permalink":"http://dqlcr5.coding-pages.com/tags/dataAlgorithm/"}]},{"title":"【SpringMVC】-@ModelAttribute","slug":"【SpringMVC】-@ModelAttribute","date":"2020-04-19T13:04:07.000Z","updated":"2020-05-21T10:07:53.130Z","comments":true,"path":"2020/04/19/【SpringMVC】-@ModelAttribute/","link":"","permalink":"http://dqlcr5.coding-pages.com/2020/04/19/%E3%80%90SpringMVC%E3%80%91-@ModelAttribute/","excerpt":"@ModelAttribute？@ModelAttribute的原理比较复杂，需要对源码有一定的理解。它可以使被","text":"@ModelAttribute？@ModelAttribute的原理比较复杂，需要对源码有一定的理解。它可以使被 @ModelAttribute修饰的方法在控制器的处理方法之前调用。但如果@ModelAttribute标注在方法的入参前，它可以从隐含对象中获取隐含的模型数据中获取对象，再将请求参数绑定到对象中，再传入入参。 实际场景：Spring在进行数据库update全字段更新操作提交表单的时候，从页面获取的数据会封装成一个new的pojo对象，没有带的值为null；所以我们只能更新我们提交的数据。ModelAttribute暂时保存表单pojo对象，覆盖数据库保存的pojo对象的数据即可。 1234567891011121314151617181920ModelAttribute提前与目标方法运行/** * @author Kayleh */@Controllerpublic class ModelAttributeTest &#123; @RequestMapping(\"/update\") public String update()&#123; System.out.println(\"页面update的bean对象：\"+bean); &#125; @ModelAttribute public void modelAttribute()&#123; System.out.println(\"ModelAttribute调用了...\"); &#125;===========输出=========ModelAttribute调用了...页面update的bean对象：bean&#123;......&#125; 可以得出：ModelAttribute标注的方法总会在目标方法(update)前执行。ModelAttribute可以取出隐含对象的值1234567891011121314151617@ModelAttribute public void TestModelAttribute(Map&lt;String, Object&gt; map)&#123; POJO pojo = new POJO(\"kayleh\", 1104); map.put(\"value\",pojo); System.out.println(\"modelAttribute方法...); &#125;@RequestMapping(\"/updateBook\") public String updateBook(@RequestParam(value=\"author\")String author, Map&lt;String, Object&gt; model, HttpServletRequest request, @ModelAttribute(\"value\")POJO pojo )&#123; System.out.println(pojo); return \"ok\"; &#125; @ModelAttribute(“value”)这里如果指定的”value”,value就是从map取出参数的key.如果是@ModelAttribute,没有指定key,SpringMVC会默认使用返回值类型的首字母小写作为key.如pOJO. 微信公众号:每日学习干货↓&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;","categories":[],"tags":[{"name":"frame","slug":"frame","permalink":"http://dqlcr5.coding-pages.com/tags/frame/"}]},{"title":"Spring架构","slug":"Spring架构","date":"2020-04-19T12:40:54.000Z","updated":"2020-05-21T10:08:19.842Z","comments":true,"path":"2020/04/19/Spring架构/","link":"","permalink":"http://dqlcr5.coding-pages.com/2020/04/19/Spring%E6%9E%B6%E6%9E%84/","excerpt":"","text":"微信公众号:每日学习干货","categories":[],"tags":[{"name":"frame","slug":"frame","permalink":"http://dqlcr5.coding-pages.com/tags/frame/"}]},{"title":"并发:原理","slug":"并发：原理","date":"2020-04-19T03:32:02.990Z","updated":"2020-04-22T06:51:27.589Z","comments":true,"path":"2020/04/19/并发：原理/","link":"","permalink":"http://dqlcr5.coding-pages.com/2020/04/19/%E5%B9%B6%E5%8F%91%EF%BC%9A%E5%8E%9F%E7%90%86/","excerpt":"多线程为什么要创建线程池1如果系统要运行多个线程,大量反复的启动创建和回收线程会非常占用系统资源,导致性能下降.","text":"多线程为什么要创建线程池1如果系统要运行多个线程,大量反复的启动创建和回收线程会非常占用系统资源,导致性能下降. 创建线程池,可以:1.降低资源消耗2.提升响应速度3.提高 线程池原理1234提交一个任务到线程池中,线程池的处理流程如下:1.判断线程池里的核心线程是否都在执行任务,如果不是(核心线程空闲或者核心线程没有被创建)则创建一个新的工作线程来执行任务.如果核心线程都在执行任务,则进入下个流程.2.线程池判断工作队列是否已满,如果工作路径没有满,则新提交的任务储存在这个工作队列里.如果工作队列满了,则进入下个流程.3.判断线程池里的线程是否都处于工作状态,如果没有,则创建一个新的工作线程来执行任务.如果已经满了,则交给饱和策略来处理这个任务. 线程池的分类1234567public ThreadPoolExecutor(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit, BlockingQueue&lt;Runnable&gt; workQueue, ThreadFactory threadFactory, RejectedExecutionHandler handler); ThreadPoolExecutor是线程池的真正实现,他通过构造方法的一系列参数，来构成不同配置的线程池。corePoolSize： 核心池的大小。 当有任务来之后，就会创建一个线程去执行任务，当线程池中的线程数目达到corePoolSize后，就会把到达的任务放到缓存队列当中maximumPoolSize： 线程池最大线程数，它表示在线程池中最多能创建多少个线程；keepAliveTime： 表示线程没有任务执行时最多保持多久时间会终止。unit： 参数keepAliveTime的时间单位，有7种取值，在TimeUnit类中有7种静态属性。workQueue：一个阻塞队列，提交的任务将会被放到这个队列里。threadFactory：线程工厂，用来创建线程，主要是为了给线程起名字，默认工厂的线程名字：pool-1-thread-3。handler：拒绝策略，当线程池里线程被耗尽，且队列也满了的时候会调用。 线程池的创建方法Java通过Executors（jdk1.5并发包）提供四种线程池，分别为： newCachedThreadPool创建一个可缓存线程池，如果线程池长度超过处理需要，可灵活回收空闲线程，若无可回收，则新建线程。案例演示: newFixedThreadPool 创建一个定长线程池，可控制线程最大并发数，超出的线程会在队列中等待。 newScheduledThreadPool 创建一个定长线程池，支持定时及周期性任务执行。 newSingleThreadExecutor 创建一个单线程化的线程池，它只会用唯一的工作线程来执行任务，保证所有任务按照指定顺序(FIFO, LIFO, 优先级)执行。 12345678910111213141516171819202122232425262728293031323334newCachedThreadPool创建一个可缓存线程池，如果线程池长度超过处理需要，可灵活回收空闲线程，若无可回收，则新建线程。package cn.qbz.thread;import java.util.concurrent.ExecutorService;import java.util.concurrent.Executors;public class Test111907 &#123; public static void main(String[] args) &#123; ExecutorService executorService = Executors.newCachedThreadPool(); for (int i = 0; i &lt; 10; i++) &#123; final int temp = i; executorService.execute(new Runnable() &#123; @Override public void run() &#123; try &#123; Thread.sleep(1000); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; System.out.println(Thread.currentThread().getName() + \" i=\" + temp); &#125; &#125;); &#125; &#125;&#125; public static ExecutorService newCachedThreadPool() &#123; return new ThreadPoolExecutor(0, Integer.MAX_VALUE, 60L, TimeUnit.SECONDS, new SynchronousQueue&lt;Runnable&gt;()); &#125; 12345678910111213141516171819202122232425262728293031323334newFixedThreadPool创建一个定长线程池，可控制线程最大并发数，超出的线程会在队列中等待。package cn.qbz.thread;import java.util.concurrent.ExecutorService;import java.util.concurrent.Executors;public class Test111907 &#123; public static void main(String[] args) &#123; ExecutorService executorService = Executors.newFixedThreadPool(3); for (int i = 0; i &lt; 10; i++) &#123; final int temp = i; executorService.execute(new Runnable() &#123; @Override public void run() &#123; try &#123; Thread.sleep(100); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; System.out.println(Thread.currentThread().getName() + \" i=\" + temp); &#125; &#125;); &#125; &#125;&#125; public static ExecutorService newFixedThreadPool(int nThreads) &#123; return new ThreadPoolExecutor(nThreads, nThreads, 0L, TimeUnit.MILLISECONDS, new LinkedBlockingQueue&lt;Runnable&gt;()); &#125; 1234567891011121314151617181920212223242526272829303132333435363738newScheduledThreadPool创建一个定长线程池，支持定时及周期性任务执行。package cn.qbz.thread;import java.util.concurrent.ExecutorService;import java.util.concurrent.Executors;import java.util.concurrent.ScheduledExecutorService;import java.util.concurrent.TimeUnit;public class Test111907 &#123; public static void main(String[] args) &#123; final long begin = System.currentTimeMillis(); ExecutorService executorService = Executors.newScheduledThreadPool(3); for (int i = 0; i &lt; 10; i++) &#123; final int temp = i; final long time = begin; executorService.schedule(new Runnable() &#123; @Override public void run() &#123; try &#123; Thread.sleep(100); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; System.out.println(Thread.currentThread().getName() + \" i=\" + temp + \" time=\" + (System.currentTimeMillis() - time)); &#125; &#125;, 5, TimeUnit.SECONDS); &#125; &#125;&#125; public static ScheduledExecutorService newScheduledThreadPool(int corePoolSize) &#123; return new ScheduledThreadPoolExecutor(corePoolSize); &#125; public ScheduledThreadPoolExecutor(int corePoolSize) &#123; super(corePoolSize, Integer.MAX_VALUE, 0, TimeUnit.NANOSECONDS, new DelayedWorkQueue()); &#125; 12345678910111213141516171819202122newSingleThreadExecutor创建一个单线程化的线程池，它只会用唯一的工作线程来执行任务，保证所有任务按照指定顺序(FIFO, LIFO, 优先级)执行。public class Test111907 &#123; public static void main(String[] args) &#123; ExecutorService executorService = Executors.newSingleThreadExecutor(); for (int i = 0; i &lt; 10; i++) &#123; final int temp = i; executorService.execute(new Runnable() &#123; @Override public void run() &#123; try &#123; Thread.sleep(100); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; System.out.println(Thread.currentThread().getName() + \" i=\" + temp); &#125; &#125;); &#125; &#125;&#125; 微信公众号:每日学习干货","categories":[],"tags":[]},{"title":"unix的常用指令","slug":"unix","date":"2020-04-19T03:24:46.854Z","updated":"2020-04-19T04:28:07.834Z","comments":true,"path":"2020/04/19/unix/","link":"","permalink":"http://dqlcr5.coding-pages.com/2020/04/19/unix/","excerpt":"unix的常用指令","text":"unix的常用指令 1234567891011121314ls 显示指定目录下的文件目录清单相当于dos下的dir命令。pwd 显示当前目录。mkdir 在当前目录下创建目录。rm 删除文件或目录。cp 复制文件。mv 移动文件。cd 切换工作目录。ps 查看进程。ftp 传送文件。telnet 远程登录命令。ping 用来测试本机与目标主机是否联通。env 查看当前系统中的环境变量。more 分屏显示指定文件的内容。echo在终端上显示你要显示的内容，向C语言中的printf函数。 微信公众号:每日学习干货","categories":[],"tags":[]},{"title":"Rest架构风格","slug":"Rest架构/Rest架构","date":"2020-04-18T08:26:55.693Z","updated":"2020-04-18T08:35:41.496Z","comments":true,"path":"2020/04/18/Rest架构/Rest架构/","link":"","permalink":"http://dqlcr5.coding-pages.com/2020/04/18/Rest%E6%9E%B6%E6%9E%84/Rest%E6%9E%B6%E6%9E%84/","excerpt":"Rest是什么?12REST(Representational State Transfe),是一种软件架构风格，它结构清晰、符合标准、易于理解、扩展方便，并且规范了URI的风格；规范了HTTP请求动作的使用，具有对应的语义。Spring支持并推荐使用这种风格的URL地址。他可以处理除POST或GET的其他请求.rest可以把普通的请求转化(如:GET.POST)为规定形式的请求(DELETE等等),使URL请求地址状态化.","text":"Rest是什么?12REST(Representational State Transfe),是一种软件架构风格，它结构清晰、符合标准、易于理解、扩展方便，并且规范了URI的风格；规范了HTTP请求动作的使用，具有对应的语义。Spring支持并推荐使用这种风格的URL地址。他可以处理除POST或GET的其他请求.rest可以把普通的请求转化(如:GET.POST)为规定形式的请求(DELETE等等),使URL请求地址状态化. Rest实现配置web.xml文件,添加一个Filter过滤器1234567891011121314151617&lt;filter&gt; &lt;!--HiddenHttpMethodFilter继承HttpServletRequest类--&gt; &lt;filter-name&gt;HiddenHttpMethodFilter&lt;/filter-name&gt; &lt;filter-class&gt;org.springframework.web.filter.HiddenHttpMethodFilter&lt;/filter-class&gt; &lt;/filter&gt; &lt;filter-mapping&gt; &lt;filter-name&gt;HiddenHttpMethodFilter&lt;/filter-name&gt; &lt;url-pattern&gt;/*&lt;/url-pattern&gt; &lt;/filter-mapping&gt; &lt;!--要想获取其他类型的请求,要先创建一个form表单--&gt;&lt;form action=\"pojo/1\" method=\"post\"&gt; &lt;!--添加一个_method参数,它的值就是请求的类型--&gt; &lt;input name=\"_method\" value=\"delete\"&gt; &lt;input type=\"submit\" value=\"删除请求\"&gt; &lt;/form&gt; 注意≥8.0版本的Tomcat服务器Filter会拦截JSP页面,这种情况需要在index.jsp页面加上这个约定.isErrorPage=”true”12&lt;%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"% isErrorPage=\"true\"&gt; 没有HiddenHttpMethodFilter的提示话,需要绑定源码jar包.微信公众号:每日学习干货","categories":[],"tags":[]},{"title":"SpringMVC环境搭建","slug":"SpringMVC环境搭建","date":"2020-04-17T11:59:30.293Z","updated":"2020-05-21T10:08:15.476Z","comments":true,"path":"2020/04/17/SpringMVC环境搭建/","link":"","permalink":"http://dqlcr5.coding-pages.com/2020/04/17/SpringMVC%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/","excerpt":"什么是SpringMVC？12345Spring MVC是Spring Framework的一部分，是基于Java实现MVC的轻量级Web框架，实现MVC模块，简化了Web开发。MVC提倡每一层只写自己的东西，不写其他任何代码。为了解耦，为了维护方便和分工合作。SpringMVC为展现层提供的基于MVC设计理念的优秀Web框架，是目前最主流的框架之一。","text":"什么是SpringMVC？12345Spring MVC是Spring Framework的一部分，是基于Java实现MVC的轻量级Web框架，实现MVC模块，简化了Web开发。MVC提倡每一层只写自己的东西，不写其他任何代码。为了解耦，为了维护方便和分工合作。SpringMVC为展现层提供的基于MVC设计理念的优秀Web框架，是目前最主流的框架之一。 环境搭建1.导包(Maven工程忽略) 需要导入log包，spring核心包，SpringMVC包 1234567891.junit-x.x.x.jar 2.spring-webmvc-x.x.x.RELEASE.jar3.spring-aop-x.x.x.RELEASE.jar4.spring-beans-x.x.x.RELEASE.jar5.spring-context-x.x.x.RELEASE.jar6.spring-core-x.x.x.RELEASE.jar7.spring-expression-x.x.x.RELEASE.jar8.spring-web-x.x.x.RELEASE.jar9.commons-log-.x.x.x.RELEASE.jar 写配置1234567891011121314151617181920212223242526272829303132333435363738394041/** * web.xml */&lt;servlet&gt; &lt;servlet-name&gt;springDispatcherServlet&lt;/servlet-name&gt; &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt; &lt;init-param&gt; &lt;!-- contextConfigLocation：指定SpringMVC配置文件位置 --&gt; &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt; &lt;param-value&gt;classpath:springmvc.xml&lt;/param-value&gt; &lt;/init-param&gt; &lt;load-on-startup&gt;1&lt;/load-on-startup&gt; &lt;/servlet&gt; &lt;servlet-mapping&gt; &lt;servlet-name&gt;springDispatcherServlet&lt;/servlet-name&gt; &lt;url-pattern&gt;/&lt;/url-pattern&gt; &lt;/servlet-mapping&gt; =========================================================== /** * springmvc.xml */ &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;beans xmlns=\"http://www.springframework.org/schema/beans\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:context=\"http://www.springframework.org/schema/context\" xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd\"&gt; &lt;!-- 这里是扫描所有组件 --&gt; &lt;context:component-scan base-package=\"com.wizard\"&gt;&lt;/context:component-scan&gt; &lt;!-- 配置一个视图解析器 作用是拼接页面的地址，方便调用--&gt; &lt;bean class=\"org.springframework.web.servlet.view.InternalResourceViewResolver\"&gt; &lt;!--前缀--&gt; &lt;property name=\"prefix\" value=\"/WEB-INF/page/\"&gt;&lt;/property&gt; &lt;!--后缀--&gt; &lt;property name=\"suffix\" value=\".jsp\"&gt;&lt;/property&gt; &lt;/bean&gt; &lt;/beans&gt; 12345678910111213141516/**view层*/&lt;%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%&gt;&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\"&gt;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"&gt;&lt;title&gt;Insert title here&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;来了!&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt; 123456789101112131415161718控制器层/** * @author Kayleh * @Controller:标识哪个组件是控制器 *@RequestMapping * 告诉SpringMVC，这个方法用来处理什么请求; */@Controllerpublic class firstController &#123;//这是一次转发操作 @RequestMapping(\"/hello\") public String firstRequest()&#123; System.out.println(\"收到请求\"); return \"success\"; &#125;&#125; 12345678910111213index.jsp&lt;%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%&gt;&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\"&gt;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"&gt;&lt;title&gt;Insert title here&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;a href=\"hello\"&gt;Hello bug&lt;/a&gt;&lt;/body&gt;&lt;/html&gt; 运行结果1Hello bug 其他细节细节：@RequestMapping注解不仅可以写在方法前,还可以写在类前,如果写在类前,意思为当前类所有的方法的请求地址指定一个基准路径,访问firstRequest方法的路径为/类前的注解/方法的注解(/hello). @RequestMapping注解的参数(“/hello”)的/可以不写,但习惯为了方便维护应该写上. 控制器处理的请求 firstController 是请求转发操作,Tomcat访问地址栏不变 如果前端控制器没有指定配置文件位置,Spring也会在/WEB-INF/xxx-servlet.xml路径下查找文件.xxx为web.xml配置的前端控制器 详细流程 1.客户端点击链接会发送http://localhost:8080/springmvc/hello请求 2.来到Tomcat服务器 3.springMVC的前端控制器收到所有请求 4.看请求地址和@RequestMapping标注的哪个匹配,来找到使用什么类的什么方法 5.前端控制器找到了目标处理器类和目标方法,直接利用反射执行目标方法 6.方法执行完成之后会有一个返回值;SpringMVC认为这个返回值就是要去的页面 7.拿到方法返回值后,用视图解析器进行拼串得到完整的页面地址 8.拿到页面地址,前端控制器转发到页面 其他问题?1为什么web.xml中配置的拦截为 1234&lt;servlet-mapping&gt; &lt;servlet-name&gt;springDispatcherServlet&lt;/servlet-name&gt; &lt;url-pattern&gt;/&lt;/url-pattern&gt; &lt;/servlet-mapping&gt; 为什么没有拦截index.jsp?? 因为Tomcat的底层本来就能拦截jsp页面,配置的”/“的子类web.xml相当于覆盖了Webapp的父类web.xml中的DefaultServlet,DefaultServlet的作用是处理静态资源,覆盖了DefaultServlet,也就拦截了除jsp和servlet外的静态资源,而JspServlet的配置并没有覆盖. 而”/*”的作用是拦截所有请求,包括jsp页面.","categories":[],"tags":[{"name":"frame","slug":"frame","permalink":"http://dqlcr5.coding-pages.com/tags/frame/"}]},{"title":"Hello World","slug":"HelloWord/hello-world","date":"2020-04-17T10:42:52.221Z","updated":"2020-04-18T03:49:01.872Z","comments":true,"path":"2020/04/17/HelloWord/hello-world/","link":"","permalink":"http://dqlcr5.coding-pages.com/2020/04/17/HelloWord/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[],"tags":[{"name":"C","slug":"C","permalink":"http://dqlcr5.coding-pages.com/tags/C/"},{"name":"sql","slug":"sql","permalink":"http://dqlcr5.coding-pages.com/tags/sql/"},{"name":"Operating Systems","slug":"Operating-Systems","permalink":"http://dqlcr5.coding-pages.com/tags/Operating-Systems/"},{"name":"dataAlgorithm","slug":"dataAlgorithm","permalink":"http://dqlcr5.coding-pages.com/tags/dataAlgorithm/"},{"name":"Concurrency","slug":"Concurrency","permalink":"http://dqlcr5.coding-pages.com/tags/Concurrency/"},{"name":"DesignPatterns","slug":"DesignPatterns","permalink":"http://dqlcr5.coding-pages.com/tags/DesignPatterns/"},{"name":"resume","slug":"resume","permalink":"http://dqlcr5.coding-pages.com/tags/resume/"},{"name":"safe","slug":"safe","permalink":"http://dqlcr5.coding-pages.com/tags/safe/"},{"name":"maintain","slug":"maintain","permalink":"http://dqlcr5.coding-pages.com/tags/maintain/"},{"name":"frame","slug":"frame","permalink":"http://dqlcr5.coding-pages.com/tags/frame/"},{"name":"jvm","slug":"jvm","permalink":"http://dqlcr5.coding-pages.com/tags/jvm/"}]}